
parking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  0000420a  0000429e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000420a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800308  00800308  000043a6  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  000043a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000079e  00000000  00000000  00004586  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000037a0  00000000  00000000  00004d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016ea  00000000  00000000  000084c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002d47  00000000  00000000  00009bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000610  00000000  00000000  0000c8f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000890  00000000  00000000  0000cf08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1a  00000000  00000000  0000d798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000e1b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__vector_5>
      18:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lcd_set_4bit+0x10e>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ea e0       	ldi	r30, 0x0A	; 10
     17e:	f2 e4       	ldi	r31, 0x42	; 66
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 30       	cpi	r26, 0x08	; 8
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	a8 e0       	ldi	r26, 0x08	; 8
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ae 32       	cpi	r26, 0x2E	; 46
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <main>
     1a4:	0c 94 03 21 	jmp	0x4206	; 0x4206 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <motion_pin_config>:
// motion functions
unsigned char data;
int junction, side, park_cmd,unpark_cmd;

void motion_pin_config (void)
{
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
     1b4:	a1 e2       	ldi	r26, 0x21	; 33
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
     1b8:	e1 e2       	ldi	r30, 0x21	; 33
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	8f 60       	ori	r24, 0x0F	; 15
     1c0:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
     1c2:	a2 e2       	ldi	r26, 0x22	; 34
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	e2 e2       	ldi	r30, 0x22	; 34
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	80 7f       	andi	r24, 0xF0	; 240
     1ce:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     1d0:	aa e0       	ldi	r26, 0x0A	; 10
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	ea e0       	ldi	r30, 0x0A	; 10
     1d6:	f1 e0       	ldi	r31, 0x01	; 1
     1d8:	80 81       	ld	r24, Z
     1da:	88 61       	ori	r24, 0x18	; 24
     1dc:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     1de:	ab e0       	ldi	r26, 0x0B	; 11
     1e0:	b1 e0       	ldi	r27, 0x01	; 1
     1e2:	eb e0       	ldi	r30, 0x0B	; 11
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
     1e6:	80 81       	ld	r24, Z
     1e8:	88 61       	ori	r24, 0x18	; 24
     1ea:	8c 93       	st	X, r24
}
     1ec:	cf 91       	pop	r28
     1ee:	df 91       	pop	r29
     1f0:	08 95       	ret

000001f2 <init_devices>:

//Function to initialize ports
void init_devices()
{
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
cli();
     1fa:	f8 94       	cli
 motion_pin_config();
     1fc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <motion_pin_config>
 port_init();
     200:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <port_init>
 init_adc();
     204:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <init_adc>
 timer5_init();
     208:	0e 94 67 02 	call	0x4ce	; 0x4ce <timer5_init>
init_lcd();
     20c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <init_lcd>
lcd_init();
     210:	0e 94 28 09 	call	0x1250	; 0x1250 <lcd_init>
lcd_set_4bit();
     214:	0e 94 29 04 	call	0x852	; 0x852 <lcd_set_4bit>
 uart0_init(); //Initailize UART1 for serial communiaction
     218:	0e 94 1c 01 	call	0x238	; 0x238 <uart0_init>
init_buzzer();
     21c:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <init_buzzer>
left_encoder_pin_config(); //left encoder pin config
     220:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <left_encoder_pin_config>
 right_encoder_pin_config(); //right encoder pin config	
     224:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <right_encoder_pin_config>
left_position_encoder_interrupt_init();
     228:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
     22c:	0e 94 0a 10 	call	0x2014	; 0x2014 <right_position_encoder_interrupt_init>
sei();
     230:	78 94       	sei

}
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <uart0_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
     240:	e1 ec       	ldi	r30, 0xC1	; 193
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     246:	e0 ec       	ldi	r30, 0xC0	; 192
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	10 82       	st	Z, r1
 UCSR0C = 0x06;
     24c:	e2 ec       	ldi	r30, 0xC2	; 194
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	86 e0       	ldi	r24, 0x06	; 6
     252:	80 83       	st	Z, r24
 UBRR0L = 0x47; //set baud rate lo
     254:	e4 ec       	ldi	r30, 0xC4	; 196
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	87 e4       	ldi	r24, 0x47	; 71
     25a:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
     25c:	e5 ec       	ldi	r30, 0xC5	; 197
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	10 82       	st	Z, r1
 UCSR0B = 0x98;
     262:	e1 ec       	ldi	r30, 0xC1	; 193
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	88 e9       	ldi	r24, 0x98	; 152
     268:	80 83       	st	Z, r24
}
     26a:	cf 91       	pop	r28
     26c:	df 91       	pop	r29
     26e:	08 95       	ret

00000270 <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
     270:	1f 92       	push	r1
     272:	0f 92       	push	r0
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	0f 92       	push	r0
     278:	00 90 5b 00 	lds	r0, 0x005B
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	8f 93       	push	r24
     282:	9f 93       	push	r25
     284:	ef 93       	push	r30
     286:	ff 93       	push	r31
     288:	df 93       	push	r29
     28a:	cf 93       	push	r28
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable 
     290:	e6 ec       	ldi	r30, 0xC6	; 198
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	80 93 25 03 	sts	0x0325, r24

	UDR0 = data; 				//echo data back to PC
     29a:	e6 ec       	ldi	r30, 0xC6	; 198
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 91 25 03 	lds	r24, 0x0325
     2a2:	80 83       	st	Z, r24

		if(data == 0x30) 
     2a4:	80 91 25 03 	lds	r24, 0x0325
     2a8:	80 33       	cpi	r24, 0x30	; 48
     2aa:	31 f4       	brne	.+12     	; 0x2b8 <__vector_25+0x48>
		{
			unpark_cmd=1;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	90 93 27 03 	sts	0x0327, r25
     2b4:	80 93 26 03 	sts	0x0326, r24
		}
		if(data == 0x31) 
     2b8:	80 91 25 03 	lds	r24, 0x0325
     2bc:	81 33       	cpi	r24, 0x31	; 49
     2be:	91 f4       	brne	.+36     	; 0x2e4 <__vector_25+0x74>
		{
		
			junction=1;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	90 93 19 03 	sts	0x0319, r25
     2c8:	80 93 18 03 	sts	0x0318, r24
			side=1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	90 93 15 03 	sts	0x0315, r25
     2d4:	80 93 14 03 	sts	0x0314, r24
			park_cmd=1;
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	90 93 20 03 	sts	0x0320, r25
     2e0:	80 93 1f 03 	sts	0x031F, r24
		}
		if(data == 0x32) 
     2e4:	80 91 25 03 	lds	r24, 0x0325
     2e8:	82 33       	cpi	r24, 0x32	; 50
     2ea:	91 f4       	brne	.+36     	; 0x310 <__vector_25+0xa0>
		{
			junction=1;
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	90 93 19 03 	sts	0x0319, r25
     2f4:	80 93 18 03 	sts	0x0318, r24
			side=2;
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	90 93 15 03 	sts	0x0315, r25
     300:	80 93 14 03 	sts	0x0314, r24
			park_cmd=1;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	90 93 20 03 	sts	0x0320, r25
     30c:	80 93 1f 03 	sts	0x031F, r24
		}
		if(data == 0x33) 
     310:	80 91 25 03 	lds	r24, 0x0325
     314:	83 33       	cpi	r24, 0x33	; 51
     316:	91 f4       	brne	.+36     	; 0x33c <__vector_25+0xcc>
		{
			junction=2;
     318:	82 e0       	ldi	r24, 0x02	; 2
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	90 93 19 03 	sts	0x0319, r25
     320:	80 93 18 03 	sts	0x0318, r24
			side=1;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	90 93 15 03 	sts	0x0315, r25
     32c:	80 93 14 03 	sts	0x0314, r24
			park_cmd=1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	90 93 20 03 	sts	0x0320, r25
     338:	80 93 1f 03 	sts	0x031F, r24
		}
		if(data == 0x34) 
     33c:	80 91 25 03 	lds	r24, 0x0325
     340:	84 33       	cpi	r24, 0x34	; 52
     342:	91 f4       	brne	.+36     	; 0x368 <__vector_25+0xf8>
		{
			junction=2;
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	90 93 19 03 	sts	0x0319, r25
     34c:	80 93 18 03 	sts	0x0318, r24
			side=2;
     350:	82 e0       	ldi	r24, 0x02	; 2
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	90 93 15 03 	sts	0x0315, r25
     358:	80 93 14 03 	sts	0x0314, r24
			park_cmd=1;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	90 93 20 03 	sts	0x0320, r25
     364:	80 93 1f 03 	sts	0x031F, r24
		}
		if(data == 0x35) 
     368:	80 91 25 03 	lds	r24, 0x0325
     36c:	85 33       	cpi	r24, 0x35	; 53
     36e:	91 f4       	brne	.+36     	; 0x394 <__vector_25+0x124>
		{
			junction=3;
     370:	83 e0       	ldi	r24, 0x03	; 3
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	90 93 19 03 	sts	0x0319, r25
     378:	80 93 18 03 	sts	0x0318, r24
			side=1;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	90 93 15 03 	sts	0x0315, r25
     384:	80 93 14 03 	sts	0x0314, r24
			park_cmd=1;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	90 93 20 03 	sts	0x0320, r25
     390:	80 93 1f 03 	sts	0x031F, r24
		}
		if(data == 0x36) 
     394:	80 91 25 03 	lds	r24, 0x0325
     398:	86 33       	cpi	r24, 0x36	; 54
     39a:	91 f4       	brne	.+36     	; 0x3c0 <__vector_25+0x150>
		{
			junction=3;
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	90 93 19 03 	sts	0x0319, r25
     3a4:	80 93 18 03 	sts	0x0318, r24
			side=2;
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	90 93 15 03 	sts	0x0315, r25
     3b0:	80 93 14 03 	sts	0x0314, r24
			park_cmd=1;
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	90 93 20 03 	sts	0x0320, r25
     3bc:	80 93 1f 03 	sts	0x031F, r24
		}
}
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	ff 91       	pop	r31
     3c6:	ef 91       	pop	r30
     3c8:	9f 91       	pop	r25
     3ca:	8f 91       	pop	r24
     3cc:	0f 90       	pop	r0
     3ce:	00 92 5b 00 	sts	0x005B, r0
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <motion_set>:



//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     3dc:	df 93       	push	r29
     3de:	cf 93       	push	r28
     3e0:	0f 92       	push	r0
     3e2:	0f 92       	push	r0
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     3ea:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     3ec:	8a 81       	ldd	r24, Y+2	; 0x02
     3ee:	8f 70       	andi	r24, 0x0F	; 15
     3f0:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 			// reading the PORTA's original status
     3f2:	e2 e2       	ldi	r30, 0x22	; 34
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	80 7f       	andi	r24, 0xF0	; 240
     3fe:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     400:	99 81       	ldd	r25, Y+1	; 0x01
     402:	8a 81       	ldd	r24, Y+2	; 0x02
     404:	89 2b       	or	r24, r25
     406:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 			// setting the command to the port
     408:	e2 e2       	ldi	r30, 0x22	; 34
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	80 83       	st	Z, r24

}
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	cf 91       	pop	r28
     416:	df 91       	pop	r29
     418:	08 95       	ret

0000041a <MOVE_FWD>:
#define PARK park()
*/


void MOVE_FWD(void) //both wheels forward
{
     41a:	df 93       	push	r29
     41c:	cf 93       	push	r28
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
     422:	86 e0       	ldi	r24, 0x06	; 6
     424:	0e 94 ee 01 	call	0x3dc	; 0x3dc <motion_set>
}
     428:	cf 91       	pop	r28
     42a:	df 91       	pop	r29
     42c:	08 95       	ret

0000042e <MOVE_REV>:

void MOVE_REV(void) //both wheels backward
{
     42e:	df 93       	push	r29
     430:	cf 93       	push	r28
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     436:	89 e0       	ldi	r24, 0x09	; 9
     438:	0e 94 ee 01 	call	0x3dc	; 0x3dc <motion_set>
}
     43c:	cf 91       	pop	r28
     43e:	df 91       	pop	r29
     440:	08 95       	ret

00000442 <MOVE_LEFT>:

void MOVE_LEFT(void) //Left wheel backward, Right wheel forward
{
     442:	df 93       	push	r29
     444:	cf 93       	push	r28
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     44a:	85 e0       	ldi	r24, 0x05	; 5
     44c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <motion_set>
}
     450:	cf 91       	pop	r28
     452:	df 91       	pop	r29
     454:	08 95       	ret

00000456 <MOVE_RIGHT>:

void MOVE_RIGHT(void) //Left wheel forward, Right wheel backward
{
     456:	df 93       	push	r29
     458:	cf 93       	push	r28
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     45e:	8a e0       	ldi	r24, 0x0A	; 10
     460:	0e 94 ee 01 	call	0x3dc	; 0x3dc <motion_set>
}
     464:	cf 91       	pop	r28
     466:	df 91       	pop	r29
     468:	08 95       	ret

0000046a <MOVE_SOFT_LEFT>:

void MOVE_SOFT_LEFT (void) //Left wheel stationary, Right wheel forward
{
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	0e 94 ee 01 	call	0x3dc	; 0x3dc <motion_set>
}
     478:	cf 91       	pop	r28
     47a:	df 91       	pop	r29
     47c:	08 95       	ret

0000047e <MOVE_SOFT_RIGHT>:

void MOVE_SOFT_RIGHT (void) //Left wheel forward, Right wheel is stationary
{
     47e:	df 93       	push	r29
     480:	cf 93       	push	r28
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	0e 94 ee 01 	call	0x3dc	; 0x3dc <motion_set>
}
     48c:	cf 91       	pop	r28
     48e:	df 91       	pop	r29
     490:	08 95       	ret

00000492 <MOVE_INPLACE_LEFT>:

void MOVE_INPLACE_LEFT(void) //Left wheel backward, right wheel stationary
{
     492:	df 93       	push	r29
     494:	cf 93       	push	r28
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <motion_set>
}
     4a0:	cf 91       	pop	r28
     4a2:	df 91       	pop	r29
     4a4:	08 95       	ret

000004a6 <MOVE_INPLACE_RIGHT>:

void MOVE_INPLACE_RIGHT (void) //Left wheel stationary, Right wheel backward
{
     4a6:	df 93       	push	r29
     4a8:	cf 93       	push	r28
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     4ae:	88 e0       	ldi	r24, 0x08	; 8
     4b0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <motion_set>
}
     4b4:	cf 91       	pop	r28
     4b6:	df 91       	pop	r29
     4b8:	08 95       	ret

000004ba <STOP>:

void STOP (void)
{
     4ba:	df 93       	push	r29
     4bc:	cf 93       	push	r28
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <motion_set>
}
     4c8:	cf 91       	pop	r28
     4ca:	df 91       	pop	r29
     4cc:	08 95       	ret

000004ce <timer5_init>:
// Timer 5 initialised in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     4d6:	e1 e2       	ldi	r30, 0x21	; 33
     4d8:	f1 e0       	ldi	r31, 0x01	; 1
     4da:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     4dc:	e5 e2       	ldi	r30, 0x25	; 37
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	8f ef       	ldi	r24, 0xFF	; 255
     4e2:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     4e4:	e4 e2       	ldi	r30, 0x24	; 36
     4e6:	f1 e0       	ldi	r31, 0x01	; 1
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     4ec:	e9 e2       	ldi	r30, 0x29	; 41
     4ee:	f1 e0       	ldi	r31, 0x01	; 1
     4f0:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     4f2:	e8 e2       	ldi	r30, 0x28	; 40
     4f4:	f1 e0       	ldi	r31, 0x01	; 1
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     4fa:	eb e2       	ldi	r30, 0x2B	; 43
     4fc:	f1 e0       	ldi	r31, 0x01	; 1
     4fe:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     500:	ea e2       	ldi	r30, 0x2A	; 42
     502:	f1 e0       	ldi	r31, 0x01	; 1
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     508:	ed e2       	ldi	r30, 0x2D	; 45
     50a:	f1 e0       	ldi	r31, 0x01	; 1
     50c:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     50e:	ec e2       	ldi	r30, 0x2C	; 44
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	8f ef       	ldi	r24, 0xFF	; 255
     514:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     516:	e0 e2       	ldi	r30, 0x20	; 32
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	89 ea       	ldi	r24, 0xA9	; 169
     51c:	80 83       	st	Z, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     51e:	e1 e2       	ldi	r30, 0x21	; 33
     520:	f1 e0       	ldi	r31, 0x01	; 1
     522:	8b e0       	ldi	r24, 0x0B	; 11
     524:	80 83       	st	Z, r24
}
     526:	cf 91       	pop	r28
     528:	df 91       	pop	r29
     52a:	08 95       	ret

0000052c <velocity>:
// Function for robot velocity control
// Make sure that you pass only unsigned char value.


void velocity (unsigned char left_motor, unsigned char right_motor)
{
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	0f 92       	push	r0
     532:	0f 92       	push	r0
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	89 83       	std	Y+1, r24	; 0x01
     53a:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     53c:	e8 e2       	ldi	r30, 0x28	; 40
     53e:	f1 e0       	ldi	r31, 0x01	; 1
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     544:	ea e2       	ldi	r30, 0x2A	; 42
     546:	f1 e0       	ldi	r31, 0x01	; 1
     548:	8a 81       	ldd	r24, Y+2	; 0x02
     54a:	80 83       	st	Z, r24
}
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	cf 91       	pop	r28
     552:	df 91       	pop	r29
     554:	08 95       	ret

00000556 <MOTOR_LEFT_SPEED>:


void MOTOR_LEFT_SPEED(int val)
{
     556:	df 93       	push	r29
     558:	cf 93       	push	r28
     55a:	0f 92       	push	r0
     55c:	0f 92       	push	r0
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	9a 83       	std	Y+2, r25	; 0x02
     564:	89 83       	std	Y+1, r24	; 0x01
    if ( val > 254 )   //limiting the max velocity
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	9a 81       	ldd	r25, Y+2	; 0x02
     56a:	8f 3f       	cpi	r24, 0xFF	; 255
     56c:	91 05       	cpc	r25, r1
     56e:	24 f0       	brlt	.+8      	; 0x578 <MOTOR_LEFT_SPEED+0x22>
	   val = 255;	
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	9a 83       	std	Y+2, r25	; 0x02
     576:	89 83       	std	Y+1, r24	; 0x01
    OCR5AL = (unsigned char) val;
     578:	e8 e2       	ldi	r30, 0x28	; 40
     57a:	f1 e0       	ldi	r31, 0x01	; 1
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	80 83       	st	Z, r24
}
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	cf 91       	pop	r28
     586:	df 91       	pop	r29
     588:	08 95       	ret

0000058a <MOTOR_RIGHT_SPEED>:

void MOTOR_RIGHT_SPEED(int val)
{
     58a:	df 93       	push	r29
     58c:	cf 93       	push	r28
     58e:	0f 92       	push	r0
     590:	0f 92       	push	r0
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	9a 83       	std	Y+2, r25	; 0x02
     598:	89 83       	std	Y+1, r24	; 0x01
  if ( val > 254 )     //limiting the max velocity
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	8f 3f       	cpi	r24, 0xFF	; 255
     5a0:	91 05       	cpc	r25, r1
     5a2:	24 f0       	brlt	.+8      	; 0x5ac <MOTOR_RIGHT_SPEED+0x22>
	  val = 255;
     5a4:	8f ef       	ldi	r24, 0xFF	; 255
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	9a 83       	std	Y+2, r25	; 0x02
     5aa:	89 83       	std	Y+1, r24	; 0x01
  OCR5BL = (unsigned char) val;
     5ac:	ea e2       	ldi	r30, 0x2A	; 42
     5ae:	f1 e0       	ldi	r31, 0x01	; 1
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	80 83       	st	Z, r24
}
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	cf 91       	pop	r28
     5ba:	df 91       	pop	r29
     5bc:	08 95       	ret

000005be <adc_pin_config>:



//ADC pin configuration
void adc_pin_config (void)
{
     5be:	df 93       	push	r29
     5c0:	cf 93       	push	r28
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
     5c6:	e0 e3       	ldi	r30, 0x30	; 48
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	10 82       	st	Z, r1
 PORTF = 0x00;
     5cc:	e1 e3       	ldi	r30, 0x31	; 49
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	10 82       	st	Z, r1
 DDRK = 0x00;
     5d2:	e7 e0       	ldi	r30, 0x07	; 7
     5d4:	f1 e0       	ldi	r31, 0x01	; 1
     5d6:	10 82       	st	Z, r1
 PORTK = 0x00;
     5d8:	e8 e0       	ldi	r30, 0x08	; 8
     5da:	f1 e0       	ldi	r31, 0x01	; 1
     5dc:	10 82       	st	Z, r1
}
     5de:	cf 91       	pop	r28
     5e0:	df 91       	pop	r29
     5e2:	08 95       	ret

000005e4 <port_init>:



//Function to Initialize PORTS
void port_init()
{
     5e4:	df 93       	push	r29
     5e6:	cf 93       	push	r28
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
	
	adc_pin_config();
     5ec:	0e 94 df 02 	call	0x5be	; 0x5be <adc_pin_config>
		
}
     5f0:	cf 91       	pop	r28
     5f2:	df 91       	pop	r29
     5f4:	08 95       	ret

000005f6 <init_adc>:




void init_adc()
{
     5f6:	df 93       	push	r29
     5f8:	cf 93       	push	r28
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
     5fe:	ea e7       	ldi	r30, 0x7A	; 122
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     604:	eb e7       	ldi	r30, 0x7B	; 123
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     60a:	ec e7       	ldi	r30, 0x7C	; 124
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 e2       	ldi	r24, 0x20	; 32
     610:	80 83       	st	Z, r24
	ACSR = 0x80;
     612:	e0 e5       	ldi	r30, 0x50	; 80
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 e8       	ldi	r24, 0x80	; 128
     618:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     61a:	ea e7       	ldi	r30, 0x7A	; 122
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	86 e8       	ldi	r24, 0x86	; 134
     620:	80 83       	st	Z, r24
}
     622:	cf 91       	pop	r28
     624:	df 91       	pop	r29
     626:	08 95       	ret

00000628 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	0f 92       	push	r0
     62e:	0f 92       	push	r0
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
     636:	8a 81       	ldd	r24, Y+2	; 0x02
     638:	88 30       	cpi	r24, 0x08	; 8
     63a:	20 f0       	brcs	.+8      	; 0x644 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
     63c:	eb e7       	ldi	r30, 0x7B	; 123
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	88 e0       	ldi	r24, 0x08	; 8
     642:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
     644:	8a 81       	ldd	r24, Y+2	; 0x02
     646:	87 70       	andi	r24, 0x07	; 7
     648:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
     64a:	ec e7       	ldi	r30, 0x7C	; 124
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	8a 81       	ldd	r24, Y+2	; 0x02
     650:	80 62       	ori	r24, 0x20	; 32
     652:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     654:	aa e7       	ldi	r26, 0x7A	; 122
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	ea e7       	ldi	r30, 0x7A	; 122
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	80 64       	ori	r24, 0x40	; 64
     660:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     662:	ea e7       	ldi	r30, 0x7A	; 122
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	80 81       	ld	r24, Z
     668:	88 2f       	mov	r24, r24
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	80 71       	andi	r24, 0x10	; 16
     66e:	90 70       	andi	r25, 0x00	; 0
     670:	00 97       	sbiw	r24, 0x00	; 0
     672:	b9 f3       	breq	.-18     	; 0x662 <ADC_Conversion+0x3a>
	a=ADCH;
     674:	e9 e7       	ldi	r30, 0x79	; 121
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10;
     67c:	aa e7       	ldi	r26, 0x7A	; 122
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	ea e7       	ldi	r30, 0x7A	; 122
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	80 61       	ori	r24, 0x10	; 16
     688:	8c 93       	st	X, r24
	ADCSRB = 0x00;
     68a:	eb e7       	ldi	r30, 0x7B	; 123
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	10 82       	st	Z, r1
	return a;
     690:	89 81       	ldd	r24, Y+1	; 0x01
}
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	cf 91       	pop	r28
     698:	df 91       	pop	r29
     69a:	08 95       	ret

0000069c <init_ir>:
 analog value of Sharp Sensor. 
 ***********************************************************************************/

/***** Function to Initialize PORTS *****/
void init_ir()
{
     69c:	df 93       	push	r29
     69e:	cf 93       	push	r28
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
     6a4:	e0 e3       	ldi	r30, 0x30	; 48
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	10 82       	st	Z, r1
	PORTF = 0x00;
     6aa:	e1 e3       	ldi	r30, 0x31	; 49
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	10 82       	st	Z, r1
	DDRA = 0x0F;
     6b0:	e1 e2       	ldi	r30, 0x21	; 33
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	8f e0       	ldi	r24, 0x0F	; 15
     6b6:	80 83       	st	Z, r24
	PORTA = 0x00;
     6b8:	e2 e2       	ldi	r30, 0x22	; 34
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	10 82       	st	Z, r1
	DDRL = 0x18;
     6be:	ea e0       	ldi	r30, 0x0A	; 10
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	88 e1       	ldi	r24, 0x18	; 24
     6c4:	80 83       	st	Z, r24
	PORTL = 0x18;
     6c6:	eb e0       	ldi	r30, 0x0B	; 11
     6c8:	f1 e0       	ldi	r31, 0x01	; 1
     6ca:	88 e1       	ldi	r24, 0x18	; 24
     6cc:	80 83       	st	Z, r24
	DDRC = 0xFF;
     6ce:	e7 e2       	ldi	r30, 0x27	; 39
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	8f ef       	ldi	r24, 0xFF	; 255
     6d4:	80 83       	st	Z, r24
	PORTC = 0x00;
     6d6:	e8 e2       	ldi	r30, 0x28	; 40
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	10 82       	st	Z, r1
	DDRJ = 0x00;
     6dc:	e4 e0       	ldi	r30, 0x04	; 4
     6de:	f1 e0       	ldi	r31, 0x01	; 1
     6e0:	10 82       	st	Z, r1
	PORTJ = 0xFF;
     6e2:	e5 e0       	ldi	r30, 0x05	; 5
     6e4:	f1 e0       	ldi	r31, 0x01	; 1
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	80 83       	st	Z, r24
}
     6ea:	cf 91       	pop	r28
     6ec:	df 91       	pop	r29
     6ee:	08 95       	ret

000006f0 <Sharp_estimation>:


unsigned int Sharp_estimation(unsigned char adc_reading)
{
     6f0:	df 93       	push	r29
     6f2:	cf 93       	push	r28
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	27 97       	sbiw	r28, 0x07	; 7
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
     704:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     706:	8f 81       	ldd	r24, Y+7	; 0x07
     708:	88 2f       	mov	r24, r24
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	bc 01       	movw	r22, r24
     712:	cd 01       	movw	r24, r26
     714:	0e 94 b7 1b 	call	0x376e	; 0x376e <__floatunsisf>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	bc 01       	movw	r22, r24
     71e:	cd 01       	movw	r24, r26
     720:	2f ee       	ldi	r18, 0xEF	; 239
     722:	39 ec       	ldi	r19, 0xC9	; 201
     724:	43 e9       	ldi	r20, 0x93	; 147
     726:	5f e3       	ldi	r21, 0x3F	; 63
     728:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <pow>
     72c:	dc 01       	movw	r26, r24
     72e:	cb 01       	movw	r24, r22
     730:	9c 01       	movw	r18, r24
     732:	ad 01       	movw	r20, r26
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	80 e8       	ldi	r24, 0x80	; 128
     73a:	9f e3       	ldi	r25, 0x3F	; 63
     73c:	0e 94 c9 19 	call	0x3392	; 0x3392 <__divsf3>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	bc 01       	movw	r22, r24
     746:	cd 01       	movw	r24, r26
     748:	2a e9       	ldi	r18, 0x9A	; 154
     74a:	39 ef       	ldi	r19, 0xF9	; 249
     74c:	4e e2       	ldi	r20, 0x2E	; 46
     74e:	55 e4       	ldi	r21, 0x45	; 69
     750:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	bc 01       	movw	r22, r24
     75a:	cd 01       	movw	r24, r26
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	40 e2       	ldi	r20, 0x20	; 32
     762:	51 e4       	ldi	r21, 0x41	; 65
     764:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     768:	dc 01       	movw	r26, r24
     76a:	cb 01       	movw	r24, r22
     76c:	bc 01       	movw	r22, r24
     76e:	cd 01       	movw	r24, r26
     770:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__fixsfsi>
     774:	dc 01       	movw	r26, r24
     776:	cb 01       	movw	r24, r22
     778:	aa 27       	eor	r26, r26
     77a:	97 fd       	sbrc	r25, 7
     77c:	a0 95       	com	r26
     77e:	ba 2f       	mov	r27, r26
     780:	bc 01       	movw	r22, r24
     782:	cd 01       	movw	r24, r26
     784:	0e 94 05 1b 	call	0x360a	; 0x360a <__floatsisf>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	8b 83       	std	Y+3, r24	; 0x03
     78e:	9c 83       	std	Y+4, r25	; 0x04
     790:	ad 83       	std	Y+5, r26	; 0x05
     792:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
     794:	6b 81       	ldd	r22, Y+3	; 0x03
     796:	7c 81       	ldd	r23, Y+4	; 0x04
     798:	8d 81       	ldd	r24, Y+5	; 0x05
     79a:	9e 81       	ldd	r25, Y+6	; 0x06
     79c:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__fixsfsi>
     7a0:	dc 01       	movw	r26, r24
     7a2:	cb 01       	movw	r24, r22
     7a4:	9a 83       	std	Y+2, r25	; 0x02
     7a6:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	9a 81       	ldd	r25, Y+2	; 0x02
     7ac:	23 e0       	ldi	r18, 0x03	; 3
     7ae:	81 32       	cpi	r24, 0x21	; 33
     7b0:	92 07       	cpc	r25, r18
     7b2:	20 f0       	brcs	.+8      	; 0x7bc <Sharp_estimation+0xcc>
	{
		distanceInt=800;
     7b4:	80 e2       	ldi	r24, 0x20	; 32
     7b6:	93 e0       	ldi	r25, 0x03	; 3
     7b8:	9a 83       	std	Y+2, r25	; 0x02
     7ba:	89 83       	std	Y+1, r24	; 0x01
	}
	return distanceInt;
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
}
     7c0:	27 96       	adiw	r28, 0x07	; 7
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	cf 91       	pop	r28
     7ce:	df 91       	pop	r29
     7d0:	08 95       	ret

000007d2 <front_dist_mm>:


int front_dist_mm(void) 
{
     7d2:	df 93       	push	r29
     7d4:	cf 93       	push	r28
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <front_dist_mm+0x6>
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
  //float front_distance;
  int front_distance_mm;
  unsigned char analog_val;
  analog_val = ADC_Conversion(11);
     7dc:	8b e0       	ldi	r24, 0x0B	; 11
     7de:	0e 94 14 03 	call	0x628	; 0x628 <ADC_Conversion>
     7e2:	89 83       	std	Y+1, r24	; 0x01
 

 front_distance_mm=Sharp_estimation(analog_val);
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <Sharp_estimation>
     7ea:	9b 83       	std	Y+3, r25	; 0x03
     7ec:	8a 83       	std	Y+2, r24	; 0x02
  return front_distance_mm; 	
     7ee:	8a 81       	ldd	r24, Y+2	; 0x02
     7f0:	9b 81       	ldd	r25, Y+3	; 0x03

  //return 100;
}
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	cf 91       	pop	r28
     7fa:	df 91       	pop	r29
     7fc:	08 95       	ret

000007fe <init_lcd>:

int i;


void init_lcd()
{
     7fe:	df 93       	push	r29
     800:	cf 93       	push	r28
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
     806:	e0 e3       	ldi	r30, 0x30	; 48
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	10 82       	st	Z, r1
	PORTF = 0x00;
     80c:	e1 e3       	ldi	r30, 0x31	; 49
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	10 82       	st	Z, r1
	DDRA = 0x0F;
     812:	e1 e2       	ldi	r30, 0x21	; 33
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	8f e0       	ldi	r24, 0x0F	; 15
     818:	80 83       	st	Z, r24
	PORTA = 0x00;
     81a:	e2 e2       	ldi	r30, 0x22	; 34
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	10 82       	st	Z, r1
	DDRL = 0x18;
     820:	ea e0       	ldi	r30, 0x0A	; 10
     822:	f1 e0       	ldi	r31, 0x01	; 1
     824:	88 e1       	ldi	r24, 0x18	; 24
     826:	80 83       	st	Z, r24
	PORTL = 0x18;
     828:	eb e0       	ldi	r30, 0x0B	; 11
     82a:	f1 e0       	ldi	r31, 0x01	; 1
     82c:	88 e1       	ldi	r24, 0x18	; 24
     82e:	80 83       	st	Z, r24
	DDRC = 0xFF;
     830:	e7 e2       	ldi	r30, 0x27	; 39
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	80 83       	st	Z, r24
	PORTC = 0x00;
     838:	e8 e2       	ldi	r30, 0x28	; 40
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	10 82       	st	Z, r1
	DDRJ = 0x00;
     83e:	e4 e0       	ldi	r30, 0x04	; 4
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	10 82       	st	Z, r1
	PORTJ = 0xFF;
     844:	e5 e0       	ldi	r30, 0x05	; 5
     846:	f1 e0       	ldi	r31, 0x01	; 1
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	80 83       	st	Z, r24
}
     84c:	cf 91       	pop	r28
     84e:	df 91       	pop	r29
     850:	08 95       	ret

00000852 <lcd_set_4bit>:



/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	df 93       	push	r29
     858:	cf 93       	push	r28
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	c0 57       	subi	r28, 0x70	; 112
     860:	d0 40       	sbci	r29, 0x00	; 0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	fe 01       	movw	r30, r28
     86e:	e3 59       	subi	r30, 0x93	; 147
     870:	ff 4f       	sbci	r31, 0xFF	; 255
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	a0 e8       	ldi	r26, 0x80	; 128
     878:	bf e3       	ldi	r27, 0x3F	; 63
     87a:	80 83       	st	Z, r24
     87c:	91 83       	std	Z+1, r25	; 0x01
     87e:	a2 83       	std	Z+2, r26	; 0x02
     880:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     882:	8e 01       	movw	r16, r28
     884:	07 59       	subi	r16, 0x97	; 151
     886:	1f 4f       	sbci	r17, 0xFF	; 255
     888:	fe 01       	movw	r30, r28
     88a:	e3 59       	subi	r30, 0x93	; 147
     88c:	ff 4f       	sbci	r31, 0xFF	; 255
     88e:	60 81       	ld	r22, Z
     890:	71 81       	ldd	r23, Z+1	; 0x01
     892:	82 81       	ldd	r24, Z+2	; 0x02
     894:	93 81       	ldd	r25, Z+3	; 0x03
     896:	2d ec       	ldi	r18, 0xCD	; 205
     898:	3c ec       	ldi	r19, 0xCC	; 204
     89a:	4c e2       	ldi	r20, 0x2C	; 44
     89c:	55 e4       	ldi	r21, 0x45	; 69
     89e:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     8a2:	dc 01       	movw	r26, r24
     8a4:	cb 01       	movw	r24, r22
     8a6:	f8 01       	movw	r30, r16
     8a8:	80 83       	st	Z, r24
     8aa:	91 83       	std	Z+1, r25	; 0x01
     8ac:	a2 83       	std	Z+2, r26	; 0x02
     8ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8b0:	fe 01       	movw	r30, r28
     8b2:	e7 59       	subi	r30, 0x97	; 151
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	60 81       	ld	r22, Z
     8b8:	71 81       	ldd	r23, Z+1	; 0x01
     8ba:	82 81       	ldd	r24, Z+2	; 0x02
     8bc:	93 81       	ldd	r25, Z+3	; 0x03
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e8       	ldi	r20, 0x80	; 128
     8c4:	5f e3       	ldi	r21, 0x3F	; 63
     8c6:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
     8ca:	88 23       	and	r24, r24
     8cc:	44 f4       	brge	.+16     	; 0x8de <lcd_set_4bit+0x8c>
		__ticks = 1;
     8ce:	fe 01       	movw	r30, r28
     8d0:	e9 59       	subi	r30, 0x99	; 153
     8d2:	ff 4f       	sbci	r31, 0xFF	; 255
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	91 83       	std	Z+1, r25	; 0x01
     8da:	80 83       	st	Z, r24
     8dc:	64 c0       	rjmp	.+200    	; 0x9a6 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     8de:	fe 01       	movw	r30, r28
     8e0:	e7 59       	subi	r30, 0x97	; 151
     8e2:	ff 4f       	sbci	r31, 0xFF	; 255
     8e4:	60 81       	ld	r22, Z
     8e6:	71 81       	ldd	r23, Z+1	; 0x01
     8e8:	82 81       	ldd	r24, Z+2	; 0x02
     8ea:	93 81       	ldd	r25, Z+3	; 0x03
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	4f e7       	ldi	r20, 0x7F	; 127
     8f2:	57 e4       	ldi	r21, 0x47	; 71
     8f4:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
     8f8:	18 16       	cp	r1, r24
     8fa:	0c f0       	brlt	.+2      	; 0x8fe <lcd_set_4bit+0xac>
     8fc:	43 c0       	rjmp	.+134    	; 0x984 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8fe:	fe 01       	movw	r30, r28
     900:	e3 59       	subi	r30, 0x93	; 147
     902:	ff 4f       	sbci	r31, 0xFF	; 255
     904:	60 81       	ld	r22, Z
     906:	71 81       	ldd	r23, Z+1	; 0x01
     908:	82 81       	ldd	r24, Z+2	; 0x02
     90a:	93 81       	ldd	r25, Z+3	; 0x03
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e2       	ldi	r20, 0x20	; 32
     912:	51 e4       	ldi	r21, 0x41	; 65
     914:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     918:	dc 01       	movw	r26, r24
     91a:	cb 01       	movw	r24, r22
     91c:	8e 01       	movw	r16, r28
     91e:	09 59       	subi	r16, 0x99	; 153
     920:	1f 4f       	sbci	r17, 0xFF	; 255
     922:	bc 01       	movw	r22, r24
     924:	cd 01       	movw	r24, r26
     926:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
     92a:	dc 01       	movw	r26, r24
     92c:	cb 01       	movw	r24, r22
     92e:	f8 01       	movw	r30, r16
     930:	91 83       	std	Z+1, r25	; 0x01
     932:	80 83       	st	Z, r24
     934:	1f c0       	rjmp	.+62     	; 0x974 <lcd_set_4bit+0x122>
     936:	fe 01       	movw	r30, r28
     938:	eb 59       	subi	r30, 0x9B	; 155
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	84 e1       	ldi	r24, 0x14	; 20
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	91 83       	std	Z+1, r25	; 0x01
     942:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     944:	fe 01       	movw	r30, r28
     946:	eb 59       	subi	r30, 0x9B	; 155
     948:	ff 4f       	sbci	r31, 0xFF	; 255
     94a:	80 81       	ld	r24, Z
     94c:	91 81       	ldd	r25, Z+1	; 0x01
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <lcd_set_4bit+0xfc>
     952:	fe 01       	movw	r30, r28
     954:	eb 59       	subi	r30, 0x9B	; 155
     956:	ff 4f       	sbci	r31, 0xFF	; 255
     958:	91 83       	std	Z+1, r25	; 0x01
     95a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     95c:	de 01       	movw	r26, r28
     95e:	a9 59       	subi	r26, 0x99	; 153
     960:	bf 4f       	sbci	r27, 0xFF	; 255
     962:	fe 01       	movw	r30, r28
     964:	e9 59       	subi	r30, 0x99	; 153
     966:	ff 4f       	sbci	r31, 0xFF	; 255
     968:	80 81       	ld	r24, Z
     96a:	91 81       	ldd	r25, Z+1	; 0x01
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	11 96       	adiw	r26, 0x01	; 1
     970:	9c 93       	st	X, r25
     972:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     974:	fe 01       	movw	r30, r28
     976:	e9 59       	subi	r30, 0x99	; 153
     978:	ff 4f       	sbci	r31, 0xFF	; 255
     97a:	80 81       	ld	r24, Z
     97c:	91 81       	ldd	r25, Z+1	; 0x01
     97e:	00 97       	sbiw	r24, 0x00	; 0
     980:	d1 f6       	brne	.-76     	; 0x936 <lcd_set_4bit+0xe4>
     982:	27 c0       	rjmp	.+78     	; 0x9d2 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     984:	8e 01       	movw	r16, r28
     986:	09 59       	subi	r16, 0x99	; 153
     988:	1f 4f       	sbci	r17, 0xFF	; 255
     98a:	fe 01       	movw	r30, r28
     98c:	e7 59       	subi	r30, 0x97	; 151
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	60 81       	ld	r22, Z
     992:	71 81       	ldd	r23, Z+1	; 0x01
     994:	82 81       	ldd	r24, Z+2	; 0x02
     996:	93 81       	ldd	r25, Z+3	; 0x03
     998:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
     99c:	dc 01       	movw	r26, r24
     99e:	cb 01       	movw	r24, r22
     9a0:	f8 01       	movw	r30, r16
     9a2:	91 83       	std	Z+1, r25	; 0x01
     9a4:	80 83       	st	Z, r24
     9a6:	de 01       	movw	r26, r28
     9a8:	ad 59       	subi	r26, 0x9D	; 157
     9aa:	bf 4f       	sbci	r27, 0xFF	; 255
     9ac:	fe 01       	movw	r30, r28
     9ae:	e9 59       	subi	r30, 0x99	; 153
     9b0:	ff 4f       	sbci	r31, 0xFF	; 255
     9b2:	80 81       	ld	r24, Z
     9b4:	91 81       	ldd	r25, Z+1	; 0x01
     9b6:	8d 93       	st	X+, r24
     9b8:	9c 93       	st	X, r25
     9ba:	fe 01       	movw	r30, r28
     9bc:	ed 59       	subi	r30, 0x9D	; 157
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	80 81       	ld	r24, Z
     9c2:	91 81       	ldd	r25, Z+1	; 0x01
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <lcd_set_4bit+0x172>
     9c8:	fe 01       	movw	r30, r28
     9ca:	ed 59       	subi	r30, 0x9D	; 157
     9cc:	ff 4f       	sbci	r31, 0xFF	; 255
     9ce:	91 83       	std	Z+1, r25	; 0x01
     9d0:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9d2:	a8 e2       	ldi	r26, 0x28	; 40
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	e8 e2       	ldi	r30, 0x28	; 40
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	8e 7f       	andi	r24, 0xFE	; 254
     9de:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9e0:	a8 e2       	ldi	r26, 0x28	; 40
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	e8 e2       	ldi	r30, 0x28	; 40
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	8d 7f       	andi	r24, 0xFD	; 253
     9ec:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     9ee:	e8 e2       	ldi	r30, 0x28	; 40
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 e3       	ldi	r24, 0x30	; 48
     9f4:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     9f6:	a8 e2       	ldi	r26, 0x28	; 40
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	e8 e2       	ldi	r30, 0x28	; 40
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	84 60       	ori	r24, 0x04	; 4
     a02:	8c 93       	st	X, r24
     a04:	fe 01       	movw	r30, r28
     a06:	e1 5a       	subi	r30, 0xA1	; 161
     a08:	ff 4f       	sbci	r31, 0xFF	; 255
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 ea       	ldi	r26, 0xA0	; 160
     a10:	b0 e4       	ldi	r27, 0x40	; 64
     a12:	80 83       	st	Z, r24
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	a2 83       	std	Z+2, r26	; 0x02
     a18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a1a:	8e 01       	movw	r16, r28
     a1c:	05 5a       	subi	r16, 0xA5	; 165
     a1e:	1f 4f       	sbci	r17, 0xFF	; 255
     a20:	fe 01       	movw	r30, r28
     a22:	e1 5a       	subi	r30, 0xA1	; 161
     a24:	ff 4f       	sbci	r31, 0xFF	; 255
     a26:	60 81       	ld	r22, Z
     a28:	71 81       	ldd	r23, Z+1	; 0x01
     a2a:	82 81       	ldd	r24, Z+2	; 0x02
     a2c:	93 81       	ldd	r25, Z+3	; 0x03
     a2e:	2d ec       	ldi	r18, 0xCD	; 205
     a30:	3c ec       	ldi	r19, 0xCC	; 204
     a32:	4c e2       	ldi	r20, 0x2C	; 44
     a34:	55 e4       	ldi	r21, 0x45	; 69
     a36:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	f8 01       	movw	r30, r16
     a40:	80 83       	st	Z, r24
     a42:	91 83       	std	Z+1, r25	; 0x01
     a44:	a2 83       	std	Z+2, r26	; 0x02
     a46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a48:	fe 01       	movw	r30, r28
     a4a:	e5 5a       	subi	r30, 0xA5	; 165
     a4c:	ff 4f       	sbci	r31, 0xFF	; 255
     a4e:	60 81       	ld	r22, Z
     a50:	71 81       	ldd	r23, Z+1	; 0x01
     a52:	82 81       	ldd	r24, Z+2	; 0x02
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	44 f4       	brge	.+16     	; 0xa76 <lcd_set_4bit+0x224>
		__ticks = 1;
     a66:	fe 01       	movw	r30, r28
     a68:	e7 5a       	subi	r30, 0xA7	; 167
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	91 83       	std	Z+1, r25	; 0x01
     a72:	80 83       	st	Z, r24
     a74:	64 c0       	rjmp	.+200    	; 0xb3e <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     a76:	fe 01       	movw	r30, r28
     a78:	e5 5a       	subi	r30, 0xA5	; 165
     a7a:	ff 4f       	sbci	r31, 0xFF	; 255
     a7c:	60 81       	ld	r22, Z
     a7e:	71 81       	ldd	r23, Z+1	; 0x01
     a80:	82 81       	ldd	r24, Z+2	; 0x02
     a82:	93 81       	ldd	r25, Z+3	; 0x03
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	3f ef       	ldi	r19, 0xFF	; 255
     a88:	4f e7       	ldi	r20, 0x7F	; 127
     a8a:	57 e4       	ldi	r21, 0x47	; 71
     a8c:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
     a90:	18 16       	cp	r1, r24
     a92:	0c f0       	brlt	.+2      	; 0xa96 <lcd_set_4bit+0x244>
     a94:	43 c0       	rjmp	.+134    	; 0xb1c <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a96:	fe 01       	movw	r30, r28
     a98:	e1 5a       	subi	r30, 0xA1	; 161
     a9a:	ff 4f       	sbci	r31, 0xFF	; 255
     a9c:	60 81       	ld	r22, Z
     a9e:	71 81       	ldd	r23, Z+1	; 0x01
     aa0:	82 81       	ldd	r24, Z+2	; 0x02
     aa2:	93 81       	ldd	r25, Z+3	; 0x03
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e2       	ldi	r20, 0x20	; 32
     aaa:	51 e4       	ldi	r21, 0x41	; 65
     aac:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	8e 01       	movw	r16, r28
     ab6:	07 5a       	subi	r16, 0xA7	; 167
     ab8:	1f 4f       	sbci	r17, 0xFF	; 255
     aba:	bc 01       	movw	r22, r24
     abc:	cd 01       	movw	r24, r26
     abe:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
     ac2:	dc 01       	movw	r26, r24
     ac4:	cb 01       	movw	r24, r22
     ac6:	f8 01       	movw	r30, r16
     ac8:	91 83       	std	Z+1, r25	; 0x01
     aca:	80 83       	st	Z, r24
     acc:	1f c0       	rjmp	.+62     	; 0xb0c <lcd_set_4bit+0x2ba>
     ace:	fe 01       	movw	r30, r28
     ad0:	e9 5a       	subi	r30, 0xA9	; 169
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	84 e1       	ldi	r24, 0x14	; 20
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	91 83       	std	Z+1, r25	; 0x01
     ada:	80 83       	st	Z, r24
     adc:	fe 01       	movw	r30, r28
     ade:	e9 5a       	subi	r30, 0xA9	; 169
     ae0:	ff 4f       	sbci	r31, 0xFF	; 255
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <lcd_set_4bit+0x294>
     aea:	fe 01       	movw	r30, r28
     aec:	e9 5a       	subi	r30, 0xA9	; 169
     aee:	ff 4f       	sbci	r31, 0xFF	; 255
     af0:	91 83       	std	Z+1, r25	; 0x01
     af2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     af4:	de 01       	movw	r26, r28
     af6:	a7 5a       	subi	r26, 0xA7	; 167
     af8:	bf 4f       	sbci	r27, 0xFF	; 255
     afa:	fe 01       	movw	r30, r28
     afc:	e7 5a       	subi	r30, 0xA7	; 167
     afe:	ff 4f       	sbci	r31, 0xFF	; 255
     b00:	80 81       	ld	r24, Z
     b02:	91 81       	ldd	r25, Z+1	; 0x01
     b04:	01 97       	sbiw	r24, 0x01	; 1
     b06:	11 96       	adiw	r26, 0x01	; 1
     b08:	9c 93       	st	X, r25
     b0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b0c:	fe 01       	movw	r30, r28
     b0e:	e7 5a       	subi	r30, 0xA7	; 167
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	80 81       	ld	r24, Z
     b14:	91 81       	ldd	r25, Z+1	; 0x01
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	d1 f6       	brne	.-76     	; 0xace <lcd_set_4bit+0x27c>
     b1a:	27 c0       	rjmp	.+78     	; 0xb6a <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b1c:	8e 01       	movw	r16, r28
     b1e:	07 5a       	subi	r16, 0xA7	; 167
     b20:	1f 4f       	sbci	r17, 0xFF	; 255
     b22:	fe 01       	movw	r30, r28
     b24:	e5 5a       	subi	r30, 0xA5	; 165
     b26:	ff 4f       	sbci	r31, 0xFF	; 255
     b28:	60 81       	ld	r22, Z
     b2a:	71 81       	ldd	r23, Z+1	; 0x01
     b2c:	82 81       	ldd	r24, Z+2	; 0x02
     b2e:	93 81       	ldd	r25, Z+3	; 0x03
     b30:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	f8 01       	movw	r30, r16
     b3a:	91 83       	std	Z+1, r25	; 0x01
     b3c:	80 83       	st	Z, r24
     b3e:	de 01       	movw	r26, r28
     b40:	ab 5a       	subi	r26, 0xAB	; 171
     b42:	bf 4f       	sbci	r27, 0xFF	; 255
     b44:	fe 01       	movw	r30, r28
     b46:	e7 5a       	subi	r30, 0xA7	; 167
     b48:	ff 4f       	sbci	r31, 0xFF	; 255
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	8d 93       	st	X+, r24
     b50:	9c 93       	st	X, r25
     b52:	fe 01       	movw	r30, r28
     b54:	eb 5a       	subi	r30, 0xAB	; 171
     b56:	ff 4f       	sbci	r31, 0xFF	; 255
     b58:	80 81       	ld	r24, Z
     b5a:	91 81       	ldd	r25, Z+1	; 0x01
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <lcd_set_4bit+0x30a>
     b60:	fe 01       	movw	r30, r28
     b62:	eb 5a       	subi	r30, 0xAB	; 171
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b6a:	a8 e2       	ldi	r26, 0x28	; 40
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 e2       	ldi	r30, 0x28	; 40
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8b 7f       	andi	r24, 0xFB	; 251
     b76:	8c 93       	st	X, r24
     b78:	fe 01       	movw	r30, r28
     b7a:	ef 5a       	subi	r30, 0xAF	; 175
     b7c:	ff 4f       	sbci	r31, 0xFF	; 255
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	a0 e8       	ldi	r26, 0x80	; 128
     b84:	bf e3       	ldi	r27, 0x3F	; 63
     b86:	80 83       	st	Z, r24
     b88:	91 83       	std	Z+1, r25	; 0x01
     b8a:	a2 83       	std	Z+2, r26	; 0x02
     b8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8e:	8e 01       	movw	r16, r28
     b90:	03 5b       	subi	r16, 0xB3	; 179
     b92:	1f 4f       	sbci	r17, 0xFF	; 255
     b94:	fe 01       	movw	r30, r28
     b96:	ef 5a       	subi	r30, 0xAF	; 175
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	60 81       	ld	r22, Z
     b9c:	71 81       	ldd	r23, Z+1	; 0x01
     b9e:	82 81       	ldd	r24, Z+2	; 0x02
     ba0:	93 81       	ldd	r25, Z+3	; 0x03
     ba2:	2d ec       	ldi	r18, 0xCD	; 205
     ba4:	3c ec       	ldi	r19, 0xCC	; 204
     ba6:	4c e2       	ldi	r20, 0x2C	; 44
     ba8:	55 e4       	ldi	r21, 0x45	; 69
     baa:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	f8 01       	movw	r30, r16
     bb4:	80 83       	st	Z, r24
     bb6:	91 83       	std	Z+1, r25	; 0x01
     bb8:	a2 83       	std	Z+2, r26	; 0x02
     bba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bbc:	fe 01       	movw	r30, r28
     bbe:	e3 5b       	subi	r30, 0xB3	; 179
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	60 81       	ld	r22, Z
     bc4:	71 81       	ldd	r23, Z+1	; 0x01
     bc6:	82 81       	ldd	r24, Z+2	; 0x02
     bc8:	93 81       	ldd	r25, Z+3	; 0x03
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e8       	ldi	r20, 0x80	; 128
     bd0:	5f e3       	ldi	r21, 0x3F	; 63
     bd2:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
     bd6:	88 23       	and	r24, r24
     bd8:	44 f4       	brge	.+16     	; 0xbea <lcd_set_4bit+0x398>
		__ticks = 1;
     bda:	fe 01       	movw	r30, r28
     bdc:	e5 5b       	subi	r30, 0xB5	; 181
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	80 83       	st	Z, r24
     be8:	64 c0       	rjmp	.+200    	; 0xcb2 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     bea:	fe 01       	movw	r30, r28
     bec:	e3 5b       	subi	r30, 0xB3	; 179
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	60 81       	ld	r22, Z
     bf2:	71 81       	ldd	r23, Z+1	; 0x01
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	93 81       	ldd	r25, Z+3	; 0x03
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	3f ef       	ldi	r19, 0xFF	; 255
     bfc:	4f e7       	ldi	r20, 0x7F	; 127
     bfe:	57 e4       	ldi	r21, 0x47	; 71
     c00:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
     c04:	18 16       	cp	r1, r24
     c06:	0c f0       	brlt	.+2      	; 0xc0a <lcd_set_4bit+0x3b8>
     c08:	43 c0       	rjmp	.+134    	; 0xc90 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0a:	fe 01       	movw	r30, r28
     c0c:	ef 5a       	subi	r30, 0xAF	; 175
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	60 81       	ld	r22, Z
     c12:	71 81       	ldd	r23, Z+1	; 0x01
     c14:	82 81       	ldd	r24, Z+2	; 0x02
     c16:	93 81       	ldd	r25, Z+3	; 0x03
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e2       	ldi	r20, 0x20	; 32
     c1e:	51 e4       	ldi	r21, 0x41	; 65
     c20:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	8e 01       	movw	r16, r28
     c2a:	05 5b       	subi	r16, 0xB5	; 181
     c2c:	1f 4f       	sbci	r17, 0xFF	; 255
     c2e:	bc 01       	movw	r22, r24
     c30:	cd 01       	movw	r24, r26
     c32:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	f8 01       	movw	r30, r16
     c3c:	91 83       	std	Z+1, r25	; 0x01
     c3e:	80 83       	st	Z, r24
     c40:	1f c0       	rjmp	.+62     	; 0xc80 <lcd_set_4bit+0x42e>
     c42:	fe 01       	movw	r30, r28
     c44:	e7 5b       	subi	r30, 0xB7	; 183
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	84 e1       	ldi	r24, 0x14	; 20
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	91 83       	std	Z+1, r25	; 0x01
     c4e:	80 83       	st	Z, r24
     c50:	fe 01       	movw	r30, r28
     c52:	e7 5b       	subi	r30, 0xB7	; 183
     c54:	ff 4f       	sbci	r31, 0xFF	; 255
     c56:	80 81       	ld	r24, Z
     c58:	91 81       	ldd	r25, Z+1	; 0x01
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <lcd_set_4bit+0x408>
     c5e:	fe 01       	movw	r30, r28
     c60:	e7 5b       	subi	r30, 0xB7	; 183
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	91 83       	std	Z+1, r25	; 0x01
     c66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c68:	de 01       	movw	r26, r28
     c6a:	a5 5b       	subi	r26, 0xB5	; 181
     c6c:	bf 4f       	sbci	r27, 0xFF	; 255
     c6e:	fe 01       	movw	r30, r28
     c70:	e5 5b       	subi	r30, 0xB5	; 181
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	9c 93       	st	X, r25
     c7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c80:	fe 01       	movw	r30, r28
     c82:	e5 5b       	subi	r30, 0xB5	; 181
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	80 81       	ld	r24, Z
     c88:	91 81       	ldd	r25, Z+1	; 0x01
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	d1 f6       	brne	.-76     	; 0xc42 <lcd_set_4bit+0x3f0>
     c8e:	27 c0       	rjmp	.+78     	; 0xcde <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c90:	8e 01       	movw	r16, r28
     c92:	05 5b       	subi	r16, 0xB5	; 181
     c94:	1f 4f       	sbci	r17, 0xFF	; 255
     c96:	fe 01       	movw	r30, r28
     c98:	e3 5b       	subi	r30, 0xB3	; 179
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	60 81       	ld	r22, Z
     c9e:	71 81       	ldd	r23, Z+1	; 0x01
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	f8 01       	movw	r30, r16
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
     cb2:	de 01       	movw	r26, r28
     cb4:	a9 5b       	subi	r26, 0xB9	; 185
     cb6:	bf 4f       	sbci	r27, 0xFF	; 255
     cb8:	fe 01       	movw	r30, r28
     cba:	e5 5b       	subi	r30, 0xB5	; 181
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	8d 93       	st	X+, r24
     cc4:	9c 93       	st	X, r25
     cc6:	fe 01       	movw	r30, r28
     cc8:	e9 5b       	subi	r30, 0xB9	; 185
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	80 81       	ld	r24, Z
     cce:	91 81       	ldd	r25, Z+1	; 0x01
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <lcd_set_4bit+0x47e>
     cd4:	fe 01       	movw	r30, r28
     cd6:	e9 5b       	subi	r30, 0xB9	; 185
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     cde:	a8 e2       	ldi	r26, 0x28	; 40
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e8 e2       	ldi	r30, 0x28	; 40
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     cec:	a8 e2       	ldi	r26, 0x28	; 40
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e8 e2       	ldi	r30, 0x28	; 40
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8d 7f       	andi	r24, 0xFD	; 253
     cf8:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     cfa:	e8 e2       	ldi	r30, 0x28	; 40
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 e3       	ldi	r24, 0x30	; 48
     d00:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     d02:	a8 e2       	ldi	r26, 0x28	; 40
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e8 e2       	ldi	r30, 0x28	; 40
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	84 60       	ori	r24, 0x04	; 4
     d0e:	8c 93       	st	X, r24
     d10:	fe 01       	movw	r30, r28
     d12:	ed 5b       	subi	r30, 0xBD	; 189
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 ea       	ldi	r26, 0xA0	; 160
     d1c:	b0 e4       	ldi	r27, 0x40	; 64
     d1e:	80 83       	st	Z, r24
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	a2 83       	std	Z+2, r26	; 0x02
     d24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d26:	8e 01       	movw	r16, r28
     d28:	01 5c       	subi	r16, 0xC1	; 193
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	fe 01       	movw	r30, r28
     d2e:	ed 5b       	subi	r30, 0xBD	; 189
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	60 81       	ld	r22, Z
     d34:	71 81       	ldd	r23, Z+1	; 0x01
     d36:	82 81       	ldd	r24, Z+2	; 0x02
     d38:	93 81       	ldd	r25, Z+3	; 0x03
     d3a:	2d ec       	ldi	r18, 0xCD	; 205
     d3c:	3c ec       	ldi	r19, 0xCC	; 204
     d3e:	4c e2       	ldi	r20, 0x2C	; 44
     d40:	55 e4       	ldi	r21, 0x45	; 69
     d42:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	f8 01       	movw	r30, r16
     d4c:	80 83       	st	Z, r24
     d4e:	91 83       	std	Z+1, r25	; 0x01
     d50:	a2 83       	std	Z+2, r26	; 0x02
     d52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d54:	fe 01       	movw	r30, r28
     d56:	ff 96       	adiw	r30, 0x3f	; 63
     d58:	60 81       	ld	r22, Z
     d5a:	71 81       	ldd	r23, Z+1	; 0x01
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
     d6c:	88 23       	and	r24, r24
     d6e:	2c f4       	brge	.+10     	; 0xd7a <lcd_set_4bit+0x528>
		__ticks = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9e af       	std	Y+62, r25	; 0x3e
     d76:	8d af       	std	Y+61, r24	; 0x3d
     d78:	46 c0       	rjmp	.+140    	; 0xe06 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     d7a:	fe 01       	movw	r30, r28
     d7c:	ff 96       	adiw	r30, 0x3f	; 63
     d7e:	60 81       	ld	r22, Z
     d80:	71 81       	ldd	r23, Z+1	; 0x01
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	93 81       	ldd	r25, Z+3	; 0x03
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	3f ef       	ldi	r19, 0xFF	; 255
     d8a:	4f e7       	ldi	r20, 0x7F	; 127
     d8c:	57 e4       	ldi	r21, 0x47	; 71
     d8e:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
     d92:	18 16       	cp	r1, r24
     d94:	64 f5       	brge	.+88     	; 0xdee <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d96:	fe 01       	movw	r30, r28
     d98:	ed 5b       	subi	r30, 0xBD	; 189
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	60 81       	ld	r22, Z
     d9e:	71 81       	ldd	r23, Z+1	; 0x01
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e2       	ldi	r20, 0x20	; 32
     daa:	51 e4       	ldi	r21, 0x41	; 65
     dac:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	bc 01       	movw	r22, r24
     db6:	cd 01       	movw	r24, r26
     db8:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	9e af       	std	Y+62, r25	; 0x3e
     dc2:	8d af       	std	Y+61, r24	; 0x3d
     dc4:	0f c0       	rjmp	.+30     	; 0xde4 <lcd_set_4bit+0x592>
     dc6:	84 e1       	ldi	r24, 0x14	; 20
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	9c af       	std	Y+60, r25	; 0x3c
     dcc:	8b af       	std	Y+59, r24	; 0x3b
     dce:	8b ad       	ldd	r24, Y+59	; 0x3b
     dd0:	9c ad       	ldd	r25, Y+60	; 0x3c
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <lcd_set_4bit+0x580>
     dd6:	9c af       	std	Y+60, r25	; 0x3c
     dd8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dda:	8d ad       	ldd	r24, Y+61	; 0x3d
     ddc:	9e ad       	ldd	r25, Y+62	; 0x3e
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	9e af       	std	Y+62, r25	; 0x3e
     de2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de4:	8d ad       	ldd	r24, Y+61	; 0x3d
     de6:	9e ad       	ldd	r25, Y+62	; 0x3e
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	69 f7       	brne	.-38     	; 0xdc6 <lcd_set_4bit+0x574>
     dec:	16 c0       	rjmp	.+44     	; 0xe1a <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dee:	fe 01       	movw	r30, r28
     df0:	ff 96       	adiw	r30, 0x3f	; 63
     df2:	60 81       	ld	r22, Z
     df4:	71 81       	ldd	r23, Z+1	; 0x01
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	93 81       	ldd	r25, Z+3	; 0x03
     dfa:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	9e af       	std	Y+62, r25	; 0x3e
     e04:	8d af       	std	Y+61, r24	; 0x3d
     e06:	8d ad       	ldd	r24, Y+61	; 0x3d
     e08:	9e ad       	ldd	r25, Y+62	; 0x3e
     e0a:	9a af       	std	Y+58, r25	; 0x3a
     e0c:	89 af       	std	Y+57, r24	; 0x39
     e0e:	89 ad       	ldd	r24, Y+57	; 0x39
     e10:	9a ad       	ldd	r25, Y+58	; 0x3a
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <lcd_set_4bit+0x5c0>
     e16:	9a af       	std	Y+58, r25	; 0x3a
     e18:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     e1a:	a8 e2       	ldi	r26, 0x28	; 40
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e8 e2       	ldi	r30, 0x28	; 40
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8b 7f       	andi	r24, 0xFB	; 251
     e26:	8c 93       	st	X, r24
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a0 e8       	ldi	r26, 0x80	; 128
     e2e:	bf e3       	ldi	r27, 0x3F	; 63
     e30:	8d ab       	std	Y+53, r24	; 0x35
     e32:	9e ab       	std	Y+54, r25	; 0x36
     e34:	af ab       	std	Y+55, r26	; 0x37
     e36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e38:	6d a9       	ldd	r22, Y+53	; 0x35
     e3a:	7e a9       	ldd	r23, Y+54	; 0x36
     e3c:	8f a9       	ldd	r24, Y+55	; 0x37
     e3e:	98 ad       	ldd	r25, Y+56	; 0x38
     e40:	2d ec       	ldi	r18, 0xCD	; 205
     e42:	3c ec       	ldi	r19, 0xCC	; 204
     e44:	4c e2       	ldi	r20, 0x2C	; 44
     e46:	55 e4       	ldi	r21, 0x45	; 69
     e48:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	89 ab       	std	Y+49, r24	; 0x31
     e52:	9a ab       	std	Y+50, r25	; 0x32
     e54:	ab ab       	std	Y+51, r26	; 0x33
     e56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e58:	69 a9       	ldd	r22, Y+49	; 0x31
     e5a:	7a a9       	ldd	r23, Y+50	; 0x32
     e5c:	8b a9       	ldd	r24, Y+51	; 0x33
     e5e:	9c a9       	ldd	r25, Y+52	; 0x34
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e8       	ldi	r20, 0x80	; 128
     e66:	5f e3       	ldi	r21, 0x3F	; 63
     e68:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
     e6c:	88 23       	and	r24, r24
     e6e:	2c f4       	brge	.+10     	; 0xe7a <lcd_set_4bit+0x628>
		__ticks = 1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	98 ab       	std	Y+48, r25	; 0x30
     e76:	8f a7       	std	Y+47, r24	; 0x2f
     e78:	3f c0       	rjmp	.+126    	; 0xef8 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     e7a:	69 a9       	ldd	r22, Y+49	; 0x31
     e7c:	7a a9       	ldd	r23, Y+50	; 0x32
     e7e:	8b a9       	ldd	r24, Y+51	; 0x33
     e80:	9c a9       	ldd	r25, Y+52	; 0x34
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	3f ef       	ldi	r19, 0xFF	; 255
     e86:	4f e7       	ldi	r20, 0x7F	; 127
     e88:	57 e4       	ldi	r21, 0x47	; 71
     e8a:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
     e8e:	18 16       	cp	r1, r24
     e90:	4c f5       	brge	.+82     	; 0xee4 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e92:	6d a9       	ldd	r22, Y+53	; 0x35
     e94:	7e a9       	ldd	r23, Y+54	; 0x36
     e96:	8f a9       	ldd	r24, Y+55	; 0x37
     e98:	98 ad       	ldd	r25, Y+56	; 0x38
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e2       	ldi	r20, 0x20	; 32
     ea0:	51 e4       	ldi	r21, 0x41	; 65
     ea2:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	bc 01       	movw	r22, r24
     eac:	cd 01       	movw	r24, r26
     eae:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	98 ab       	std	Y+48, r25	; 0x30
     eb8:	8f a7       	std	Y+47, r24	; 0x2f
     eba:	0f c0       	rjmp	.+30     	; 0xeda <lcd_set_4bit+0x688>
     ebc:	84 e1       	ldi	r24, 0x14	; 20
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	9e a7       	std	Y+46, r25	; 0x2e
     ec2:	8d a7       	std	Y+45, r24	; 0x2d
     ec4:	8d a5       	ldd	r24, Y+45	; 0x2d
     ec6:	9e a5       	ldd	r25, Y+46	; 0x2e
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <lcd_set_4bit+0x676>
     ecc:	9e a7       	std	Y+46, r25	; 0x2e
     ece:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed0:	8f a5       	ldd	r24, Y+47	; 0x2f
     ed2:	98 a9       	ldd	r25, Y+48	; 0x30
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	98 ab       	std	Y+48, r25	; 0x30
     ed8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eda:	8f a5       	ldd	r24, Y+47	; 0x2f
     edc:	98 a9       	ldd	r25, Y+48	; 0x30
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	69 f7       	brne	.-38     	; 0xebc <lcd_set_4bit+0x66a>
     ee2:	14 c0       	rjmp	.+40     	; 0xf0c <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee4:	69 a9       	ldd	r22, Y+49	; 0x31
     ee6:	7a a9       	ldd	r23, Y+50	; 0x32
     ee8:	8b a9       	ldd	r24, Y+51	; 0x33
     eea:	9c a9       	ldd	r25, Y+52	; 0x34
     eec:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	98 ab       	std	Y+48, r25	; 0x30
     ef6:	8f a7       	std	Y+47, r24	; 0x2f
     ef8:	8f a5       	ldd	r24, Y+47	; 0x2f
     efa:	98 a9       	ldd	r25, Y+48	; 0x30
     efc:	9c a7       	std	Y+44, r25	; 0x2c
     efe:	8b a7       	std	Y+43, r24	; 0x2b
     f00:	8b a5       	ldd	r24, Y+43	; 0x2b
     f02:	9c a5       	ldd	r25, Y+44	; 0x2c
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <lcd_set_4bit+0x6b2>
     f08:	9c a7       	std	Y+44, r25	; 0x2c
     f0a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     f0c:	a8 e2       	ldi	r26, 0x28	; 40
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e8 e2       	ldi	r30, 0x28	; 40
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8e 7f       	andi	r24, 0xFE	; 254
     f18:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     f1a:	a8 e2       	ldi	r26, 0x28	; 40
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e8 e2       	ldi	r30, 0x28	; 40
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8d 7f       	andi	r24, 0xFD	; 253
     f26:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 e3       	ldi	r24, 0x30	; 48
     f2e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     f30:	a8 e2       	ldi	r26, 0x28	; 40
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e8 e2       	ldi	r30, 0x28	; 40
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	84 60       	ori	r24, 0x04	; 4
     f3c:	8c 93       	st	X, r24
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	a0 ea       	ldi	r26, 0xA0	; 160
     f44:	b0 e4       	ldi	r27, 0x40	; 64
     f46:	8f a3       	std	Y+39, r24	; 0x27
     f48:	98 a7       	std	Y+40, r25	; 0x28
     f4a:	a9 a7       	std	Y+41, r26	; 0x29
     f4c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f4e:	6f a1       	ldd	r22, Y+39	; 0x27
     f50:	78 a5       	ldd	r23, Y+40	; 0x28
     f52:	89 a5       	ldd	r24, Y+41	; 0x29
     f54:	9a a5       	ldd	r25, Y+42	; 0x2a
     f56:	2d ec       	ldi	r18, 0xCD	; 205
     f58:	3c ec       	ldi	r19, 0xCC	; 204
     f5a:	4c e2       	ldi	r20, 0x2C	; 44
     f5c:	55 e4       	ldi	r21, 0x45	; 69
     f5e:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	8b a3       	std	Y+35, r24	; 0x23
     f68:	9c a3       	std	Y+36, r25	; 0x24
     f6a:	ad a3       	std	Y+37, r26	; 0x25
     f6c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f6e:	6b a1       	ldd	r22, Y+35	; 0x23
     f70:	7c a1       	ldd	r23, Y+36	; 0x24
     f72:	8d a1       	ldd	r24, Y+37	; 0x25
     f74:	9e a1       	ldd	r25, Y+38	; 0x26
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e8       	ldi	r20, 0x80	; 128
     f7c:	5f e3       	ldi	r21, 0x3F	; 63
     f7e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
     f82:	88 23       	and	r24, r24
     f84:	2c f4       	brge	.+10     	; 0xf90 <lcd_set_4bit+0x73e>
		__ticks = 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9a a3       	std	Y+34, r25	; 0x22
     f8c:	89 a3       	std	Y+33, r24	; 0x21
     f8e:	3f c0       	rjmp	.+126    	; 0x100e <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     f90:	6b a1       	ldd	r22, Y+35	; 0x23
     f92:	7c a1       	ldd	r23, Y+36	; 0x24
     f94:	8d a1       	ldd	r24, Y+37	; 0x25
     f96:	9e a1       	ldd	r25, Y+38	; 0x26
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	3f ef       	ldi	r19, 0xFF	; 255
     f9c:	4f e7       	ldi	r20, 0x7F	; 127
     f9e:	57 e4       	ldi	r21, 0x47	; 71
     fa0:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
     fa4:	18 16       	cp	r1, r24
     fa6:	4c f5       	brge	.+82     	; 0xffa <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa8:	6f a1       	ldd	r22, Y+39	; 0x27
     faa:	78 a5       	ldd	r23, Y+40	; 0x28
     fac:	89 a5       	ldd	r24, Y+41	; 0x29
     fae:	9a a5       	ldd	r25, Y+42	; 0x2a
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e2       	ldi	r20, 0x20	; 32
     fb6:	51 e4       	ldi	r21, 0x41	; 65
     fb8:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	9a a3       	std	Y+34, r25	; 0x22
     fce:	89 a3       	std	Y+33, r24	; 0x21
     fd0:	0f c0       	rjmp	.+30     	; 0xff0 <lcd_set_4bit+0x79e>
     fd2:	84 e1       	ldi	r24, 0x14	; 20
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	98 a3       	std	Y+32, r25	; 0x20
     fd8:	8f 8f       	std	Y+31, r24	; 0x1f
     fda:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fdc:	98 a1       	ldd	r25, Y+32	; 0x20
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <lcd_set_4bit+0x78c>
     fe2:	98 a3       	std	Y+32, r25	; 0x20
     fe4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe6:	89 a1       	ldd	r24, Y+33	; 0x21
     fe8:	9a a1       	ldd	r25, Y+34	; 0x22
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	9a a3       	std	Y+34, r25	; 0x22
     fee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff0:	89 a1       	ldd	r24, Y+33	; 0x21
     ff2:	9a a1       	ldd	r25, Y+34	; 0x22
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	69 f7       	brne	.-38     	; 0xfd2 <lcd_set_4bit+0x780>
     ff8:	14 c0       	rjmp	.+40     	; 0x1022 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffa:	6b a1       	ldd	r22, Y+35	; 0x23
     ffc:	7c a1       	ldd	r23, Y+36	; 0x24
     ffe:	8d a1       	ldd	r24, Y+37	; 0x25
    1000:	9e a1       	ldd	r25, Y+38	; 0x26
    1002:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	9a a3       	std	Y+34, r25	; 0x22
    100c:	89 a3       	std	Y+33, r24	; 0x21
    100e:	89 a1       	ldd	r24, Y+33	; 0x21
    1010:	9a a1       	ldd	r25, Y+34	; 0x22
    1012:	9e 8f       	std	Y+30, r25	; 0x1e
    1014:	8d 8f       	std	Y+29, r24	; 0x1d
    1016:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1018:	9e 8d       	ldd	r25, Y+30	; 0x1e
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <lcd_set_4bit+0x7c8>
    101e:	9e 8f       	std	Y+30, r25	; 0x1e
    1020:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1022:	a8 e2       	ldi	r26, 0x28	; 40
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e8 e2       	ldi	r30, 0x28	; 40
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8b 7f       	andi	r24, 0xFB	; 251
    102e:	8c 93       	st	X, r24
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a0 e8       	ldi	r26, 0x80	; 128
    1036:	bf e3       	ldi	r27, 0x3F	; 63
    1038:	89 8f       	std	Y+25, r24	; 0x19
    103a:	9a 8f       	std	Y+26, r25	; 0x1a
    103c:	ab 8f       	std	Y+27, r26	; 0x1b
    103e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1040:	69 8d       	ldd	r22, Y+25	; 0x19
    1042:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1044:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1046:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1048:	2d ec       	ldi	r18, 0xCD	; 205
    104a:	3c ec       	ldi	r19, 0xCC	; 204
    104c:	4c e2       	ldi	r20, 0x2C	; 44
    104e:	55 e4       	ldi	r21, 0x45	; 69
    1050:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	8d 8b       	std	Y+21, r24	; 0x15
    105a:	9e 8b       	std	Y+22, r25	; 0x16
    105c:	af 8b       	std	Y+23, r26	; 0x17
    105e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1060:	6d 89       	ldd	r22, Y+21	; 0x15
    1062:	7e 89       	ldd	r23, Y+22	; 0x16
    1064:	8f 89       	ldd	r24, Y+23	; 0x17
    1066:	98 8d       	ldd	r25, Y+24	; 0x18
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e8       	ldi	r20, 0x80	; 128
    106e:	5f e3       	ldi	r21, 0x3F	; 63
    1070:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    1074:	88 23       	and	r24, r24
    1076:	2c f4       	brge	.+10     	; 0x1082 <lcd_set_4bit+0x830>
		__ticks = 1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9c 8b       	std	Y+20, r25	; 0x14
    107e:	8b 8b       	std	Y+19, r24	; 0x13
    1080:	3f c0       	rjmp	.+126    	; 0x1100 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
    1082:	6d 89       	ldd	r22, Y+21	; 0x15
    1084:	7e 89       	ldd	r23, Y+22	; 0x16
    1086:	8f 89       	ldd	r24, Y+23	; 0x17
    1088:	98 8d       	ldd	r25, Y+24	; 0x18
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	3f ef       	ldi	r19, 0xFF	; 255
    108e:	4f e7       	ldi	r20, 0x7F	; 127
    1090:	57 e4       	ldi	r21, 0x47	; 71
    1092:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    1096:	18 16       	cp	r1, r24
    1098:	4c f5       	brge	.+82     	; 0x10ec <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109a:	69 8d       	ldd	r22, Y+25	; 0x19
    109c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    109e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e2       	ldi	r20, 0x20	; 32
    10a8:	51 e4       	ldi	r21, 0x41	; 65
    10aa:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	bc 01       	movw	r22, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	9c 8b       	std	Y+20, r25	; 0x14
    10c0:	8b 8b       	std	Y+19, r24	; 0x13
    10c2:	0f c0       	rjmp	.+30     	; 0x10e2 <lcd_set_4bit+0x890>
    10c4:	84 e1       	ldi	r24, 0x14	; 20
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	9a 8b       	std	Y+18, r25	; 0x12
    10ca:	89 8b       	std	Y+17, r24	; 0x11
    10cc:	89 89       	ldd	r24, Y+17	; 0x11
    10ce:	9a 89       	ldd	r25, Y+18	; 0x12
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <lcd_set_4bit+0x87e>
    10d4:	9a 8b       	std	Y+18, r25	; 0x12
    10d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d8:	8b 89       	ldd	r24, Y+19	; 0x13
    10da:	9c 89       	ldd	r25, Y+20	; 0x14
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	9c 8b       	std	Y+20, r25	; 0x14
    10e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e2:	8b 89       	ldd	r24, Y+19	; 0x13
    10e4:	9c 89       	ldd	r25, Y+20	; 0x14
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	69 f7       	brne	.-38     	; 0x10c4 <lcd_set_4bit+0x872>
    10ea:	14 c0       	rjmp	.+40     	; 0x1114 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ec:	6d 89       	ldd	r22, Y+21	; 0x15
    10ee:	7e 89       	ldd	r23, Y+22	; 0x16
    10f0:	8f 89       	ldd	r24, Y+23	; 0x17
    10f2:	98 8d       	ldd	r25, Y+24	; 0x18
    10f4:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	9c 8b       	std	Y+20, r25	; 0x14
    10fe:	8b 8b       	std	Y+19, r24	; 0x13
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	9c 89       	ldd	r25, Y+20	; 0x14
    1104:	98 8b       	std	Y+16, r25	; 0x10
    1106:	8f 87       	std	Y+15, r24	; 0x0f
    1108:	8f 85       	ldd	r24, Y+15	; 0x0f
    110a:	98 89       	ldd	r25, Y+16	; 0x10
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <lcd_set_4bit+0x8ba>
    1110:	98 8b       	std	Y+16, r25	; 0x10
    1112:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1114:	a8 e2       	ldi	r26, 0x28	; 40
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e8 e2       	ldi	r30, 0x28	; 40
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8e 7f       	andi	r24, 0xFE	; 254
    1120:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1122:	a8 e2       	ldi	r26, 0x28	; 40
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e8 e2       	ldi	r30, 0x28	; 40
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8d 7f       	andi	r24, 0xFD	; 253
    112e:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    1130:	e8 e2       	ldi	r30, 0x28	; 40
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 e2       	ldi	r24, 0x20	; 32
    1136:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    1138:	a8 e2       	ldi	r26, 0x28	; 40
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e8 e2       	ldi	r30, 0x28	; 40
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	84 60       	ori	r24, 0x04	; 4
    1144:	8c 93       	st	X, r24
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a0 ea       	ldi	r26, 0xA0	; 160
    114c:	b0 e4       	ldi	r27, 0x40	; 64
    114e:	8b 87       	std	Y+11, r24	; 0x0b
    1150:	9c 87       	std	Y+12, r25	; 0x0c
    1152:	ad 87       	std	Y+13, r26	; 0x0d
    1154:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1156:	6b 85       	ldd	r22, Y+11	; 0x0b
    1158:	7c 85       	ldd	r23, Y+12	; 0x0c
    115a:	8d 85       	ldd	r24, Y+13	; 0x0d
    115c:	9e 85       	ldd	r25, Y+14	; 0x0e
    115e:	2d ec       	ldi	r18, 0xCD	; 205
    1160:	3c ec       	ldi	r19, 0xCC	; 204
    1162:	4c e2       	ldi	r20, 0x2C	; 44
    1164:	55 e4       	ldi	r21, 0x45	; 69
    1166:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	8f 83       	std	Y+7, r24	; 0x07
    1170:	98 87       	std	Y+8, r25	; 0x08
    1172:	a9 87       	std	Y+9, r26	; 0x09
    1174:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1176:	6f 81       	ldd	r22, Y+7	; 0x07
    1178:	78 85       	ldd	r23, Y+8	; 0x08
    117a:	89 85       	ldd	r24, Y+9	; 0x09
    117c:	9a 85       	ldd	r25, Y+10	; 0x0a
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e8       	ldi	r20, 0x80	; 128
    1184:	5f e3       	ldi	r21, 0x3F	; 63
    1186:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    118a:	88 23       	and	r24, r24
    118c:	2c f4       	brge	.+10     	; 0x1198 <lcd_set_4bit+0x946>
		__ticks = 1;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	3f c0       	rjmp	.+126    	; 0x1216 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    1198:	6f 81       	ldd	r22, Y+7	; 0x07
    119a:	78 85       	ldd	r23, Y+8	; 0x08
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	3f ef       	ldi	r19, 0xFF	; 255
    11a4:	4f e7       	ldi	r20, 0x7F	; 127
    11a6:	57 e4       	ldi	r21, 0x47	; 71
    11a8:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	4c f5       	brge	.+82     	; 0x1202 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e2       	ldi	r20, 0x20	; 32
    11be:	51 e4       	ldi	r21, 0x41	; 65
    11c0:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	8d 83       	std	Y+5, r24	; 0x05
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <lcd_set_4bit+0x9a6>
    11da:	84 e1       	ldi	r24, 0x14	; 20
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <lcd_set_4bit+0x994>
    11ea:	9c 83       	std	Y+4, r25	; 0x04
    11ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	69 f7       	brne	.-38     	; 0x11da <lcd_set_4bit+0x988>
    1200:	14 c0       	rjmp	.+40     	; 0x122a <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1202:	6f 81       	ldd	r22, Y+7	; 0x07
    1204:	78 85       	ldd	r23, Y+8	; 0x08
    1206:	89 85       	ldd	r24, Y+9	; 0x09
    1208:	9a 85       	ldd	r25, Y+10	; 0x0a
    120a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <lcd_set_4bit+0x9d0>
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    122a:	a8 e2       	ldi	r26, 0x28	; 40
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e8 e2       	ldi	r30, 0x28	; 40
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8b 7f       	andi	r24, 0xFB	; 251
    1236:	8c 93       	st	X, r24

	
}
    1238:	c0 59       	subi	r28, 0x90	; 144
    123a:	df 4f       	sbci	r29, 0xFF	; 255
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	08 95       	ret

00001250 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	2e 97       	sbiw	r28, 0x0e	; 14
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a0 e8       	ldi	r26, 0x80	; 128
    126a:	bf e3       	ldi	r27, 0x3F	; 63
    126c:	8b 87       	std	Y+11, r24	; 0x0b
    126e:	9c 87       	std	Y+12, r25	; 0x0c
    1270:	ad 87       	std	Y+13, r26	; 0x0d
    1272:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1274:	6b 85       	ldd	r22, Y+11	; 0x0b
    1276:	7c 85       	ldd	r23, Y+12	; 0x0c
    1278:	8d 85       	ldd	r24, Y+13	; 0x0d
    127a:	9e 85       	ldd	r25, Y+14	; 0x0e
    127c:	2d ec       	ldi	r18, 0xCD	; 205
    127e:	3c ec       	ldi	r19, 0xCC	; 204
    1280:	4c e2       	ldi	r20, 0x2C	; 44
    1282:	55 e4       	ldi	r21, 0x45	; 69
    1284:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	8f 83       	std	Y+7, r24	; 0x07
    128e:	98 87       	std	Y+8, r25	; 0x08
    1290:	a9 87       	std	Y+9, r26	; 0x09
    1292:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1294:	6f 81       	ldd	r22, Y+7	; 0x07
    1296:	78 85       	ldd	r23, Y+8	; 0x08
    1298:	89 85       	ldd	r24, Y+9	; 0x09
    129a:	9a 85       	ldd	r25, Y+10	; 0x0a
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e8       	ldi	r20, 0x80	; 128
    12a2:	5f e3       	ldi	r21, 0x3F	; 63
    12a4:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    12a8:	88 23       	and	r24, r24
    12aa:	2c f4       	brge	.+10     	; 0x12b6 <lcd_init+0x66>
		__ticks = 1;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9e 83       	std	Y+6, r25	; 0x06
    12b2:	8d 83       	std	Y+5, r24	; 0x05
    12b4:	3f c0       	rjmp	.+126    	; 0x1334 <lcd_init+0xe4>
	else if (__tmp > 65535)
    12b6:	6f 81       	ldd	r22, Y+7	; 0x07
    12b8:	78 85       	ldd	r23, Y+8	; 0x08
    12ba:	89 85       	ldd	r24, Y+9	; 0x09
    12bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	3f ef       	ldi	r19, 0xFF	; 255
    12c2:	4f e7       	ldi	r20, 0x7F	; 127
    12c4:	57 e4       	ldi	r21, 0x47	; 71
    12c6:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    12ca:	18 16       	cp	r1, r24
    12cc:	4c f5       	brge	.+82     	; 0x1320 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e2       	ldi	r20, 0x20	; 32
    12dc:	51 e4       	ldi	r21, 0x41	; 65
    12de:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	bc 01       	movw	r22, r24
    12e8:	cd 01       	movw	r24, r26
    12ea:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	9e 83       	std	Y+6, r25	; 0x06
    12f4:	8d 83       	std	Y+5, r24	; 0x05
    12f6:	0f c0       	rjmp	.+30     	; 0x1316 <lcd_init+0xc6>
    12f8:	84 e1       	ldi	r24, 0x14	; 20
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	9c 83       	std	Y+4, r25	; 0x04
    12fe:	8b 83       	std	Y+3, r24	; 0x03
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	9c 81       	ldd	r25, Y+4	; 0x04
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <lcd_init+0xb4>
    1308:	9c 83       	std	Y+4, r25	; 0x04
    130a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	9e 83       	std	Y+6, r25	; 0x06
    1314:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	9e 81       	ldd	r25, Y+6	; 0x06
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	69 f7       	brne	.-38     	; 0x12f8 <lcd_init+0xa8>
    131e:	14 c0       	rjmp	.+40     	; 0x1348 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1320:	6f 81       	ldd	r22, Y+7	; 0x07
    1322:	78 85       	ldd	r23, Y+8	; 0x08
    1324:	89 85       	ldd	r24, Y+9	; 0x09
    1326:	9a 85       	ldd	r25, Y+10	; 0x0a
    1328:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	8d 83       	std	Y+5, r24	; 0x05
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	9a 83       	std	Y+2, r25	; 0x02
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	9a 81       	ldd	r25, Y+2	; 0x02
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	f1 f7       	brne	.-4      	; 0x1340 <lcd_init+0xf0>
    1344:	9a 83       	std	Y+2, r25	; 0x02
    1346:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    1348:	88 e2       	ldi	r24, 0x28	; 40
    134a:	0e 94 bc 09 	call	0x1378	; 0x1378 <lcd_wr_command>
	lcd_wr_command(0x01);
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	0e 94 bc 09 	call	0x1378	; 0x1378 <lcd_wr_command>
	lcd_wr_command(0x06);
    1354:	86 e0       	ldi	r24, 0x06	; 6
    1356:	0e 94 bc 09 	call	0x1378	; 0x1378 <lcd_wr_command>
	lcd_wr_command(0x0E);
    135a:	8e e0       	ldi	r24, 0x0E	; 14
    135c:	0e 94 bc 09 	call	0x1378	; 0x1378 <lcd_wr_command>
	lcd_wr_command(0x80);
    1360:	80 e8       	ldi	r24, 0x80	; 128
    1362:	0e 94 bc 09 	call	0x1378	; 0x1378 <lcd_wr_command>
		
}
    1366:	2e 96       	adiw	r28, 0x0e	; 14
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	6e 97       	sbiw	r28, 0x1e	; 30
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    138e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1390:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    1392:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1394:	80 7f       	andi	r24, 0xF0	; 240
    1396:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1398:	a8 e2       	ldi	r26, 0x28	; 40
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e8 e2       	ldi	r30, 0x28	; 40
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	8f 70       	andi	r24, 0x0F	; 15
    13a4:	8c 93       	st	X, r24
	lcd_port |= temp;
    13a6:	a8 e2       	ldi	r26, 0x28	; 40
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e8 e2       	ldi	r30, 0x28	; 40
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	90 81       	ld	r25, Z
    13b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b2:	89 2b       	or	r24, r25
    13b4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    13b6:	a8 e2       	ldi	r26, 0x28	; 40
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e8 e2       	ldi	r30, 0x28	; 40
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	8e 7f       	andi	r24, 0xFE	; 254
    13c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    13c4:	a8 e2       	ldi	r26, 0x28	; 40
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e8 e2       	ldi	r30, 0x28	; 40
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8d 7f       	andi	r24, 0xFD	; 253
    13d0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    13d2:	a8 e2       	ldi	r26, 0x28	; 40
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e8 e2       	ldi	r30, 0x28	; 40
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	84 60       	ori	r24, 0x04	; 4
    13de:	8c 93       	st	X, r24
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a0 ea       	ldi	r26, 0xA0	; 160
    13e6:	b0 e4       	ldi	r27, 0x40	; 64
    13e8:	89 8f       	std	Y+25, r24	; 0x19
    13ea:	9a 8f       	std	Y+26, r25	; 0x1a
    13ec:	ab 8f       	std	Y+27, r26	; 0x1b
    13ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f0:	69 8d       	ldd	r22, Y+25	; 0x19
    13f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f8:	2d ec       	ldi	r18, 0xCD	; 205
    13fa:	3c ec       	ldi	r19, 0xCC	; 204
    13fc:	4c e2       	ldi	r20, 0x2C	; 44
    13fe:	55 e4       	ldi	r21, 0x45	; 69
    1400:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	8d 8b       	std	Y+21, r24	; 0x15
    140a:	9e 8b       	std	Y+22, r25	; 0x16
    140c:	af 8b       	std	Y+23, r26	; 0x17
    140e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1410:	6d 89       	ldd	r22, Y+21	; 0x15
    1412:	7e 89       	ldd	r23, Y+22	; 0x16
    1414:	8f 89       	ldd	r24, Y+23	; 0x17
    1416:	98 8d       	ldd	r25, Y+24	; 0x18
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e8       	ldi	r20, 0x80	; 128
    141e:	5f e3       	ldi	r21, 0x3F	; 63
    1420:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    1424:	88 23       	and	r24, r24
    1426:	2c f4       	brge	.+10     	; 0x1432 <lcd_wr_command+0xba>
		__ticks = 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	9c 8b       	std	Y+20, r25	; 0x14
    142e:	8b 8b       	std	Y+19, r24	; 0x13
    1430:	3f c0       	rjmp	.+126    	; 0x14b0 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    1432:	6d 89       	ldd	r22, Y+21	; 0x15
    1434:	7e 89       	ldd	r23, Y+22	; 0x16
    1436:	8f 89       	ldd	r24, Y+23	; 0x17
    1438:	98 8d       	ldd	r25, Y+24	; 0x18
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	3f ef       	ldi	r19, 0xFF	; 255
    143e:	4f e7       	ldi	r20, 0x7F	; 127
    1440:	57 e4       	ldi	r21, 0x47	; 71
    1442:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    1446:	18 16       	cp	r1, r24
    1448:	4c f5       	brge	.+82     	; 0x149c <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144a:	69 8d       	ldd	r22, Y+25	; 0x19
    144c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    144e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1450:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e2       	ldi	r20, 0x20	; 32
    1458:	51 e4       	ldi	r21, 0x41	; 65
    145a:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	bc 01       	movw	r22, r24
    1464:	cd 01       	movw	r24, r26
    1466:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	9c 8b       	std	Y+20, r25	; 0x14
    1470:	8b 8b       	std	Y+19, r24	; 0x13
    1472:	0f c0       	rjmp	.+30     	; 0x1492 <lcd_wr_command+0x11a>
    1474:	84 e1       	ldi	r24, 0x14	; 20
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	9a 8b       	std	Y+18, r25	; 0x12
    147a:	89 8b       	std	Y+17, r24	; 0x11
    147c:	89 89       	ldd	r24, Y+17	; 0x11
    147e:	9a 89       	ldd	r25, Y+18	; 0x12
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	f1 f7       	brne	.-4      	; 0x1480 <lcd_wr_command+0x108>
    1484:	9a 8b       	std	Y+18, r25	; 0x12
    1486:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1488:	8b 89       	ldd	r24, Y+19	; 0x13
    148a:	9c 89       	ldd	r25, Y+20	; 0x14
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	9c 8b       	std	Y+20, r25	; 0x14
    1490:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1492:	8b 89       	ldd	r24, Y+19	; 0x13
    1494:	9c 89       	ldd	r25, Y+20	; 0x14
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	69 f7       	brne	.-38     	; 0x1474 <lcd_wr_command+0xfc>
    149a:	14 c0       	rjmp	.+40     	; 0x14c4 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149c:	6d 89       	ldd	r22, Y+21	; 0x15
    149e:	7e 89       	ldd	r23, Y+22	; 0x16
    14a0:	8f 89       	ldd	r24, Y+23	; 0x17
    14a2:	98 8d       	ldd	r25, Y+24	; 0x18
    14a4:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	9c 8b       	std	Y+20, r25	; 0x14
    14ae:	8b 8b       	std	Y+19, r24	; 0x13
    14b0:	8b 89       	ldd	r24, Y+19	; 0x13
    14b2:	9c 89       	ldd	r25, Y+20	; 0x14
    14b4:	98 8b       	std	Y+16, r25	; 0x10
    14b6:	8f 87       	std	Y+15, r24	; 0x0f
    14b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ba:	98 89       	ldd	r25, Y+16	; 0x10
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <lcd_wr_command+0x144>
    14c0:	98 8b       	std	Y+16, r25	; 0x10
    14c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    14c4:	a8 e2       	ldi	r26, 0x28	; 40
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e8 e2       	ldi	r30, 0x28	; 40
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8b 7f       	andi	r24, 0xFB	; 251
    14d0:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    14d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14d4:	8f 70       	andi	r24, 0x0F	; 15
    14d6:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    14d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14da:	82 95       	swap	r24
    14dc:	80 7f       	andi	r24, 0xF0	; 240
    14de:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    14e0:	a8 e2       	ldi	r26, 0x28	; 40
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e8 e2       	ldi	r30, 0x28	; 40
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 70       	andi	r24, 0x0F	; 15
    14ec:	8c 93       	st	X, r24
	lcd_port |= cmd;
    14ee:	a8 e2       	ldi	r26, 0x28	; 40
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e8 e2       	ldi	r30, 0x28	; 40
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	90 81       	ld	r25, Z
    14f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14fa:	89 2b       	or	r24, r25
    14fc:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    14fe:	a8 e2       	ldi	r26, 0x28	; 40
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e8 e2       	ldi	r30, 0x28	; 40
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	8e 7f       	andi	r24, 0xFE	; 254
    150a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    150c:	a8 e2       	ldi	r26, 0x28	; 40
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e8 e2       	ldi	r30, 0x28	; 40
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	8d 7f       	andi	r24, 0xFD	; 253
    1518:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    151a:	a8 e2       	ldi	r26, 0x28	; 40
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e8 e2       	ldi	r30, 0x28	; 40
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	84 60       	ori	r24, 0x04	; 4
    1526:	8c 93       	st	X, r24
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 ea       	ldi	r26, 0xA0	; 160
    152e:	b0 e4       	ldi	r27, 0x40	; 64
    1530:	8b 87       	std	Y+11, r24	; 0x0b
    1532:	9c 87       	std	Y+12, r25	; 0x0c
    1534:	ad 87       	std	Y+13, r26	; 0x0d
    1536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1538:	6b 85       	ldd	r22, Y+11	; 0x0b
    153a:	7c 85       	ldd	r23, Y+12	; 0x0c
    153c:	8d 85       	ldd	r24, Y+13	; 0x0d
    153e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1540:	2d ec       	ldi	r18, 0xCD	; 205
    1542:	3c ec       	ldi	r19, 0xCC	; 204
    1544:	4c e2       	ldi	r20, 0x2C	; 44
    1546:	55 e4       	ldi	r21, 0x45	; 69
    1548:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8f 83       	std	Y+7, r24	; 0x07
    1552:	98 87       	std	Y+8, r25	; 0x08
    1554:	a9 87       	std	Y+9, r26	; 0x09
    1556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    156c:	88 23       	and	r24, r24
    156e:	2c f4       	brge	.+10     	; 0x157a <lcd_wr_command+0x202>
		__ticks = 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	3f c0       	rjmp	.+126    	; 0x15f8 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	4f e7       	ldi	r20, 0x7F	; 127
    1588:	57 e4       	ldi	r21, 0x47	; 71
    158a:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    158e:	18 16       	cp	r1, r24
    1590:	4c f5       	brge	.+82     	; 0x15e4 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1592:	6b 85       	ldd	r22, Y+11	; 0x0b
    1594:	7c 85       	ldd	r23, Y+12	; 0x0c
    1596:	8d 85       	ldd	r24, Y+13	; 0x0d
    1598:	9e 85       	ldd	r25, Y+14	; 0x0e
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e2       	ldi	r20, 0x20	; 32
    15a0:	51 e4       	ldi	r21, 0x41	; 65
    15a2:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <lcd_wr_command+0x262>
    15bc:	84 e1       	ldi	r24, 0x14	; 20
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	8b 83       	std	Y+3, r24	; 0x03
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <lcd_wr_command+0x250>
    15cc:	9c 83       	std	Y+4, r25	; 0x04
    15ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15da:	8d 81       	ldd	r24, Y+5	; 0x05
    15dc:	9e 81       	ldd	r25, Y+6	; 0x06
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	69 f7       	brne	.-38     	; 0x15bc <lcd_wr_command+0x244>
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e4:	6f 81       	ldd	r22, Y+7	; 0x07
    15e6:	78 85       	ldd	r23, Y+8	; 0x08
    15e8:	89 85       	ldd	r24, Y+9	; 0x09
    15ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ec:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <lcd_wr_command+0x28c>
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    160c:	a8 e2       	ldi	r26, 0x28	; 40
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e8 e2       	ldi	r30, 0x28	; 40
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8b 7f       	andi	r24, 0xFB	; 251
    1618:	8c 93       	st	X, r24
}
    161a:	6e 96       	adiw	r28, 0x1e	; 30
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	6e 97       	sbiw	r28, 0x1e	; 30
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    1642:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1644:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    1646:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1648:	80 7f       	andi	r24, 0xF0	; 240
    164a:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    164c:	a8 e2       	ldi	r26, 0x28	; 40
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e8 e2       	ldi	r30, 0x28	; 40
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8f 70       	andi	r24, 0x0F	; 15
    1658:	8c 93       	st	X, r24
	lcd_port |= temp;
    165a:	a8 e2       	ldi	r26, 0x28	; 40
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e8 e2       	ldi	r30, 0x28	; 40
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	90 81       	ld	r25, Z
    1664:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1666:	89 2b       	or	r24, r25
    1668:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    166a:	a8 e2       	ldi	r26, 0x28	; 40
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e8 e2       	ldi	r30, 0x28	; 40
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	81 60       	ori	r24, 0x01	; 1
    1676:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1678:	a8 e2       	ldi	r26, 0x28	; 40
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e8 e2       	ldi	r30, 0x28	; 40
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8d 7f       	andi	r24, 0xFD	; 253
    1684:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1686:	a8 e2       	ldi	r26, 0x28	; 40
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e8 e2       	ldi	r30, 0x28	; 40
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	84 60       	ori	r24, 0x04	; 4
    1692:	8c 93       	st	X, r24
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	a0 ea       	ldi	r26, 0xA0	; 160
    169a:	b0 e4       	ldi	r27, 0x40	; 64
    169c:	89 8f       	std	Y+25, r24	; 0x19
    169e:	9a 8f       	std	Y+26, r25	; 0x1a
    16a0:	ab 8f       	std	Y+27, r26	; 0x1b
    16a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	69 8d       	ldd	r22, Y+25	; 0x19
    16a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ac:	2d ec       	ldi	r18, 0xCD	; 205
    16ae:	3c ec       	ldi	r19, 0xCC	; 204
    16b0:	4c e2       	ldi	r20, 0x2C	; 44
    16b2:	55 e4       	ldi	r21, 0x45	; 69
    16b4:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	8d 8b       	std	Y+21, r24	; 0x15
    16be:	9e 8b       	std	Y+22, r25	; 0x16
    16c0:	af 8b       	std	Y+23, r26	; 0x17
    16c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16c4:	6d 89       	ldd	r22, Y+21	; 0x15
    16c6:	7e 89       	ldd	r23, Y+22	; 0x16
    16c8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ca:	98 8d       	ldd	r25, Y+24	; 0x18
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5f e3       	ldi	r21, 0x3F	; 63
    16d4:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <lcd_wr_char+0xba>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9c 8b       	std	Y+20, r25	; 0x14
    16e2:	8b 8b       	std	Y+19, r24	; 0x13
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    16e6:	6d 89       	ldd	r22, Y+21	; 0x15
    16e8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ea:	8f 89       	ldd	r24, Y+23	; 0x17
    16ec:	98 8d       	ldd	r25, Y+24	; 0x18
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	3f ef       	ldi	r19, 0xFF	; 255
    16f2:	4f e7       	ldi	r20, 0x7F	; 127
    16f4:	57 e4       	ldi	r21, 0x47	; 71
    16f6:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    16fa:	18 16       	cp	r1, r24
    16fc:	4c f5       	brge	.+82     	; 0x1750 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1700:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1702:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1704:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	51 e4       	ldi	r21, 0x41	; 65
    170e:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9c 8b       	std	Y+20, r25	; 0x14
    1724:	8b 8b       	std	Y+19, r24	; 0x13
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <lcd_wr_char+0x11a>
    1728:	84 e1       	ldi	r24, 0x14	; 20
    172a:	91 e0       	ldi	r25, 0x01	; 1
    172c:	9a 8b       	std	Y+18, r25	; 0x12
    172e:	89 8b       	std	Y+17, r24	; 0x11
    1730:	89 89       	ldd	r24, Y+17	; 0x11
    1732:	9a 89       	ldd	r25, Y+18	; 0x12
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <lcd_wr_char+0x108>
    1738:	9a 8b       	std	Y+18, r25	; 0x12
    173a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173c:	8b 89       	ldd	r24, Y+19	; 0x13
    173e:	9c 89       	ldd	r25, Y+20	; 0x14
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	9c 8b       	std	Y+20, r25	; 0x14
    1744:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1746:	8b 89       	ldd	r24, Y+19	; 0x13
    1748:	9c 89       	ldd	r25, Y+20	; 0x14
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	69 f7       	brne	.-38     	; 0x1728 <lcd_wr_char+0xfc>
    174e:	14 c0       	rjmp	.+40     	; 0x1778 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1750:	6d 89       	ldd	r22, Y+21	; 0x15
    1752:	7e 89       	ldd	r23, Y+22	; 0x16
    1754:	8f 89       	ldd	r24, Y+23	; 0x17
    1756:	98 8d       	ldd	r25, Y+24	; 0x18
    1758:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9c 8b       	std	Y+20, r25	; 0x14
    1762:	8b 8b       	std	Y+19, r24	; 0x13
    1764:	8b 89       	ldd	r24, Y+19	; 0x13
    1766:	9c 89       	ldd	r25, Y+20	; 0x14
    1768:	98 8b       	std	Y+16, r25	; 0x10
    176a:	8f 87       	std	Y+15, r24	; 0x0f
    176c:	8f 85       	ldd	r24, Y+15	; 0x0f
    176e:	98 89       	ldd	r25, Y+16	; 0x10
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <lcd_wr_char+0x144>
    1774:	98 8b       	std	Y+16, r25	; 0x10
    1776:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1778:	a8 e2       	ldi	r26, 0x28	; 40
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e8 e2       	ldi	r30, 0x28	; 40
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8b 7f       	andi	r24, 0xFB	; 251
    1784:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    1786:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1788:	8f 70       	andi	r24, 0x0F	; 15
    178a:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    178c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    178e:	82 95       	swap	r24
    1790:	80 7f       	andi	r24, 0xF0	; 240
    1792:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1794:	a8 e2       	ldi	r26, 0x28	; 40
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e8 e2       	ldi	r30, 0x28	; 40
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	8f 70       	andi	r24, 0x0F	; 15
    17a0:	8c 93       	st	X, r24
	lcd_port |= letter;
    17a2:	a8 e2       	ldi	r26, 0x28	; 40
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e8 e2       	ldi	r30, 0x28	; 40
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	90 81       	ld	r25, Z
    17ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17ae:	89 2b       	or	r24, r25
    17b0:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    17b2:	a8 e2       	ldi	r26, 0x28	; 40
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e8 e2       	ldi	r30, 0x28	; 40
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	81 60       	ori	r24, 0x01	; 1
    17be:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    17c0:	a8 e2       	ldi	r26, 0x28	; 40
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e8 e2       	ldi	r30, 0x28	; 40
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	8d 7f       	andi	r24, 0xFD	; 253
    17cc:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    17ce:	a8 e2       	ldi	r26, 0x28	; 40
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e8 e2       	ldi	r30, 0x28	; 40
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	84 60       	ori	r24, 0x04	; 4
    17da:	8c 93       	st	X, r24
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a0 ea       	ldi	r26, 0xA0	; 160
    17e2:	b0 e4       	ldi	r27, 0x40	; 64
    17e4:	8b 87       	std	Y+11, r24	; 0x0b
    17e6:	9c 87       	std	Y+12, r25	; 0x0c
    17e8:	ad 87       	std	Y+13, r26	; 0x0d
    17ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	2d ec       	ldi	r18, 0xCD	; 205
    17f6:	3c ec       	ldi	r19, 0xCC	; 204
    17f8:	4c e2       	ldi	r20, 0x2C	; 44
    17fa:	55 e4       	ldi	r21, 0x45	; 69
    17fc:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	8f 83       	std	Y+7, r24	; 0x07
    1806:	98 87       	std	Y+8, r25	; 0x08
    1808:	a9 87       	std	Y+9, r26	; 0x09
    180a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5f e3       	ldi	r21, 0x3F	; 63
    181c:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    1820:	88 23       	and	r24, r24
    1822:	2c f4       	brge	.+10     	; 0x182e <lcd_wr_char+0x202>
		__ticks = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	3f c0       	rjmp	.+126    	; 0x18ac <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	57 e4       	ldi	r21, 0x47	; 71
    183e:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    1842:	18 16       	cp	r1, r24
    1844:	4c f5       	brge	.+82     	; 0x1898 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1846:	6b 85       	ldd	r22, Y+11	; 0x0b
    1848:	7c 85       	ldd	r23, Y+12	; 0x0c
    184a:	8d 85       	ldd	r24, Y+13	; 0x0d
    184c:	9e 85       	ldd	r25, Y+14	; 0x0e
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	0f c0       	rjmp	.+30     	; 0x188e <lcd_wr_char+0x262>
    1870:	84 e1       	ldi	r24, 0x14	; 20
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <lcd_wr_char+0x250>
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	69 f7       	brne	.-38     	; 0x1870 <lcd_wr_char+0x244>
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <lcd_wr_char+0x28c>
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    18c0:	a8 e2       	ldi	r26, 0x28	; 40
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e8 e2       	ldi	r30, 0x28	; 40
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8b 7f       	andi	r24, 0xFB	; 251
    18cc:	8c 93       	st	X, r24
}
    18ce:	6e 96       	adiw	r28, 0x1e	; 30
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <lcd_home>:


void lcd_home()
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    18e8:	80 e8       	ldi	r24, 0x80	; 128
    18ea:	0e 94 bc 09 	call	0x1378	; 0x1378 <lcd_wr_command>
}
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	0f 92       	push	r0
    18fa:	0f 92       	push	r0
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	0a c0       	rjmp	.+20     	; 0x191a <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1906:	e9 81       	ldd	r30, Y+1	; 0x01
    1908:	fa 81       	ldd	r31, Y+2	; 0x02
    190a:	80 81       	ld	r24, Z
    190c:	0e 94 16 0b 	call	0x162c	; 0x162c <lcd_wr_char>
		str++;
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	9a 83       	std	Y+2, r25	; 0x02
    1918:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    191a:	e9 81       	ldd	r30, Y+1	; 0x01
    191c:	fa 81       	ldd	r31, Y+2	; 0x02
    191e:	80 81       	ld	r24, Z
    1920:	88 23       	and	r24, r24
    1922:	89 f7       	brne	.-30     	; 0x1906 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <lcd_cursor+0x6>
    1934:	0f 92       	push	r0
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	3c 83       	std	Y+4, r19	; 0x04
    1946:	2b 83       	std	Y+3, r18	; 0x03
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	82 30       	cpi	r24, 0x02	; 2
    194e:	91 05       	cpc	r25, r1
    1950:	d9 f0       	breq	.+54     	; 0x1988 <lcd_cursor+0x5a>
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	23 30       	cpi	r18, 0x03	; 3
    1958:	31 05       	cpc	r19, r1
    195a:	34 f4       	brge	.+12     	; 0x1968 <lcd_cursor+0x3a>
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	91 05       	cpc	r25, r1
    1964:	61 f0       	breq	.+24     	; 0x197e <lcd_cursor+0x50>
    1966:	1e c0       	rjmp	.+60     	; 0x19a4 <lcd_cursor+0x76>
    1968:	2b 81       	ldd	r18, Y+3	; 0x03
    196a:	3c 81       	ldd	r19, Y+4	; 0x04
    196c:	23 30       	cpi	r18, 0x03	; 3
    196e:	31 05       	cpc	r19, r1
    1970:	81 f0       	breq	.+32     	; 0x1992 <lcd_cursor+0x64>
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	84 30       	cpi	r24, 0x04	; 4
    1978:	91 05       	cpc	r25, r1
    197a:	81 f0       	breq	.+32     	; 0x199c <lcd_cursor+0x6e>
    197c:	13 c0       	rjmp	.+38     	; 0x19a4 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	81 58       	subi	r24, 0x81	; 129
    1982:	0e 94 bc 09 	call	0x1378	; 0x1378 <lcd_wr_command>
    1986:	0e c0       	rjmp	.+28     	; 0x19a4 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	81 54       	subi	r24, 0x41	; 65
    198c:	0e 94 bc 09 	call	0x1378	; 0x1378 <lcd_wr_command>
    1990:	09 c0       	rjmp	.+18     	; 0x19a4 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	8d 56       	subi	r24, 0x6D	; 109
    1996:	0e 94 bc 09 	call	0x1378	; 0x1378 <lcd_wr_command>
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	8d 52       	subi	r24, 0x2D	; 45
    19a0:	0e 94 bc 09 	call	0x1378	; 0x1378 <lcd_wr_command>
		default: break;
	}
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	27 97       	sbiw	r28, 0x07	; 7
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	8a 83       	std	Y+2, r24	; 0x02
    19c8:	6b 83       	std	Y+3, r22	; 0x03
    19ca:	5d 83       	std	Y+5, r21	; 0x05
    19cc:	4c 83       	std	Y+4, r20	; 0x04
    19ce:	3f 83       	std	Y+7, r19	; 0x07
    19d0:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    19d2:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	88 23       	and	r24, r24
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <lcd_print+0x2e>
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	88 23       	and	r24, r24
    19de:	19 f4       	brne	.+6      	; 0x19e6 <lcd_print+0x34>
	{
		lcd_home();
    19e0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <lcd_home>
    19e4:	04 c0       	rjmp	.+8      	; 0x19ee <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	6b 81       	ldd	r22, Y+3	; 0x03
    19ea:	0e 94 97 0c 	call	0x192e	; 0x192e <lcd_cursor>
	}
	if(digits==5 || flag==1)
    19ee:	8e 81       	ldd	r24, Y+6	; 0x06
    19f0:	9f 81       	ldd	r25, Y+7	; 0x07
    19f2:	85 30       	cpi	r24, 0x05	; 5
    19f4:	91 05       	cpc	r25, r1
    19f6:	19 f0       	breq	.+6      	; 0x19fe <lcd_print+0x4c>
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	a9 f4       	brne	.+42     	; 0x1a28 <lcd_print+0x76>
	{
		million=value/10000+48;
    19fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1a00:	9d 81       	ldd	r25, Y+5	; 0x05
    1a02:	20 e1       	ldi	r18, 0x10	; 16
    1a04:	37 e2       	ldi	r19, 0x27	; 39
    1a06:	b9 01       	movw	r22, r18
    1a08:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__udivmodhi4>
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	c0 96       	adiw	r24, 0x30	; 48
    1a10:	90 93 1b 03 	sts	0x031B, r25
    1a14:	80 93 1a 03 	sts	0x031A, r24
		lcd_wr_char(million);
    1a18:	80 91 1a 03 	lds	r24, 0x031A
    1a1c:	90 91 1b 03 	lds	r25, 0x031B
    1a20:	0e 94 16 0b 	call	0x162c	; 0x162c <lcd_wr_char>
		flag=1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1a28:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2c:	84 30       	cpi	r24, 0x04	; 4
    1a2e:	91 05       	cpc	r25, r1
    1a30:	19 f0       	breq	.+6      	; 0x1a38 <lcd_print+0x86>
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	11 f5       	brne	.+68     	; 0x1a7c <lcd_print+0xca>
	{
		temp = value/1000;
    1a38:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3c:	28 ee       	ldi	r18, 0xE8	; 232
    1a3e:	33 e0       	ldi	r19, 0x03	; 3
    1a40:	b9 01       	movw	r22, r18
    1a42:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__udivmodhi4>
    1a46:	cb 01       	movw	r24, r22
    1a48:	90 93 1d 03 	sts	0x031D, r25
    1a4c:	80 93 1c 03 	sts	0x031C, r24
		thousand = temp%10 + 48;
    1a50:	80 91 1c 03 	lds	r24, 0x031C
    1a54:	90 91 1d 03 	lds	r25, 0x031D
    1a58:	2a e0       	ldi	r18, 0x0A	; 10
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	b9 01       	movw	r22, r18
    1a5e:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__udivmodhi4>
    1a62:	c0 96       	adiw	r24, 0x30	; 48
    1a64:	90 93 2d 03 	sts	0x032D, r25
    1a68:	80 93 2c 03 	sts	0x032C, r24
		lcd_wr_char(thousand);
    1a6c:	80 91 2c 03 	lds	r24, 0x032C
    1a70:	90 91 2d 03 	lds	r25, 0x032D
    1a74:	0e 94 16 0b 	call	0x162c	; 0x162c <lcd_wr_char>
		flag=1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a80:	83 30       	cpi	r24, 0x03	; 3
    1a82:	91 05       	cpc	r25, r1
    1a84:	19 f0       	breq	.+6      	; 0x1a8c <lcd_print+0xda>
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	11 f5       	brne	.+68     	; 0x1ad0 <lcd_print+0x11e>
	{
		temp = value/100;
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a90:	24 e6       	ldi	r18, 0x64	; 100
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	b9 01       	movw	r22, r18
    1a96:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__udivmodhi4>
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	90 93 1d 03 	sts	0x031D, r25
    1aa0:	80 93 1c 03 	sts	0x031C, r24
		hundred = temp%10 + 48;
    1aa4:	80 91 1c 03 	lds	r24, 0x031C
    1aa8:	90 91 1d 03 	lds	r25, 0x031D
    1aac:	2a e0       	ldi	r18, 0x0A	; 10
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	b9 01       	movw	r22, r18
    1ab2:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__udivmodhi4>
    1ab6:	c0 96       	adiw	r24, 0x30	; 48
    1ab8:	90 93 29 03 	sts	0x0329, r25
    1abc:	80 93 28 03 	sts	0x0328, r24
		lcd_wr_char(hundred);
    1ac0:	80 91 28 03 	lds	r24, 0x0328
    1ac4:	90 91 29 03 	lds	r25, 0x0329
    1ac8:	0e 94 16 0b 	call	0x162c	; 0x162c <lcd_wr_char>
		flag=1;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1ad0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad4:	82 30       	cpi	r24, 0x02	; 2
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	19 f0       	breq	.+6      	; 0x1ae0 <lcd_print+0x12e>
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	11 f5       	brne	.+68     	; 0x1b24 <lcd_print+0x172>
	{
		temp = value/10;
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae4:	2a e0       	ldi	r18, 0x0A	; 10
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	b9 01       	movw	r22, r18
    1aea:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__udivmodhi4>
    1aee:	cb 01       	movw	r24, r22
    1af0:	90 93 1d 03 	sts	0x031D, r25
    1af4:	80 93 1c 03 	sts	0x031C, r24
		tens = temp%10 + 48;
    1af8:	80 91 1c 03 	lds	r24, 0x031C
    1afc:	90 91 1d 03 	lds	r25, 0x031D
    1b00:	2a e0       	ldi	r18, 0x0A	; 10
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	b9 01       	movw	r22, r18
    1b06:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__udivmodhi4>
    1b0a:	c0 96       	adiw	r24, 0x30	; 48
    1b0c:	90 93 24 03 	sts	0x0324, r25
    1b10:	80 93 23 03 	sts	0x0323, r24
		lcd_wr_char(tens);
    1b14:	80 91 23 03 	lds	r24, 0x0323
    1b18:	90 91 24 03 	lds	r25, 0x0324
    1b1c:	0e 94 16 0b 	call	0x162c	; 0x162c <lcd_wr_char>
		flag=1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1b24:	8e 81       	ldd	r24, Y+6	; 0x06
    1b26:	9f 81       	ldd	r25, Y+7	; 0x07
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	19 f0       	breq	.+6      	; 0x1b34 <lcd_print+0x182>
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	91 f4       	brne	.+36     	; 0x1b58 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    1b34:	8c 81       	ldd	r24, Y+4	; 0x04
    1b36:	9d 81       	ldd	r25, Y+5	; 0x05
    1b38:	2a e0       	ldi	r18, 0x0A	; 10
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	b9 01       	movw	r22, r18
    1b3e:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__udivmodhi4>
    1b42:	c0 96       	adiw	r24, 0x30	; 48
    1b44:	90 93 2b 03 	sts	0x032B, r25
    1b48:	80 93 2a 03 	sts	0x032A, r24
		lcd_wr_char(unit);
    1b4c:	80 91 2a 03 	lds	r24, 0x032A
    1b50:	90 91 2b 03 	lds	r25, 0x032B
    1b54:	0e 94 16 0b 	call	0x162c	; 0x162c <lcd_wr_char>
	}
	if(digits>5)
    1b58:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b5c:	86 30       	cpi	r24, 0x06	; 6
    1b5e:	91 05       	cpc	r25, r1
    1b60:	1c f0       	brlt	.+6      	; 0x1b68 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    1b62:	85 e4       	ldi	r24, 0x45	; 69
    1b64:	0e 94 16 0b 	call	0x162c	; 0x162c <lcd_wr_char>
	}
	
}
    1b68:	27 96       	adiw	r28, 0x07	; 7
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <LCD_DISPLAY_INT_1>:


void LCD_DISPLAY_INT_1(int val)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	0f 92       	push	r0
    1b80:	0f 92       	push	r0
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01


 lcd_print(1,1,val,4);
    1b8a:	29 81       	ldd	r18, Y+1	; 0x01
    1b8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	61 e0       	ldi	r22, 0x01	; 1
    1b92:	a9 01       	movw	r20, r18
    1b94:	24 e0       	ldi	r18, 0x04	; 4
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <lcd_print>

}
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <reverse>:

/* reverse: reverse string s in place */
void reverse(char s[])
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	28 97       	sbiw	r28, 0x08	; 8
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	98 87       	std	Y+8, r25	; 0x08
    1bbc:	8f 83       	std	Y+7, r24	; 0x07
    int c, i, j;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
    1bbe:	1c 82       	std	Y+4, r1	; 0x04
    1bc0:	1b 82       	std	Y+3, r1	; 0x03
    1bc2:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc4:	98 85       	ldd	r25, Y+8	; 0x08
    1bc6:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <strlen>
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	2f c0       	rjmp	.+94     	; 0x1c30 <reverse+0x8a>
        c = s[i];
    1bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd8:	98 85       	ldd	r25, Y+8	; 0x08
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e2 0f       	add	r30, r18
    1bde:	f3 1f       	adc	r31, r19
    1be0:	80 81       	ld	r24, Z
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
        s[i] = s[j];
    1bea:	2b 81       	ldd	r18, Y+3	; 0x03
    1bec:	3c 81       	ldd	r19, Y+4	; 0x04
    1bee:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf0:	98 85       	ldd	r25, Y+8	; 0x08
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	a2 0f       	add	r26, r18
    1bf6:	b3 1f       	adc	r27, r19
    1bf8:	29 81       	ldd	r18, Y+1	; 0x01
    1bfa:	3a 81       	ldd	r19, Y+2	; 0x02
    1bfc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bfe:	98 85       	ldd	r25, Y+8	; 0x08
    1c00:	fc 01       	movw	r30, r24
    1c02:	e2 0f       	add	r30, r18
    1c04:	f3 1f       	adc	r31, r19
    1c06:	80 81       	ld	r24, Z
    1c08:	8c 93       	st	X, r24
        s[j] = c;
    1c0a:	29 81       	ldd	r18, Y+1	; 0x01
    1c0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c10:	98 85       	ldd	r25, Y+8	; 0x08
    1c12:	fc 01       	movw	r30, r24
    1c14:	e2 0f       	add	r30, r18
    1c16:	f3 1f       	adc	r31, r19
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	80 83       	st	Z, r24

/* reverse: reverse string s in place */
void reverse(char s[])
{
    int c, i, j;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	2b 81       	ldd	r18, Y+3	; 0x03
    1c32:	3c 81       	ldd	r19, Y+4	; 0x04
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	9a 81       	ldd	r25, Y+2	; 0x02
    1c38:	28 17       	cp	r18, r24
    1c3a:	39 07       	cpc	r19, r25
    1c3c:	54 f2       	brlt	.-108    	; 0x1bd2 <reverse+0x2c>
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
}
    1c3e:	28 96       	adiw	r28, 0x08	; 8
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <itoa1>:
void itoa1(int n, char s[])
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	28 97       	sbiw	r28, 0x08	; 8
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	78 87       	std	Y+8, r23	; 0x08
    1c6a:	6f 83       	std	Y+7, r22	; 0x07
    int i, sign;
    if ((sign = n) < 0) /* record sign */
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	99 23       	and	r25, r25
    1c7a:	3c f4       	brge	.+14     	; 0x1c8a <itoa1+0x3a>
         n = -n;          /* make n positive */
    1c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c80:	90 95       	com	r25
    1c82:	81 95       	neg	r24
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    i = 0;
    1c8a:	1c 82       	std	Y+4, r1	; 0x04
    1c8c:	1b 82       	std	Y+3, r1	; 0x03
    do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0'; /* get next digit */
    1c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c90:	3c 81       	ldd	r19, Y+4	; 0x04
    1c92:	8f 81       	ldd	r24, Y+7	; 0x07
    1c94:	98 85       	ldd	r25, Y+8	; 0x08
    1c96:	fc 01       	movw	r30, r24
    1c98:	e2 0f       	add	r30, r18
    1c9a:	f3 1f       	adc	r31, r19
    1c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca0:	2a e0       	ldi	r18, 0x0A	; 10
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	b9 01       	movw	r22, r18
    1ca6:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <__divmodhi4>
    1caa:	80 5d       	subi	r24, 0xD0	; 208
    1cac:	80 83       	st	Z, r24
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
    } while ((n /= 10) > 0);     /* delete it */
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	2a e0       	ldi	r18, 0x0A	; 10
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	b9 01       	movw	r22, r18
    1cc2:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <__divmodhi4>
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd0:	18 16       	cp	r1, r24
    1cd2:	19 06       	cpc	r1, r25
    1cd4:	e4 f2       	brlt	.-72     	; 0x1c8e <itoa1+0x3e>
    if (sign < 0)
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	99 23       	and	r25, r25
    1cdc:	74 f4       	brge	.+28     	; 0x1cfa <itoa1+0xaa>
         s[i++] = '-';
    1cde:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce4:	98 85       	ldd	r25, Y+8	; 0x08
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	e2 0f       	add	r30, r18
    1cea:	f3 1f       	adc	r31, r19
    1cec:	8d e2       	ldi	r24, 0x2D	; 45
    1cee:	80 83       	st	Z, r24
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	9c 83       	std	Y+4, r25	; 0x04
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
    s[i] = '\0';
    1cfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1d00:	98 85       	ldd	r25, Y+8	; 0x08
    1d02:	fc 01       	movw	r30, r24
    1d04:	e2 0f       	add	r30, r18
    1d06:	f3 1f       	adc	r31, r19
    1d08:	10 82       	st	Z, r1
    reverse(s);
    1d0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0c:	98 85       	ldd	r25, Y+8	; 0x08
    1d0e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <reverse>
}
    1d12:	28 96       	adiw	r28, 0x08	; 8
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <LCD_DISPLAY_INT_2>:

}*/
	

void LCD_DISPLAY_INT_2(int val)
{	
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	0f 92       	push	r0
    1d2a:	0f 92       	push	r0
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01


lcd_print(2,1,val,4);
    1d34:	29 81       	ldd	r18, Y+1	; 0x01
    1d36:	3a 81       	ldd	r19, Y+2	; 0x02
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
    1d3c:	a9 01       	movw	r20, r18
    1d3e:	24 e0       	ldi	r18, 0x04	; 4
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <lcd_print>

}
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <init_buzzer>:

// BUZZER Functions

/*****Function to Initialize PORTS*****/
void init_buzzer()
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0x08;				//Setting PORTC pin3 as outpt
    1d58:	a7 e2       	ldi	r26, 0x27	; 39
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e7 e2       	ldi	r30, 0x27	; 39
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	88 60       	ori	r24, 0x08	; 8
    1d64:	8c 93       	st	X, r24
	PORTC = 0x00;				//Initialize Values of PORTC to 0.
    1d66:	e8 e2       	ldi	r30, 0x28	; 40
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	10 82       	st	Z, r1
}
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <buzzer_delay>:

/***** Buzzer Delay Function*****/
void buzzer_delay()
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	6a 97       	sbiw	r28, 0x1a	; 26
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
	unsigned int i;
	for(i=0; i<10;i++)
    1d86:	1a 8e       	std	Y+26, r1	; 0x1a
    1d88:	19 8e       	std	Y+25, r1	; 0x19
    1d8a:	c3 c0       	rjmp	.+390    	; 0x1f12 <buzzer_delay+0x1a0>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a8 ec       	ldi	r26, 0xC8	; 200
    1d92:	b2 e4       	ldi	r27, 0x42	; 66
    1d94:	8d 8b       	std	Y+21, r24	; 0x15
    1d96:	9e 8b       	std	Y+22, r25	; 0x16
    1d98:	af 8b       	std	Y+23, r26	; 0x17
    1d9a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1da0:	8f 89       	ldd	r24, Y+23	; 0x17
    1da2:	98 8d       	ldd	r25, Y+24	; 0x18
    1da4:	2a ef       	ldi	r18, 0xFA	; 250
    1da6:	3d ee       	ldi	r19, 0xED	; 237
    1da8:	4b e6       	ldi	r20, 0x6B	; 107
    1daa:	50 e4       	ldi	r21, 0x40	; 64
    1dac:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	89 8b       	std	Y+17, r24	; 0x11
    1db6:	9a 8b       	std	Y+18, r25	; 0x12
    1db8:	ab 8b       	std	Y+19, r26	; 0x13
    1dba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1dbc:	69 89       	ldd	r22, Y+17	; 0x11
    1dbe:	7a 89       	ldd	r23, Y+18	; 0x12
    1dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	1c f4       	brge	.+6      	; 0x1dda <buzzer_delay+0x68>
		__ticks = 1;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	88 8b       	std	Y+16, r24	; 0x10
    1dd8:	91 c0       	rjmp	.+290    	; 0x1efc <buzzer_delay+0x18a>
	else if (__tmp > 255)
    1dda:	69 89       	ldd	r22, Y+17	; 0x11
    1ddc:	7a 89       	ldd	r23, Y+18	; 0x12
    1dde:	8b 89       	ldd	r24, Y+19	; 0x13
    1de0:	9c 89       	ldd	r25, Y+20	; 0x14
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	4f e7       	ldi	r20, 0x7F	; 127
    1de8:	53 e4       	ldi	r21, 0x43	; 67
    1dea:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    1dee:	18 16       	cp	r1, r24
    1df0:	0c f0       	brlt	.+2      	; 0x1df4 <buzzer_delay+0x82>
    1df2:	7b c0       	rjmp	.+246    	; 0x1eea <buzzer_delay+0x178>
	{
		_delay_ms(__us / 1000.0);
    1df4:	6d 89       	ldd	r22, Y+21	; 0x15
    1df6:	7e 89       	ldd	r23, Y+22	; 0x16
    1df8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	4a e7       	ldi	r20, 0x7A	; 122
    1e02:	54 e4       	ldi	r21, 0x44	; 68
    1e04:	0e 94 c9 19 	call	0x3392	; 0x3392 <__divsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	8c 87       	std	Y+12, r24	; 0x0c
    1e0e:	9d 87       	std	Y+13, r25	; 0x0d
    1e10:	ae 87       	std	Y+14, r26	; 0x0e
    1e12:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e14:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e16:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e18:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e1c:	2d ec       	ldi	r18, 0xCD	; 205
    1e1e:	3c ec       	ldi	r19, 0xCC	; 204
    1e20:	4c e2       	ldi	r20, 0x2C	; 44
    1e22:	55 e4       	ldi	r21, 0x45	; 69
    1e24:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	88 87       	std	Y+8, r24	; 0x08
    1e2e:	99 87       	std	Y+9, r25	; 0x09
    1e30:	aa 87       	std	Y+10, r26	; 0x0a
    1e32:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e34:	68 85       	ldd	r22, Y+8	; 0x08
    1e36:	79 85       	ldd	r23, Y+9	; 0x09
    1e38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e8       	ldi	r20, 0x80	; 128
    1e42:	5f e3       	ldi	r21, 0x3F	; 63
    1e44:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    1e48:	88 23       	and	r24, r24
    1e4a:	2c f4       	brge	.+10     	; 0x1e56 <buzzer_delay+0xe4>
		__ticks = 1;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9f 83       	std	Y+7, r25	; 0x07
    1e52:	8e 83       	std	Y+6, r24	; 0x06
    1e54:	3f c0       	rjmp	.+126    	; 0x1ed4 <buzzer_delay+0x162>
	else if (__tmp > 65535)
    1e56:	68 85       	ldd	r22, Y+8	; 0x08
    1e58:	79 85       	ldd	r23, Y+9	; 0x09
    1e5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	3f ef       	ldi	r19, 0xFF	; 255
    1e62:	4f e7       	ldi	r20, 0x7F	; 127
    1e64:	57 e4       	ldi	r21, 0x47	; 71
    1e66:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    1e6a:	18 16       	cp	r1, r24
    1e6c:	4c f5       	brge	.+82     	; 0x1ec0 <buzzer_delay+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e70:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e74:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e2       	ldi	r20, 0x20	; 32
    1e7c:	51 e4       	ldi	r21, 0x41	; 65
    1e7e:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9f 83       	std	Y+7, r25	; 0x07
    1e94:	8e 83       	std	Y+6, r24	; 0x06
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <buzzer_delay+0x144>
    1e98:	84 e1       	ldi	r24, 0x14	; 20
    1e9a:	91 e0       	ldi	r25, 0x01	; 1
    1e9c:	9d 83       	std	Y+5, r25	; 0x05
    1e9e:	8c 83       	std	Y+4, r24	; 0x04
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <buzzer_delay+0x132>
    1ea8:	9d 83       	std	Y+5, r25	; 0x05
    1eaa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eac:	8e 81       	ldd	r24, Y+6	; 0x06
    1eae:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	9f 83       	std	Y+7, r25	; 0x07
    1eb4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	69 f7       	brne	.-38     	; 0x1e98 <buzzer_delay+0x126>
    1ebe:	24 c0       	rjmp	.+72     	; 0x1f08 <buzzer_delay+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec0:	68 85       	ldd	r22, Y+8	; 0x08
    1ec2:	79 85       	ldd	r23, Y+9	; 0x09
    1ec4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ec8:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	9f 83       	std	Y+7, r25	; 0x07
    1ed2:	8e 83       	std	Y+6, r24	; 0x06
    1ed4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed8:	9b 83       	std	Y+3, r25	; 0x03
    1eda:	8a 83       	std	Y+2, r24	; 0x02
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <buzzer_delay+0x16e>
    1ee4:	9b 83       	std	Y+3, r25	; 0x03
    1ee6:	8a 83       	std	Y+2, r24	; 0x02
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <buzzer_delay+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eea:	69 89       	ldd	r22, Y+17	; 0x11
    1eec:	7a 89       	ldd	r23, Y+18	; 0x12
    1eee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef2:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	88 8b       	std	Y+16, r24	; 0x10
    1efc:	88 89       	ldd	r24, Y+16	; 0x10
    1efe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	8a 95       	dec	r24
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <buzzer_delay+0x190>
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	89 8d       	ldd	r24, Y+25	; 0x19
    1f0a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f0c:	01 96       	adiw	r24, 0x01	; 1
    1f0e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f10:	89 8f       	std	Y+25, r24	; 0x19
    1f12:	89 8d       	ldd	r24, Y+25	; 0x19
    1f14:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f16:	8a 30       	cpi	r24, 0x0A	; 10
    1f18:	91 05       	cpc	r25, r1
    1f1a:	08 f4       	brcc	.+2      	; 0x1f1e <buzzer_delay+0x1ac>
    1f1c:	37 cf       	rjmp	.-402    	; 0x1d8c <buzzer_delay+0x1a>
	{
		_delay_us(100);
	}
}
    1f1e:	6a 96       	adiw	r28, 0x1a	; 26
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <BUZZER_ON>:

void BUZZER_ON()
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <BUZZER_ON+0x6>
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62

int i=0; 
    1f3a:	1b 82       	std	Y+3, r1	; 0x03
    1f3c:	1a 82       	std	Y+2, r1	; 0x02
   unsigned char port_C_copy;
   port_C_copy = PORTC;
    1f3e:	e8 e2       	ldi	r30, 0x28	; 40
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	89 83       	std	Y+1, r24	; 0x01
   port_C_copy = port_C_copy | 0x08;
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	88 60       	ori	r24, 0x08	; 8
    1f4a:	89 83       	std	Y+1, r24	; 0x01
   PORTC = port_C_copy;	
    1f4c:	e8 e2       	ldi	r30, 0x28	; 40
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	80 83       	st	Z, r24
   //for(i=0;i<10;i++)
	//tick_timer();
	buzzer_delay();
    1f54:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <buzzer_delay>
   port_C_copy = PORTC;
    1f58:	e8 e2       	ldi	r30, 0x28	; 40
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	89 83       	std	Y+1, r24	; 0x01
   port_C_copy = port_C_copy & 0xF7;
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	87 7f       	andi	r24, 0xF7	; 247
    1f64:	89 83       	std	Y+1, r24	; 0x01
   PORTC = port_C_copy;	
    1f66:	e8 e2       	ldi	r30, 0x28	; 40
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	80 83       	st	Z, r24

//PORTC = 0x08;			//Set pin3 to turn the "buzzer ON"
//buzzer_delay();			//delay


}
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <BUZZER_OFF>:


void BUZZER_OFF()
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62

PORTC = 0x00;			//Clear pin3 to turn the "buzzer OFF"
    1f82:	e8 e2       	ldi	r30, 0x28	; 40
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	10 82       	st	Z, r1
buzzer_delay();			//delay
    1f88:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <buzzer_delay>

}
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <left_encoder_pin_config>:
unsigned long int ShaftCountLeft = 0; //to keep track of left position encoder 
unsigned long int ShaftCountRight = 0; //to keep track of right position encoder
unsigned int Degrees; //to accept angle in degrees for turning

void left_encoder_pin_config (void)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    1f9a:	ad e2       	ldi	r26, 0x2D	; 45
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	ed e2       	ldi	r30, 0x2D	; 45
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	8f 7e       	andi	r24, 0xEF	; 239
    1fa6:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
    1fa8:	ae e2       	ldi	r26, 0x2E	; 46
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	ee e2       	ldi	r30, 0x2E	; 46
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	80 61       	ori	r24, 0x10	; 16
    1fb4:	8c 93       	st	X, r24
}
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1fc4:	ad e2       	ldi	r26, 0x2D	; 45
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	ed e2       	ldi	r30, 0x2D	; 45
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	8f 7d       	andi	r24, 0xDF	; 223
    1fd0:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
    1fd2:	ae e2       	ldi	r26, 0x2E	; 46
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	ee e2       	ldi	r30, 0x2E	; 46
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	80 62       	ori	r24, 0x20	; 32
    1fde:	8c 93       	st	X, r24
}
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <left_position_encoder_interrupt_init>:




void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1fee:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1ff0:	aa e6       	ldi	r26, 0x6A	; 106
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	ea e6       	ldi	r30, 0x6A	; 106
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	82 60       	ori	r24, 0x02	; 2
    1ffc:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1ffe:	ad e3       	ldi	r26, 0x3D	; 61
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	ed e3       	ldi	r30, 0x3D	; 61
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	80 61       	ori	r24, 0x10	; 16
    200a:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    200c:	78 94       	sei
}
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    201c:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    201e:	aa e6       	ldi	r26, 0x6A	; 106
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	ea e6       	ldi	r30, 0x6A	; 106
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	88 60       	ori	r24, 0x08	; 8
    202a:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    202c:	ad e3       	ldi	r26, 0x3D	; 61
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	ed e3       	ldi	r30, 0x3D	; 61
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	80 62       	ori	r24, 0x20	; 32
    2038:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    203a:	78 94       	sei
}
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
    2042:	1f 92       	push	r1
    2044:	0f 92       	push	r0
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	0f 92       	push	r0
    204a:	11 24       	eor	r1, r1
    204c:	8f 93       	push	r24
    204e:	9f 93       	push	r25
    2050:	af 93       	push	r26
    2052:	bf 93       	push	r27
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
    205c:	80 91 10 03 	lds	r24, 0x0310
    2060:	90 91 11 03 	lds	r25, 0x0311
    2064:	a0 91 12 03 	lds	r26, 0x0312
    2068:	b0 91 13 03 	lds	r27, 0x0313
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	a1 1d       	adc	r26, r1
    2070:	b1 1d       	adc	r27, r1
    2072:	80 93 10 03 	sts	0x0310, r24
    2076:	90 93 11 03 	sts	0x0311, r25
    207a:	a0 93 12 03 	sts	0x0312, r26
    207e:	b0 93 13 03 	sts	0x0313, r27
}
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	bf 91       	pop	r27
    2088:	af 91       	pop	r26
    208a:	9f 91       	pop	r25
    208c:	8f 91       	pop	r24
    208e:	0f 90       	pop	r0
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	0f 90       	pop	r0
    2094:	1f 90       	pop	r1
    2096:	18 95       	reti

00002098 <__vector_5>:


//SR for left position encoder
ISR(INT4_vect)
{
    2098:	1f 92       	push	r1
    209a:	0f 92       	push	r0
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	0f 92       	push	r0
    20a0:	11 24       	eor	r1, r1
    20a2:	8f 93       	push	r24
    20a4:	9f 93       	push	r25
    20a6:	af 93       	push	r26
    20a8:	bf 93       	push	r27
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
    20b2:	80 91 0c 03 	lds	r24, 0x030C
    20b6:	90 91 0d 03 	lds	r25, 0x030D
    20ba:	a0 91 0e 03 	lds	r26, 0x030E
    20be:	b0 91 0f 03 	lds	r27, 0x030F
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	a1 1d       	adc	r26, r1
    20c6:	b1 1d       	adc	r27, r1
    20c8:	80 93 0c 03 	sts	0x030C, r24
    20cc:	90 93 0d 03 	sts	0x030D, r25
    20d0:	a0 93 0e 03 	sts	0x030E, r26
    20d4:	b0 93 0f 03 	sts	0x030F, r27
}
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	bf 91       	pop	r27
    20de:	af 91       	pop	r26
    20e0:	9f 91       	pop	r25
    20e2:	8f 91       	pop	r24
    20e4:	0f 90       	pop	r0
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	0f 90       	pop	r0
    20ea:	1f 90       	pop	r1
    20ec:	18 95       	reti

000020ee <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	2c 97       	sbiw	r28, 0x0c	; 12
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	9a 87       	std	Y+10, r25	; 0x0a
    2104:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e0       	ldi	r26, 0x00	; 0
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	af 83       	std	Y+7, r26	; 0x07
    2114:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    2116:	19 82       	std	Y+1, r1	; 0x01
    2118:	1a 82       	std	Y+2, r1	; 0x02
    211a:	1b 82       	std	Y+3, r1	; 0x03
    211c:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	cc 01       	movw	r24, r24
    2124:	a0 e0       	ldi	r26, 0x00	; 0
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 b7 1b 	call	0x376e	; 0x376e <__floatunsisf>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	bc 01       	movw	r22, r24
    2136:	cd 01       	movw	r24, r26
    2138:	28 e4       	ldi	r18, 0x48	; 72
    213a:	31 ee       	ldi	r19, 0xE1	; 225
    213c:	42 e8       	ldi	r20, 0x82	; 130
    213e:	50 e4       	ldi	r21, 0x40	; 64
    2140:	0e 94 c9 19 	call	0x3392	; 0x3392 <__divsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	8d 83       	std	Y+5, r24	; 0x05
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	af 83       	std	Y+7, r26	; 0x07
    214e:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    2150:	6d 81       	ldd	r22, Y+5	; 0x05
    2152:	7e 81       	ldd	r23, Y+6	; 0x06
    2154:	8f 81       	ldd	r24, Y+7	; 0x07
    2156:	98 85       	ldd	r25, Y+8	; 0x08
    2158:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	cc 01       	movw	r24, r24
    2162:	a0 e0       	ldi	r26, 0x00	; 0
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	ab 83       	std	Y+3, r26	; 0x03
    216c:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0; 
    216e:	10 92 10 03 	sts	0x0310, r1
    2172:	10 92 11 03 	sts	0x0311, r1
    2176:	10 92 12 03 	sts	0x0312, r1
    217a:	10 92 13 03 	sts	0x0313, r1
 ShaftCountLeft = 0; 
    217e:	10 92 0c 03 	sts	0x030C, r1
    2182:	10 92 0d 03 	sts	0x030D, r1
    2186:	10 92 0e 03 	sts	0x030E, r1
    218a:	10 92 0f 03 	sts	0x030F, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    218e:	20 91 10 03 	lds	r18, 0x0310
    2192:	30 91 11 03 	lds	r19, 0x0311
    2196:	40 91 12 03 	lds	r20, 0x0312
    219a:	50 91 13 03 	lds	r21, 0x0313
    219e:	1c 86       	std	Y+12, r1	; 0x0c
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	9a 81       	ldd	r25, Y+2	; 0x02
    21a4:	ab 81       	ldd	r26, Y+3	; 0x03
    21a6:	bc 81       	ldd	r27, Y+4	; 0x04
    21a8:	28 17       	cp	r18, r24
    21aa:	39 07       	cpc	r19, r25
    21ac:	4a 07       	cpc	r20, r26
    21ae:	5b 07       	cpc	r21, r27
    21b0:	10 f0       	brcs	.+4      	; 0x21b6 <angle_rotate+0xc8>
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	8c 87       	std	Y+12, r24	; 0x0c
    21b6:	20 91 0c 03 	lds	r18, 0x030C
    21ba:	30 91 0d 03 	lds	r19, 0x030D
    21be:	40 91 0e 03 	lds	r20, 0x030E
    21c2:	50 91 0f 03 	lds	r21, 0x030F
    21c6:	1b 86       	std	Y+11, r1	; 0x0b
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	ab 81       	ldd	r26, Y+3	; 0x03
    21ce:	bc 81       	ldd	r27, Y+4	; 0x04
    21d0:	28 17       	cp	r18, r24
    21d2:	39 07       	cpc	r19, r25
    21d4:	4a 07       	cpc	r20, r26
    21d6:	5b 07       	cpc	r21, r27
    21d8:	10 f0       	brcs	.+4      	; 0x21de <angle_rotate+0xf0>
    21da:	91 e0       	ldi	r25, 0x01	; 1
    21dc:	9b 87       	std	Y+11, r25	; 0x0b
    21de:	8c 85       	ldd	r24, Y+12	; 0x0c
    21e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    21e2:	89 2b       	or	r24, r25
    21e4:	88 23       	and	r24, r24
    21e6:	99 f2       	breq	.-90     	; 0x218e <angle_rotate+0xa0>
  break;
 }
 STOP(); //Stop action
    21e8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <STOP>
}
    21ec:	2c 96       	adiw	r28, 0x0c	; 12
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <TURN_LEFT>:

void TURN_LEFT() 
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	2e 97       	sbiw	r28, 0x0e	; 14
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	aa ef       	ldi	r26, 0xFA	; 250
    2218:	b3 e4       	ldi	r27, 0x43	; 67
    221a:	8b 87       	std	Y+11, r24	; 0x0b
    221c:	9c 87       	std	Y+12, r25	; 0x0c
    221e:	ad 87       	std	Y+13, r26	; 0x0d
    2220:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2222:	6b 85       	ldd	r22, Y+11	; 0x0b
    2224:	7c 85       	ldd	r23, Y+12	; 0x0c
    2226:	8d 85       	ldd	r24, Y+13	; 0x0d
    2228:	9e 85       	ldd	r25, Y+14	; 0x0e
    222a:	2d ec       	ldi	r18, 0xCD	; 205
    222c:	3c ec       	ldi	r19, 0xCC	; 204
    222e:	4c e2       	ldi	r20, 0x2C	; 44
    2230:	55 e4       	ldi	r21, 0x45	; 69
    2232:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	8f 83       	std	Y+7, r24	; 0x07
    223c:	98 87       	std	Y+8, r25	; 0x08
    223e:	a9 87       	std	Y+9, r26	; 0x09
    2240:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2242:	6f 81       	ldd	r22, Y+7	; 0x07
    2244:	78 85       	ldd	r23, Y+8	; 0x08
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	2c f4       	brge	.+10     	; 0x2264 <__stack+0x65>
		__ticks = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	3f c0       	rjmp	.+126    	; 0x22e2 <__stack+0xe3>
	else if (__tmp > 65535)
    2264:	6f 81       	ldd	r22, Y+7	; 0x07
    2266:	78 85       	ldd	r23, Y+8	; 0x08
    2268:	89 85       	ldd	r24, Y+9	; 0x09
    226a:	9a 85       	ldd	r25, Y+10	; 0x0a
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	3f ef       	ldi	r19, 0xFF	; 255
    2270:	4f e7       	ldi	r20, 0x7F	; 127
    2272:	57 e4       	ldi	r21, 0x47	; 71
    2274:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    2278:	18 16       	cp	r1, r24
    227a:	4c f5       	brge	.+82     	; 0x22ce <__stack+0xcf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227c:	6b 85       	ldd	r22, Y+11	; 0x0b
    227e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2280:	8d 85       	ldd	r24, Y+13	; 0x0d
    2282:	9e 85       	ldd	r25, Y+14	; 0x0e
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9e 83       	std	Y+6, r25	; 0x06
    22a2:	8d 83       	std	Y+5, r24	; 0x05
    22a4:	0f c0       	rjmp	.+30     	; 0x22c4 <__stack+0xc5>
    22a6:	84 e1       	ldi	r24, 0x14	; 20
    22a8:	91 e0       	ldi	r25, 0x01	; 1
    22aa:	9c 83       	std	Y+4, r25	; 0x04
    22ac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <__stack+0xb3>
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ba:	8d 81       	ldd	r24, Y+5	; 0x05
    22bc:	9e 81       	ldd	r25, Y+6	; 0x06
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	69 f7       	brne	.-38     	; 0x22a6 <__stack+0xa7>
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <__stack+0xf7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ce:	6f 81       	ldd	r22, Y+7	; 0x07
    22d0:	78 85       	ldd	r23, Y+8	; 0x08
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9e 83       	std	Y+6, r25	; 0x06
    22e0:	8d 83       	std	Y+5, r24	; 0x05
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	9a 83       	std	Y+2, r25	; 0x02
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	9a 81       	ldd	r25, Y+2	; 0x02
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <__stack+0xef>
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(500);
MOTOR_LEFT_SPEED(150);
    22f6:	86 e9       	ldi	r24, 0x96	; 150
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 ab 02 	call	0x556	; 0x556 <MOTOR_LEFT_SPEED>
MOTOR_RIGHT_SPEED(150);
    22fe:	86 e9       	ldi	r24, 0x96	; 150
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 94 c5 02 	call	0x58a	; 0x58a <MOTOR_RIGHT_SPEED>
//forward_mm(25);
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 MOVE_SOFT_LEFT(); //Turn left
    2306:	0e 94 35 02 	call	0x46a	; 0x46a <MOVE_SOFT_LEFT>
 angle_rotate(180);
    230a:	84 eb       	ldi	r24, 0xB4	; 180
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 77 10 	call	0x20ee	; 0x20ee <angle_rotate>
}
    2312:	2e 96       	adiw	r28, 0x0e	; 14
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <TURN_RIGHT>:



void TURN_RIGHT()
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	2e 97       	sbiw	r28, 0x0e	; 14
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	aa ef       	ldi	r26, 0xFA	; 250
    233e:	b3 e4       	ldi	r27, 0x43	; 67
    2340:	8b 87       	std	Y+11, r24	; 0x0b
    2342:	9c 87       	std	Y+12, r25	; 0x0c
    2344:	ad 87       	std	Y+13, r26	; 0x0d
    2346:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	6b 85       	ldd	r22, Y+11	; 0x0b
    234a:	7c 85       	ldd	r23, Y+12	; 0x0c
    234c:	8d 85       	ldd	r24, Y+13	; 0x0d
    234e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2350:	2d ec       	ldi	r18, 0xCD	; 205
    2352:	3c ec       	ldi	r19, 0xCC	; 204
    2354:	4c e2       	ldi	r20, 0x2C	; 44
    2356:	55 e4       	ldi	r21, 0x45	; 69
    2358:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8f 83       	std	Y+7, r24	; 0x07
    2362:	98 87       	std	Y+8, r25	; 0x08
    2364:	a9 87       	std	Y+9, r26	; 0x09
    2366:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2368:	6f 81       	ldd	r22, Y+7	; 0x07
    236a:	78 85       	ldd	r23, Y+8	; 0x08
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	2c f4       	brge	.+10     	; 0x238a <TURN_RIGHT+0x66>
		__ticks = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	3f c0       	rjmp	.+126    	; 0x2408 <TURN_RIGHT+0xe4>
	else if (__tmp > 65535)
    238a:	6f 81       	ldd	r22, Y+7	; 0x07
    238c:	78 85       	ldd	r23, Y+8	; 0x08
    238e:	89 85       	ldd	r24, Y+9	; 0x09
    2390:	9a 85       	ldd	r25, Y+10	; 0x0a
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <TURN_RIGHT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <TURN_RIGHT+0xc6>
    23cc:	84 e1       	ldi	r24, 0x14	; 20
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	9c 83       	std	Y+4, r25	; 0x04
    23d2:	8b 83       	std	Y+3, r24	; 0x03
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <TURN_RIGHT+0xb4>
    23dc:	9c 83       	std	Y+4, r25	; 0x04
    23de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8d 81       	ldd	r24, Y+5	; 0x05
    23ec:	9e 81       	ldd	r25, Y+6	; 0x06
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f7       	brne	.-38     	; 0x23cc <TURN_RIGHT+0xa8>
    23f2:	14 c0       	rjmp	.+40     	; 0x241c <TURN_RIGHT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	6f 81       	ldd	r22, Y+7	; 0x07
    23f6:	78 85       	ldd	r23, Y+8	; 0x08
    23f8:	89 85       	ldd	r24, Y+9	; 0x09
    23fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fc:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <TURN_RIGHT+0xf0>
    2418:	9a 83       	std	Y+2, r25	; 0x02
    241a:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(500);
MOTOR_LEFT_SPEED(130);
    241c:	82 e8       	ldi	r24, 0x82	; 130
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	0e 94 ab 02 	call	0x556	; 0x556 <MOTOR_LEFT_SPEED>
MOTOR_RIGHT_SPEED(130);
    2424:	82 e8       	ldi	r24, 0x82	; 130
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	0e 94 c5 02 	call	0x58a	; 0x58a <MOTOR_RIGHT_SPEED>
//forward_mm(25);
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 MOVE_SOFT_RIGHT(); //Turn right
    242c:	0e 94 3f 02 	call	0x47e	; 0x47e <MOVE_SOFT_RIGHT>
 angle_rotate(135);
    2430:	87 e8       	ldi	r24, 0x87	; 135
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	0e 94 77 10 	call	0x20ee	; 0x20ee <angle_rotate>
}
    2438:	2e 96       	adiw	r28, 0x0e	; 14
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LEFT_BACK>:

void LEFT_BACK()
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	2e 97       	sbiw	r28, 0x0e	; 14
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	aa ef       	ldi	r26, 0xFA	; 250
    2464:	b3 e4       	ldi	r27, 0x43	; 67
    2466:	8b 87       	std	Y+11, r24	; 0x0b
    2468:	9c 87       	std	Y+12, r25	; 0x0c
    246a:	ad 87       	std	Y+13, r26	; 0x0d
    246c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2470:	7c 85       	ldd	r23, Y+12	; 0x0c
    2472:	8d 85       	ldd	r24, Y+13	; 0x0d
    2474:	9e 85       	ldd	r25, Y+14	; 0x0e
    2476:	2d ec       	ldi	r18, 0xCD	; 205
    2478:	3c ec       	ldi	r19, 0xCC	; 204
    247a:	4c e2       	ldi	r20, 0x2C	; 44
    247c:	55 e4       	ldi	r21, 0x45	; 69
    247e:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	8f 83       	std	Y+7, r24	; 0x07
    2488:	98 87       	std	Y+8, r25	; 0x08
    248a:	a9 87       	std	Y+9, r26	; 0x09
    248c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    248e:	6f 81       	ldd	r22, Y+7	; 0x07
    2490:	78 85       	ldd	r23, Y+8	; 0x08
    2492:	89 85       	ldd	r24, Y+9	; 0x09
    2494:	9a 85       	ldd	r25, Y+10	; 0x0a
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	2c f4       	brge	.+10     	; 0x24b0 <LEFT_BACK+0x66>
		__ticks = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	3f c0       	rjmp	.+126    	; 0x252e <LEFT_BACK+0xe4>
	else if (__tmp > 65535)
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	3f ef       	ldi	r19, 0xFF	; 255
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	57 e4       	ldi	r21, 0x47	; 71
    24c0:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	4c f5       	brge	.+82     	; 0x251a <LEFT_BACK+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    24cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e2       	ldi	r20, 0x20	; 32
    24d6:	51 e4       	ldi	r21, 0x41	; 65
    24d8:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	9e 83       	std	Y+6, r25	; 0x06
    24ee:	8d 83       	std	Y+5, r24	; 0x05
    24f0:	0f c0       	rjmp	.+30     	; 0x2510 <LEFT_BACK+0xc6>
    24f2:	84 e1       	ldi	r24, 0x14	; 20
    24f4:	91 e0       	ldi	r25, 0x01	; 1
    24f6:	9c 83       	std	Y+4, r25	; 0x04
    24f8:	8b 83       	std	Y+3, r24	; 0x03
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <LEFT_BACK+0xb4>
    2502:	9c 83       	std	Y+4, r25	; 0x04
    2504:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	9e 81       	ldd	r25, Y+6	; 0x06
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	69 f7       	brne	.-38     	; 0x24f2 <LEFT_BACK+0xa8>
    2518:	14 c0       	rjmp	.+40     	; 0x2542 <LEFT_BACK+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <LEFT_BACK+0xf0>
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(500);
MOTOR_LEFT_SPEED(150);
    2542:	86 e9       	ldi	r24, 0x96	; 150
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 ab 02 	call	0x556	; 0x556 <MOTOR_LEFT_SPEED>
MOTOR_RIGHT_SPEED(150);
    254a:	86 e9       	ldi	r24, 0x96	; 150
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 c5 02 	call	0x58a	; 0x58a <MOTOR_RIGHT_SPEED>
//reverse_mm(25);
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 MOVE_SOFT_LEFT(); //Turn right
    2552:	0e 94 35 02 	call	0x46a	; 0x46a <MOVE_SOFT_LEFT>
 angle_rotate(180);
    2556:	84 eb       	ldi	r24, 0xB4	; 180
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	0e 94 77 10 	call	0x20ee	; 0x20ee <angle_rotate>
}
    255e:	2e 96       	adiw	r28, 0x0e	; 14
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <RIGHT_BACK>:

void RIGHT_BACK()
{
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	2e 97       	sbiw	r28, 0x0e	; 14
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	de bf       	out	0x3e, r29	; 62
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	cd bf       	out	0x3d, r28	; 61
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	aa ef       	ldi	r26, 0xFA	; 250
    258a:	b3 e4       	ldi	r27, 0x43	; 67
    258c:	8b 87       	std	Y+11, r24	; 0x0b
    258e:	9c 87       	std	Y+12, r25	; 0x0c
    2590:	ad 87       	std	Y+13, r26	; 0x0d
    2592:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2594:	6b 85       	ldd	r22, Y+11	; 0x0b
    2596:	7c 85       	ldd	r23, Y+12	; 0x0c
    2598:	8d 85       	ldd	r24, Y+13	; 0x0d
    259a:	9e 85       	ldd	r25, Y+14	; 0x0e
    259c:	2d ec       	ldi	r18, 0xCD	; 205
    259e:	3c ec       	ldi	r19, 0xCC	; 204
    25a0:	4c e2       	ldi	r20, 0x2C	; 44
    25a2:	55 e4       	ldi	r21, 0x45	; 69
    25a4:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	8f 83       	std	Y+7, r24	; 0x07
    25ae:	98 87       	std	Y+8, r25	; 0x08
    25b0:	a9 87       	std	Y+9, r26	; 0x09
    25b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b4:	6f 81       	ldd	r22, Y+7	; 0x07
    25b6:	78 85       	ldd	r23, Y+8	; 0x08
    25b8:	89 85       	ldd	r24, Y+9	; 0x09
    25ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e8       	ldi	r20, 0x80	; 128
    25c2:	5f e3       	ldi	r21, 0x3F	; 63
    25c4:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__ltsf2>
    25c8:	88 23       	and	r24, r24
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <RIGHT_BACK+0x66>
		__ticks = 1;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9e 83       	std	Y+6, r25	; 0x06
    25d2:	8d 83       	std	Y+5, r24	; 0x05
    25d4:	3f c0       	rjmp	.+126    	; 0x2654 <RIGHT_BACK+0xe4>
	else if (__tmp > 65535)
    25d6:	6f 81       	ldd	r22, Y+7	; 0x07
    25d8:	78 85       	ldd	r23, Y+8	; 0x08
    25da:	89 85       	ldd	r24, Y+9	; 0x09
    25dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	4c f5       	brge	.+82     	; 0x2640 <RIGHT_BACK+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9e 83       	std	Y+6, r25	; 0x06
    2614:	8d 83       	std	Y+5, r24	; 0x05
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <RIGHT_BACK+0xc6>
    2618:	84 e1       	ldi	r24, 0x14	; 20
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	9c 83       	std	Y+4, r25	; 0x04
    261e:	8b 83       	std	Y+3, r24	; 0x03
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <RIGHT_BACK+0xb4>
    2628:	9c 83       	std	Y+4, r25	; 0x04
    262a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8d 81       	ldd	r24, Y+5	; 0x05
    262e:	9e 81       	ldd	r25, Y+6	; 0x06
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	9e 81       	ldd	r25, Y+6	; 0x06
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <RIGHT_BACK+0xa8>
    263e:	14 c0       	rjmp	.+40     	; 0x2668 <RIGHT_BACK+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	6f 81       	ldd	r22, Y+7	; 0x07
    2642:	78 85       	ldd	r23, Y+8	; 0x08
    2644:	89 85       	ldd	r24, Y+9	; 0x09
    2646:	9a 85       	ldd	r25, Y+10	; 0x0a
    2648:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9e 83       	std	Y+6, r25	; 0x06
    2652:	8d 83       	std	Y+5, r24	; 0x05
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <RIGHT_BACK+0xf0>
    2664:	9a 83       	std	Y+2, r25	; 0x02
    2666:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(500);
MOTOR_LEFT_SPEED(130);
    2668:	82 e8       	ldi	r24, 0x82	; 130
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	0e 94 ab 02 	call	0x556	; 0x556 <MOTOR_LEFT_SPEED>
MOTOR_RIGHT_SPEED(130);
    2670:	82 e8       	ldi	r24, 0x82	; 130
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	0e 94 c5 02 	call	0x58a	; 0x58a <MOTOR_RIGHT_SPEED>
//reverse_mm(25);
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 MOVE_SOFT_RIGHT(); //Turn right
    2678:	0e 94 3f 02 	call	0x47e	; 0x47e <MOVE_SOFT_RIGHT>
 angle_rotate(180);
    267c:	84 eb       	ldi	r24, 0xB4	; 180
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0e 94 77 10 	call	0x20ee	; 0x20ee <angle_rotate>
}
    2684:	2e 96       	adiw	r28, 0x0e	; 14
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <linear_distance_mm>:

void linear_distance_mm(unsigned int DistanceInMM)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	2c 97       	sbiw	r28, 0x0c	; 12
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	9c 87       	std	Y+12, r25	; 0x0c
    26ac:	8b 87       	std	Y+11, r24	; 0x0b
 float ReqdShaftCount = 0;
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a0 e0       	ldi	r26, 0x00	; 0
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	8f 83       	std	Y+7, r24	; 0x07
    26b8:	98 87       	std	Y+8, r25	; 0x08
    26ba:	a9 87       	std	Y+9, r26	; 0x09
    26bc:	ba 87       	std	Y+10, r27	; 0x0a
 unsigned long int ReqdShaftCountInt = 0;
    26be:	1b 82       	std	Y+3, r1	; 0x03
    26c0:	1c 82       	std	Y+4, r1	; 0x04
    26c2:	1d 82       	std	Y+5, r1	; 0x05
    26c4:	1e 82       	std	Y+6, r1	; 0x06

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    26c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    26c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    26ca:	cc 01       	movw	r24, r24
    26cc:	a0 e0       	ldi	r26, 0x00	; 0
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 b7 1b 	call	0x376e	; 0x376e <__floatunsisf>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	25 ee       	ldi	r18, 0xE5	; 229
    26e2:	30 ed       	ldi	r19, 0xD0	; 208
    26e4:	4a ea       	ldi	r20, 0xAA	; 170
    26e6:	50 e4       	ldi	r21, 0x40	; 64
    26e8:	0e 94 c9 19 	call	0x3392	; 0x3392 <__divsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	8f 83       	std	Y+7, r24	; 0x07
    26f2:	98 87       	std	Y+8, r25	; 0x08
    26f4:	a9 87       	std	Y+9, r26	; 0x09
    26f6:	ba 87       	std	Y+10, r27	; 0x0a
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    26f8:	6f 81       	ldd	r22, Y+7	; 0x07
    26fa:	78 85       	ldd	r23, Y+8	; 0x08
    26fc:	89 85       	ldd	r24, Y+9	; 0x09
    26fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2700:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	8b 83       	std	Y+3, r24	; 0x03
    270a:	9c 83       	std	Y+4, r25	; 0x04
    270c:	ad 83       	std	Y+5, r26	; 0x05
    270e:	be 83       	std	Y+6, r27	; 0x06
  
 ShaftCountRight = 0;
    2710:	10 92 10 03 	sts	0x0310, r1
    2714:	10 92 11 03 	sts	0x0311, r1
    2718:	10 92 12 03 	sts	0x0312, r1
    271c:	10 92 13 03 	sts	0x0313, r1
 while(1)
 {
 Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    2720:	83 e0       	ldi	r24, 0x03	; 3
    2722:	0e 94 14 03 	call	0x628	; 0x628 <ADC_Conversion>
    2726:	80 93 09 03 	sts	0x0309, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    272a:	82 e0       	ldi	r24, 0x02	; 2
    272c:	0e 94 14 03 	call	0x628	; 0x628 <ADC_Conversion>
    2730:	80 93 0a 03 	sts	0x030A, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	0e 94 14 03 	call	0x628	; 0x628 <ADC_Conversion>
    273a:	80 93 0b 03 	sts	0x030B, r24

int flag=0;
    273e:	1a 82       	std	Y+2, r1	; 0x02
    2740:	19 82       	std	Y+1, r1	; 0x01


		if(Left_white_line<0x28 && Center_white_line<0x28 && Right_white_line<0x28)
    2742:	80 91 09 03 	lds	r24, 0x0309
    2746:	88 32       	cpi	r24, 0x28	; 40
    2748:	a0 f4       	brcc	.+40     	; 0x2772 <linear_distance_mm+0xdc>
    274a:	80 91 0a 03 	lds	r24, 0x030A
    274e:	88 32       	cpi	r24, 0x28	; 40
    2750:	80 f4       	brcc	.+32     	; 0x2772 <linear_distance_mm+0xdc>
    2752:	80 91 0b 03 	lds	r24, 0x030B
    2756:	88 32       	cpi	r24, 0x28	; 40
    2758:	60 f4       	brcc	.+24     	; 0x2772 <linear_distance_mm+0xdc>
		{
			flag=1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9a 83       	std	Y+2, r25	; 0x02
    2760:	89 83       	std	Y+1, r24	; 0x01
			MOVE_FWD();
    2762:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
			velocity1(100,100);
    2766:	84 e6       	ldi	r24, 0x64	; 100
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	64 e6       	ldi	r22, 0x64	; 100
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
			
			
		
		}

		if((Left_white_line>0x28) && (flag==0))
    2772:	80 91 09 03 	lds	r24, 0x0309
    2776:	89 32       	cpi	r24, 0x29	; 41
    2778:	80 f0       	brcs	.+32     	; 0x279a <linear_distance_mm+0x104>
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	61 f4       	brne	.+24     	; 0x279a <linear_distance_mm+0x104>
		{
			flag=1;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9a 83       	std	Y+2, r25	; 0x02
    2788:	89 83       	std	Y+1, r24	; 0x01
			MOVE_FWD();
    278a:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
			velocity1(130,50);
    278e:	82 e8       	ldi	r24, 0x82	; 130
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	62 e3       	ldi	r22, 0x32	; 50
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
			
		}

		if((Right_white_line>0x28) && (flag==0))
    279a:	80 91 0b 03 	lds	r24, 0x030B
    279e:	89 32       	cpi	r24, 0x29	; 41
    27a0:	80 f0       	brcs	.+32     	; 0x27c2 <linear_distance_mm+0x12c>
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	61 f4       	brne	.+24     	; 0x27c2 <linear_distance_mm+0x12c>
		{
			flag=1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
			MOVE_FWD();
    27b2:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
			velocity1(50,130);
    27b6:	82 e3       	ldi	r24, 0x32	; 50
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	62 e8       	ldi	r22, 0x82	; 130
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
			
		}

		if(Center_white_line>0x28 && Left_white_line>0x28 && Right_white_line>0x28)
    27c2:	80 91 0a 03 	lds	r24, 0x030A
    27c6:	89 32       	cpi	r24, 0x29	; 41
    27c8:	80 f0       	brcs	.+32     	; 0x27ea <linear_distance_mm+0x154>
    27ca:	80 91 09 03 	lds	r24, 0x0309
    27ce:	89 32       	cpi	r24, 0x29	; 41
    27d0:	60 f0       	brcs	.+24     	; 0x27ea <linear_distance_mm+0x154>
    27d2:	80 91 0b 03 	lds	r24, 0x030B
    27d6:	89 32       	cpi	r24, 0x29	; 41
    27d8:	40 f0       	brcs	.+16     	; 0x27ea <linear_distance_mm+0x154>
		{
			MOVE_FWD();
    27da:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
			velocity1(0,0);
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
		}
  if(ShaftCountRight > ReqdShaftCountInt)
    27ea:	20 91 10 03 	lds	r18, 0x0310
    27ee:	30 91 11 03 	lds	r19, 0x0311
    27f2:	40 91 12 03 	lds	r20, 0x0312
    27f6:	50 91 13 03 	lds	r21, 0x0313
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	9c 81       	ldd	r25, Y+4	; 0x04
    27fe:	ad 81       	ldd	r26, Y+5	; 0x05
    2800:	be 81       	ldd	r27, Y+6	; 0x06
    2802:	82 17       	cp	r24, r18
    2804:	93 07       	cpc	r25, r19
    2806:	a4 07       	cpc	r26, r20
    2808:	b5 07       	cpc	r27, r21
    280a:	08 f0       	brcs	.+2      	; 0x280e <linear_distance_mm+0x178>
    280c:	89 cf       	rjmp	.-238    	; 0x2720 <linear_distance_mm+0x8a>
  {
  	break;
  }
 } 
 STOP(); //Stop robot
    280e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <STOP>
}
    2812:	2c 96       	adiw	r28, 0x0c	; 12
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	0f 92       	push	r0
    282a:	0f 92       	push	r0
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	9a 83       	std	Y+2, r25	; 0x02
    2832:	89 83       	std	Y+1, r24	; 0x01
 MOVE_FWD();
    2834:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
 linear_distance_mm(DistanceInMM);
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	0e 94 4b 13 	call	0x2696	; 0x2696 <linear_distance_mm>
}
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	cf 91       	pop	r28
    2846:	df 91       	pop	r29
    2848:	08 95       	ret

0000284a <reverse_mm_l>:
void reverse_mm_l(unsigned int DistanceInMM)
{
    284a:	df 93       	push	r29
    284c:	cf 93       	push	r28
    284e:	0f 92       	push	r0
    2850:	0f 92       	push	r0
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	9a 83       	std	Y+2, r25	; 0x02
    2858:	89 83       	std	Y+1, r24	; 0x01
 MOVE_REV();
    285a:	0e 94 17 02 	call	0x42e	; 0x42e <MOVE_REV>
 velocity1(130,150);
    285e:	82 e8       	ldi	r24, 0x82	; 130
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	66 e9       	ldi	r22, 0x96	; 150
    2864:	70 e0       	ldi	r23, 0x00	; 0
    2866:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
 linear_rev_distance_mm(DistanceInMM);
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <linear_rev_distance_mm>
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <reverse_mm_r>:

void reverse_mm_r(unsigned int DistanceInMM)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	0f 92       	push	r0
    2882:	0f 92       	push	r0
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	9a 83       	std	Y+2, r25	; 0x02
    288a:	89 83       	std	Y+1, r24	; 0x01
 MOVE_REV();
    288c:	0e 94 17 02 	call	0x42e	; 0x42e <MOVE_REV>
 velocity1(120,140);
    2890:	88 e7       	ldi	r24, 0x78	; 120
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	6c e8       	ldi	r22, 0x8C	; 140
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
 linear_rev_distance_mm(DistanceInMM);
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	0e 94 98 16 	call	0x2d30	; 0x2d30 <linear_rev_distance_mm>
}
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <leftpark>:
void leftpark()
{
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
TURN_LEFT();
    28b6:	0e 94 ff 10 	call	0x21fe	; 0x21fe <TURN_LEFT>
velocity1(130,130);
    28ba:	82 e8       	ldi	r24, 0x82	; 130
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	62 e8       	ldi	r22, 0x82	; 130
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
forward_mm(150);
    28c6:	86 e9       	ldi	r24, 0x96	; 150
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	0e 94 12 14 	call	0x2824	; 0x2824 <forward_mm>
}
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <rightpark>:


void rightpark()
{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
TURN_RIGHT();
    28dc:	0e 94 92 11 	call	0x2324	; 0x2324 <TURN_RIGHT>
velocity1(130,130);
    28e0:	82 e8       	ldi	r24, 0x82	; 130
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	62 e8       	ldi	r22, 0x82	; 130
    28e6:	70 e0       	ldi	r23, 0x00	; 0
    28e8:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
forward_mm(150);
    28ec:	86 e9       	ldi	r24, 0x96	; 150
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 12 14 	call	0x2824	; 0x2824 <forward_mm>
}
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <velocity1>:



void velocity1(int a, int b)
{
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <velocity1+0x6>
    2900:	0f 92       	push	r0
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	9a 83       	std	Y+2, r25	; 0x02
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	7c 83       	std	Y+4, r23	; 0x04
    290c:	6b 83       	std	Y+3, r22	; 0x03
MOTOR_LEFT_SPEED(a);
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	0e 94 ab 02 	call	0x556	; 0x556 <MOTOR_LEFT_SPEED>
MOTOR_RIGHT_SPEED(b);
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	9c 81       	ldd	r25, Y+4	; 0x04
    291a:	0e 94 c5 02 	call	0x58a	; 0x58a <MOTOR_RIGHT_SPEED>

}
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <park>:

void park()
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
white_forward(junction);
    2934:	80 91 18 03 	lds	r24, 0x0318
    2938:	90 91 19 03 	lds	r25, 0x0319
    293c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <white_forward>
if(side==1)
    2940:	80 91 14 03 	lds	r24, 0x0314
    2944:	90 91 15 03 	lds	r25, 0x0315
    2948:	81 30       	cpi	r24, 0x01	; 1
    294a:	91 05       	cpc	r25, r1
    294c:	11 f4       	brne	.+4      	; 0x2952 <park+0x26>
{
leftpark();
    294e:	0e 94 57 14 	call	0x28ae	; 0x28ae <leftpark>
}
if(side==2)
    2952:	80 91 14 03 	lds	r24, 0x0314
    2956:	90 91 15 03 	lds	r25, 0x0315
    295a:	82 30       	cpi	r24, 0x02	; 2
    295c:	91 05       	cpc	r25, r1
    295e:	11 f4       	brne	.+4      	; 0x2964 <park+0x38>
{
rightpark();
    2960:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <rightpark>
}


}
    2964:	cf 91       	pop	r28
    2966:	df 91       	pop	r29
    2968:	08 95       	ret

0000296a <unpark>:
	
void unpark()
{
    296a:	df 93       	push	r29
    296c:	cf 93       	push	r28
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
	
	//white_reverse(1);
	if(side==1)
    2972:	80 91 14 03 	lds	r24, 0x0314
    2976:	90 91 15 03 	lds	r25, 0x0315
    297a:	81 30       	cpi	r24, 0x01	; 1
    297c:	91 05       	cpc	r25, r1
    297e:	31 f4       	brne	.+12     	; 0x298c <unpark+0x22>
	{	
	reverse_mm_l(280);
    2980:	88 e1       	ldi	r24, 0x18	; 24
    2982:	91 e0       	ldi	r25, 0x01	; 1
    2984:	0e 94 25 14 	call	0x284a	; 0x284a <reverse_mm_l>
	LEFT_BACK();
    2988:	0e 94 25 12 	call	0x244a	; 0x244a <LEFT_BACK>
	}

	if(side==2)
    298c:	80 91 14 03 	lds	r24, 0x0314
    2990:	90 91 15 03 	lds	r25, 0x0315
    2994:	82 30       	cpi	r24, 0x02	; 2
    2996:	91 05       	cpc	r25, r1
    2998:	39 f4       	brne	.+14     	; 0x29a8 <unpark+0x3e>
	{
	reverse_mm_r(280);
    299a:	88 e1       	ldi	r24, 0x18	; 24
    299c:	91 e0       	ldi	r25, 0x01	; 1
    299e:	0e 94 3e 14 	call	0x287c	; 0x287c <reverse_mm_r>
	RIGHT_BACK();
    29a2:	0e 94 b8 12 	call	0x2570	; 0x2570 <RIGHT_BACK>
    29a6:	08 c0       	rjmp	.+16     	; 0x29b8 <unpark+0x4e>
	}
	
	else
	{
	MOVE_FWD();
    29a8:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
	velocity1(0,0);
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	70 e0       	ldi	r23, 0x00	; 0
    29b4:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
	}
	white_forward(junction);
    29b8:	80 91 18 03 	lds	r24, 0x0318
    29bc:	90 91 19 03 	lds	r25, 0x0319
    29c0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <white_forward>

}
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <main>:


int main(void)
{
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
	init_devices();
    29d2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <init_devices>
//junction=1;
//side=1;
//park();
park_cmd=0;
    29d6:	10 92 20 03 	sts	0x0320, r1
    29da:	10 92 1f 03 	sts	0x031F, r1
unpark_cmd=0;
    29de:	10 92 27 03 	sts	0x0327, r1
    29e2:	10 92 26 03 	sts	0x0326, r1
junction=0;
    29e6:	10 92 19 03 	sts	0x0319, r1
    29ea:	10 92 18 03 	sts	0x0318, r1
side=0;
    29ee:	10 92 15 03 	sts	0x0315, r1
    29f2:	10 92 14 03 	sts	0x0314, r1


while(1)
{
if(park_cmd==0 || unpark_cmd==0)
    29f6:	80 91 1f 03 	lds	r24, 0x031F
    29fa:	90 91 20 03 	lds	r25, 0x0320
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	31 f0       	breq	.+12     	; 0x2a0e <main+0x44>
    2a02:	80 91 26 03 	lds	r24, 0x0326
    2a06:	90 91 27 03 	lds	r25, 0x0327
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	41 f4       	brne	.+16     	; 0x2a1e <main+0x54>
{
MOVE_FWD();
    2a0e:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
velocity1(0,0);
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	60 e0       	ldi	r22, 0x00	; 0
    2a18:	70 e0       	ldi	r23, 0x00	; 0
    2a1a:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
}
if(park_cmd==1)
    2a1e:	80 91 1f 03 	lds	r24, 0x031F
    2a22:	90 91 20 03 	lds	r25, 0x0320
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	91 05       	cpc	r25, r1
    2a2a:	31 f4       	brne	.+12     	; 0x2a38 <main+0x6e>
{
park();
    2a2c:	0e 94 96 14 	call	0x292c	; 0x292c <park>
park_cmd=0;
    2a30:	10 92 20 03 	sts	0x0320, r1
    2a34:	10 92 1f 03 	sts	0x031F, r1
}
if(unpark_cmd==1)
    2a38:	80 91 26 03 	lds	r24, 0x0326
    2a3c:	90 91 27 03 	lds	r25, 0x0327
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	91 05       	cpc	r25, r1
    2a44:	c1 f6       	brne	.-80     	; 0x29f6 <main+0x2c>
{
unpark();
    2a46:	0e 94 b5 14 	call	0x296a	; 0x296a <unpark>
unpark_cmd=0;
    2a4a:	10 92 27 03 	sts	0x0327, r1
    2a4e:	10 92 26 03 	sts	0x0326, r1
    2a52:	d1 cf       	rjmp	.-94     	; 0x29f6 <main+0x2c>

00002a54 <white_forward>:
}
}


void white_forward(int cnt)
{
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62
    2a5c:	28 97       	sbiw	r28, 0x08	; 8
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	98 87       	std	Y+8, r25	; 0x08
    2a6a:	8f 83       	std	Y+7, r24	; 0x07
int count=0;
    2a6c:	1e 82       	std	Y+6, r1	; 0x06
    2a6e:	1d 82       	std	Y+5, r1	; 0x05
int detected=0;
    2a70:	1c 82       	std	Y+4, r1	; 0x04
    2a72:	1b 82       	std	Y+3, r1	; 0x03
    2a74:	a0 c0       	rjmp	.+320    	; 0x2bb6 <white_forward+0x162>
while(count<cnt)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    2a76:	83 e0       	ldi	r24, 0x03	; 3
    2a78:	0e 94 14 03 	call	0x628	; 0x628 <ADC_Conversion>
    2a7c:	80 93 09 03 	sts	0x0309, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    2a80:	82 e0       	ldi	r24, 0x02	; 2
    2a82:	0e 94 14 03 	call	0x628	; 0x628 <ADC_Conversion>
    2a86:	80 93 0a 03 	sts	0x030A, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	0e 94 14 03 	call	0x628	; 0x628 <ADC_Conversion>
    2a90:	80 93 0b 03 	sts	0x030B, r24
		unsigned int Irval = front_dist_mm();
    2a94:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <front_dist_mm>
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01

		flag=0;
    2a9c:	10 92 08 03 	sts	0x0308, r1


		if(Left_white_line<0x28 && Center_white_line<0x28 && Right_white_line<0x28 && Irval>250)
    2aa0:	80 91 09 03 	lds	r24, 0x0309
    2aa4:	88 32       	cpi	r24, 0x28	; 40
    2aa6:	e0 f4       	brcc	.+56     	; 0x2ae0 <white_forward+0x8c>
    2aa8:	80 91 0a 03 	lds	r24, 0x030A
    2aac:	88 32       	cpi	r24, 0x28	; 40
    2aae:	c0 f4       	brcc	.+48     	; 0x2ae0 <white_forward+0x8c>
    2ab0:	80 91 0b 03 	lds	r24, 0x030B
    2ab4:	88 32       	cpi	r24, 0x28	; 40
    2ab6:	a0 f4       	brcc	.+40     	; 0x2ae0 <white_forward+0x8c>
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	8b 3f       	cpi	r24, 0xFB	; 251
    2abe:	91 05       	cpc	r25, r1
    2ac0:	78 f0       	brcs	.+30     	; 0x2ae0 <white_forward+0x8c>
		{
			flag=1;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	80 93 08 03 	sts	0x0308, r24
			MOVE_FWD();
    2ac8:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
			velocity1(100,100);
    2acc:	84 e6       	ldi	r24, 0x64	; 100
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	64 e6       	ldi	r22, 0x64	; 100
    2ad2:	70 e0       	ldi	r23, 0x00	; 0
    2ad4:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
			detected=1;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	9c 83       	std	Y+4, r25	; 0x04
    2ade:	8b 83       	std	Y+3, r24	; 0x03
			
		
		}

		if((Left_white_line>0x28 && Irval>250) && (flag==0))
    2ae0:	80 91 09 03 	lds	r24, 0x0309
    2ae4:	89 32       	cpi	r24, 0x29	; 41
    2ae6:	00 f1       	brcs	.+64     	; 0x2b28 <white_forward+0xd4>
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	9a 81       	ldd	r25, Y+2	; 0x02
    2aec:	8b 3f       	cpi	r24, 0xFB	; 251
    2aee:	91 05       	cpc	r25, r1
    2af0:	d8 f0       	brcs	.+54     	; 0x2b28 <white_forward+0xd4>
    2af2:	80 91 08 03 	lds	r24, 0x0308
    2af6:	88 23       	and	r24, r24
    2af8:	b9 f4       	brne	.+46     	; 0x2b28 <white_forward+0xd4>
		{
			flag=1;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	80 93 08 03 	sts	0x0308, r24
			MOVE_FWD();
    2b00:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
			velocity1(130,50);
    2b04:	82 e8       	ldi	r24, 0x82	; 130
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	62 e3       	ldi	r22, 0x32	; 50
    2b0a:	70 e0       	ldi	r23, 0x00	; 0
    2b0c:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
			if(detected==1)
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	91 05       	cpc	r25, r1
    2b18:	39 f4       	brne	.+14     	; 0x2b28 <white_forward+0xd4>
			{
			count++;
    2b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1e:	01 96       	adiw	r24, 0x01	; 1
    2b20:	9e 83       	std	Y+6, r25	; 0x06
    2b22:	8d 83       	std	Y+5, r24	; 0x05
			detected=0;
    2b24:	1c 82       	std	Y+4, r1	; 0x04
    2b26:	1b 82       	std	Y+3, r1	; 0x03
			}
		}

		if((Right_white_line>0x28 && Irval>250) && (flag==0))
    2b28:	80 91 0b 03 	lds	r24, 0x030B
    2b2c:	89 32       	cpi	r24, 0x29	; 41
    2b2e:	00 f1       	brcs	.+64     	; 0x2b70 <white_forward+0x11c>
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	9a 81       	ldd	r25, Y+2	; 0x02
    2b34:	8b 3f       	cpi	r24, 0xFB	; 251
    2b36:	91 05       	cpc	r25, r1
    2b38:	d8 f0       	brcs	.+54     	; 0x2b70 <white_forward+0x11c>
    2b3a:	80 91 08 03 	lds	r24, 0x0308
    2b3e:	88 23       	and	r24, r24
    2b40:	b9 f4       	brne	.+46     	; 0x2b70 <white_forward+0x11c>
		{
			flag=1;
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	80 93 08 03 	sts	0x0308, r24
			MOVE_FWD();
    2b48:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
			velocity1(50,130);
    2b4c:	82 e3       	ldi	r24, 0x32	; 50
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	62 e8       	ldi	r22, 0x82	; 130
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
			if(detected==1)
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5c:	81 30       	cpi	r24, 0x01	; 1
    2b5e:	91 05       	cpc	r25, r1
    2b60:	39 f4       	brne	.+14     	; 0x2b70 <white_forward+0x11c>
			{
			count++;
    2b62:	8d 81       	ldd	r24, Y+5	; 0x05
    2b64:	9e 81       	ldd	r25, Y+6	; 0x06
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	9e 83       	std	Y+6, r25	; 0x06
    2b6a:	8d 83       	std	Y+5, r24	; 0x05
			detected=0;
    2b6c:	1c 82       	std	Y+4, r1	; 0x04
    2b6e:	1b 82       	std	Y+3, r1	; 0x03
			}

		}

		if(Center_white_line>0x28 && Left_white_line>0x28 && Right_white_line>0x28)
    2b70:	80 91 0a 03 	lds	r24, 0x030A
    2b74:	89 32       	cpi	r24, 0x29	; 41
    2b76:	80 f0       	brcs	.+32     	; 0x2b98 <white_forward+0x144>
    2b78:	80 91 09 03 	lds	r24, 0x0309
    2b7c:	89 32       	cpi	r24, 0x29	; 41
    2b7e:	60 f0       	brcs	.+24     	; 0x2b98 <white_forward+0x144>
    2b80:	80 91 0b 03 	lds	r24, 0x030B
    2b84:	89 32       	cpi	r24, 0x29	; 41
    2b86:	40 f0       	brcs	.+16     	; 0x2b98 <white_forward+0x144>
		{
			MOVE_FWD();
    2b88:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
			velocity1(0,0);
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	60 e0       	ldi	r22, 0x00	; 0
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
		}
		if(Irval<250)
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9c:	8a 3f       	cpi	r24, 0xFA	; 250
    2b9e:	91 05       	cpc	r25, r1
    2ba0:	50 f4       	brcc	.+20     	; 0x2bb6 <white_forward+0x162>
		{
			MOVE_FWD();
    2ba2:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
			velocity1(0,0);
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	70 e0       	ldi	r23, 0x00	; 0
    2bae:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
			BUZZER_ON();
    2bb2:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <BUZZER_ON>

void white_forward(int cnt)
{
int count=0;
int detected=0;
while(count<cnt)
    2bb6:	2d 81       	ldd	r18, Y+5	; 0x05
    2bb8:	3e 81       	ldd	r19, Y+6	; 0x06
    2bba:	8f 81       	ldd	r24, Y+7	; 0x07
    2bbc:	98 85       	ldd	r25, Y+8	; 0x08
    2bbe:	28 17       	cp	r18, r24
    2bc0:	39 07       	cpc	r19, r25
    2bc2:	0c f4       	brge	.+2      	; 0x2bc6 <white_forward+0x172>
    2bc4:	58 cf       	rjmp	.-336    	; 0x2a76 <white_forward+0x22>
			BUZZER_ON();

		}

	}
	MOVE_FWD();
    2bc6:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
	velocity1(0,0);
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	70 e0       	ldi	r23, 0x00	; 0
    2bd2:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
}
    2bd6:	28 96       	adiw	r28, 0x08	; 8
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <white_reverse>:


void white_reverse(int cnt)
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	00 d0       	rcall	.+0      	; 0x2bee <white_reverse+0x6>
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <white_reverse+0x8>
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
int count=0;
    2bf8:	1c 82       	std	Y+4, r1	; 0x04
    2bfa:	1b 82       	std	Y+3, r1	; 0x03
int detected=0;
    2bfc:	1a 82       	std	Y+2, r1	; 0x02
    2bfe:	19 82       	std	Y+1, r1	; 0x01
    2c00:	7e c0       	rjmp	.+252    	; 0x2cfe <white_reverse+0x116>
while(count<cnt)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    2c02:	83 e0       	ldi	r24, 0x03	; 3
    2c04:	0e 94 14 03 	call	0x628	; 0x628 <ADC_Conversion>
    2c08:	80 93 09 03 	sts	0x0309, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    2c0c:	82 e0       	ldi	r24, 0x02	; 2
    2c0e:	0e 94 14 03 	call	0x628	; 0x628 <ADC_Conversion>
    2c12:	80 93 0a 03 	sts	0x030A, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	0e 94 14 03 	call	0x628	; 0x628 <ADC_Conversion>
    2c1c:	80 93 0b 03 	sts	0x030B, r24
		
		flag=0;
    2c20:	10 92 08 03 	sts	0x0308, r1


		if(Left_white_line<0x28 && Center_white_line<0x28 && Right_white_line<0x28)
    2c24:	80 91 09 03 	lds	r24, 0x0309
    2c28:	88 32       	cpi	r24, 0x28	; 40
    2c2a:	b8 f4       	brcc	.+46     	; 0x2c5a <white_reverse+0x72>
    2c2c:	80 91 0a 03 	lds	r24, 0x030A
    2c30:	88 32       	cpi	r24, 0x28	; 40
    2c32:	98 f4       	brcc	.+38     	; 0x2c5a <white_reverse+0x72>
    2c34:	80 91 0b 03 	lds	r24, 0x030B
    2c38:	88 32       	cpi	r24, 0x28	; 40
    2c3a:	78 f4       	brcc	.+30     	; 0x2c5a <white_reverse+0x72>
		{
			flag=1;
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	80 93 08 03 	sts	0x0308, r24
			MOVE_REV();
    2c42:	0e 94 17 02 	call	0x42e	; 0x42e <MOVE_REV>
			velocity1(100,100);
    2c46:	84 e6       	ldi	r24, 0x64	; 100
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	64 e6       	ldi	r22, 0x64	; 100
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
			detected=1;
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	9a 83       	std	Y+2, r25	; 0x02
    2c58:	89 83       	std	Y+1, r24	; 0x01
		}

		if((Left_white_line>0x28) && (flag==0))
    2c5a:	80 91 09 03 	lds	r24, 0x0309
    2c5e:	89 32       	cpi	r24, 0x29	; 41
    2c60:	d8 f0       	brcs	.+54     	; 0x2c98 <white_reverse+0xb0>
    2c62:	80 91 08 03 	lds	r24, 0x0308
    2c66:	88 23       	and	r24, r24
    2c68:	b9 f4       	brne	.+46     	; 0x2c98 <white_reverse+0xb0>
		{
			flag=1;
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	80 93 08 03 	sts	0x0308, r24
			MOVE_REV();
    2c70:	0e 94 17 02 	call	0x42e	; 0x42e <MOVE_REV>
			velocity1(50,130);
    2c74:	82 e3       	ldi	r24, 0x32	; 50
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	62 e8       	ldi	r22, 0x82	; 130
    2c7a:	70 e0       	ldi	r23, 0x00	; 0
    2c7c:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
			if(detected==1)
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	9a 81       	ldd	r25, Y+2	; 0x02
    2c84:	81 30       	cpi	r24, 0x01	; 1
    2c86:	91 05       	cpc	r25, r1
    2c88:	39 f4       	brne	.+14     	; 0x2c98 <white_reverse+0xb0>
			{
			count++;
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8e:	01 96       	adiw	r24, 0x01	; 1
    2c90:	9c 83       	std	Y+4, r25	; 0x04
    2c92:	8b 83       	std	Y+3, r24	; 0x03
			detected=0;
    2c94:	1a 82       	std	Y+2, r1	; 0x02
    2c96:	19 82       	std	Y+1, r1	; 0x01
			}
		}

		if((Right_white_line>0x28) && (flag==0))
    2c98:	80 91 0b 03 	lds	r24, 0x030B
    2c9c:	89 32       	cpi	r24, 0x29	; 41
    2c9e:	d8 f0       	brcs	.+54     	; 0x2cd6 <white_reverse+0xee>
    2ca0:	80 91 08 03 	lds	r24, 0x0308
    2ca4:	88 23       	and	r24, r24
    2ca6:	b9 f4       	brne	.+46     	; 0x2cd6 <white_reverse+0xee>
		{
			flag=1;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	80 93 08 03 	sts	0x0308, r24
			MOVE_REV();
    2cae:	0e 94 17 02 	call	0x42e	; 0x42e <MOVE_REV>
			velocity1(130,50);
    2cb2:	82 e8       	ldi	r24, 0x82	; 130
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	62 e3       	ldi	r22, 0x32	; 50
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>
			if(detected==1)
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc2:	81 30       	cpi	r24, 0x01	; 1
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	39 f4       	brne	.+14     	; 0x2cd6 <white_reverse+0xee>
			{
			count++;
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	9c 83       	std	Y+4, r25	; 0x04
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
			detected=0;
    2cd2:	1a 82       	std	Y+2, r1	; 0x02
    2cd4:	19 82       	std	Y+1, r1	; 0x01
			}
		}

		if(Center_white_line>0x28 && Left_white_line>0x28 && Right_white_line>0x28)
    2cd6:	80 91 0a 03 	lds	r24, 0x030A
    2cda:	89 32       	cpi	r24, 0x29	; 41
    2cdc:	80 f0       	brcs	.+32     	; 0x2cfe <white_reverse+0x116>
    2cde:	80 91 09 03 	lds	r24, 0x0309
    2ce2:	89 32       	cpi	r24, 0x29	; 41
    2ce4:	60 f0       	brcs	.+24     	; 0x2cfe <white_reverse+0x116>
    2ce6:	80 91 0b 03 	lds	r24, 0x030B
    2cea:	89 32       	cpi	r24, 0x29	; 41
    2cec:	40 f0       	brcs	.+16     	; 0x2cfe <white_reverse+0x116>
		{
			MOVE_REV();
    2cee:	0e 94 17 02 	call	0x42e	; 0x42e <MOVE_REV>
			velocity1(0,0);
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	60 e0       	ldi	r22, 0x00	; 0
    2cf8:	70 e0       	ldi	r23, 0x00	; 0
    2cfa:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>

void white_reverse(int cnt)
{
int count=0;
int detected=0;
while(count<cnt)
    2cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    2d00:	3c 81       	ldd	r19, Y+4	; 0x04
    2d02:	8d 81       	ldd	r24, Y+5	; 0x05
    2d04:	9e 81       	ldd	r25, Y+6	; 0x06
    2d06:	28 17       	cp	r18, r24
    2d08:	39 07       	cpc	r19, r25
    2d0a:	0c f4       	brge	.+2      	; 0x2d0e <white_reverse+0x126>
    2d0c:	7a cf       	rjmp	.-268    	; 0x2c02 <white_reverse+0x1a>
			velocity1(0,0);
		}
		

	}
	MOVE_FWD();
    2d0e:	0e 94 0d 02 	call	0x41a	; 0x41a <MOVE_FWD>
	velocity1(0,0);
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	60 e0       	ldi	r22, 0x00	; 0
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	0e 94 7d 14 	call	0x28fa	; 0x28fa <velocity1>

}
    2d1e:	26 96       	adiw	r28, 0x06	; 6
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	cf 91       	pop	r28
    2d2c:	df 91       	pop	r29
    2d2e:	08 95       	ret

00002d30 <linear_rev_distance_mm>:


void linear_rev_distance_mm(unsigned int DistanceInMM)
{
    2d30:	df 93       	push	r29
    2d32:	cf 93       	push	r28
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	2a 97       	sbiw	r28, 0x0a	; 10
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	cd bf       	out	0x3d, r28	; 61
    2d44:	9a 87       	std	Y+10, r25	; 0x0a
    2d46:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	a0 e0       	ldi	r26, 0x00	; 0
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	8d 83       	std	Y+5, r24	; 0x05
    2d52:	9e 83       	std	Y+6, r25	; 0x06
    2d54:	af 83       	std	Y+7, r26	; 0x07
    2d56:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    2d58:	19 82       	std	Y+1, r1	; 0x01
    2d5a:	1a 82       	std	Y+2, r1	; 0x02
    2d5c:	1b 82       	std	Y+3, r1	; 0x03
    2d5e:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    2d60:	89 85       	ldd	r24, Y+9	; 0x09
    2d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d64:	cc 01       	movw	r24, r24
    2d66:	a0 e0       	ldi	r26, 0x00	; 0
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	bc 01       	movw	r22, r24
    2d6c:	cd 01       	movw	r24, r26
    2d6e:	0e 94 b7 1b 	call	0x376e	; 0x376e <__floatunsisf>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	25 ee       	ldi	r18, 0xE5	; 229
    2d7c:	30 ed       	ldi	r19, 0xD0	; 208
    2d7e:	4a ea       	ldi	r20, 0xAA	; 170
    2d80:	50 e4       	ldi	r21, 0x40	; 64
    2d82:	0e 94 c9 19 	call	0x3392	; 0x3392 <__divsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	8d 83       	std	Y+5, r24	; 0x05
    2d8c:	9e 83       	std	Y+6, r25	; 0x06
    2d8e:	af 83       	std	Y+7, r26	; 0x07
    2d90:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    2d92:	6d 81       	ldd	r22, Y+5	; 0x05
    2d94:	7e 81       	ldd	r23, Y+6	; 0x06
    2d96:	8f 81       	ldd	r24, Y+7	; 0x07
    2d98:	98 85       	ldd	r25, Y+8	; 0x08
    2d9a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	89 83       	std	Y+1, r24	; 0x01
    2da4:	9a 83       	std	Y+2, r25	; 0x02
    2da6:	ab 83       	std	Y+3, r26	; 0x03
    2da8:	bc 83       	std	Y+4, r27	; 0x04
  
 ShaftCountRight = 0;
    2daa:	10 92 10 03 	sts	0x0310, r1
    2dae:	10 92 11 03 	sts	0x0311, r1
    2db2:	10 92 12 03 	sts	0x0312, r1
    2db6:	10 92 13 03 	sts	0x0313, r1
 while(1)
 {
 	
  if(ShaftCountRight > ReqdShaftCountInt)
    2dba:	20 91 10 03 	lds	r18, 0x0310
    2dbe:	30 91 11 03 	lds	r19, 0x0311
    2dc2:	40 91 12 03 	lds	r20, 0x0312
    2dc6:	50 91 13 03 	lds	r21, 0x0313
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dce:	ab 81       	ldd	r26, Y+3	; 0x03
    2dd0:	bc 81       	ldd	r27, Y+4	; 0x04
    2dd2:	82 17       	cp	r24, r18
    2dd4:	93 07       	cpc	r25, r19
    2dd6:	a4 07       	cpc	r26, r20
    2dd8:	b5 07       	cpc	r27, r21
    2dda:	78 f7       	brcc	.-34     	; 0x2dba <linear_rev_distance_mm+0x8a>
  {
  	break;
  }
 } 
 STOP(); //Stop robot
    2ddc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <STOP>
}
    2de0:	2a 96       	adiw	r28, 0x0a	; 10
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <__fixunssfsi>:
    2df2:	ef 92       	push	r14
    2df4:	ff 92       	push	r15
    2df6:	0f 93       	push	r16
    2df8:	1f 93       	push	r17
    2dfa:	7b 01       	movw	r14, r22
    2dfc:	8c 01       	movw	r16, r24
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	40 e0       	ldi	r20, 0x00	; 0
    2e04:	5f e4       	ldi	r21, 0x4F	; 79
    2e06:	0e 94 a5 1a 	call	0x354a	; 0x354a <__gesf2>
    2e0a:	88 23       	and	r24, r24
    2e0c:	8c f0       	brlt	.+34     	; 0x2e30 <__fixunssfsi+0x3e>
    2e0e:	c8 01       	movw	r24, r16
    2e10:	b7 01       	movw	r22, r14
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	5f e4       	ldi	r21, 0x4F	; 79
    2e1a:	0e 94 71 18 	call	0x30e2	; 0x30e2 <__subsf3>
    2e1e:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__fixsfsi>
    2e22:	9b 01       	movw	r18, r22
    2e24:	ac 01       	movw	r20, r24
    2e26:	20 50       	subi	r18, 0x00	; 0
    2e28:	30 40       	sbci	r19, 0x00	; 0
    2e2a:	40 40       	sbci	r20, 0x00	; 0
    2e2c:	50 48       	sbci	r21, 0x80	; 128
    2e2e:	06 c0       	rjmp	.+12     	; 0x2e3c <__fixunssfsi+0x4a>
    2e30:	c8 01       	movw	r24, r16
    2e32:	b7 01       	movw	r22, r14
    2e34:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__fixsfsi>
    2e38:	9b 01       	movw	r18, r22
    2e3a:	ac 01       	movw	r20, r24
    2e3c:	b9 01       	movw	r22, r18
    2e3e:	ca 01       	movw	r24, r20
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	ff 90       	pop	r15
    2e46:	ef 90       	pop	r14
    2e48:	08 95       	ret

00002e4a <_fpadd_parts>:
    2e4a:	a0 e0       	ldi	r26, 0x00	; 0
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	eb e2       	ldi	r30, 0x2B	; 43
    2e50:	f7 e1       	ldi	r31, 0x17	; 23
    2e52:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__prologue_saves__>
    2e56:	dc 01       	movw	r26, r24
    2e58:	2b 01       	movw	r4, r22
    2e5a:	fa 01       	movw	r30, r20
    2e5c:	9c 91       	ld	r25, X
    2e5e:	92 30       	cpi	r25, 0x02	; 2
    2e60:	08 f4       	brcc	.+2      	; 0x2e64 <_fpadd_parts+0x1a>
    2e62:	39 c1       	rjmp	.+626    	; 0x30d6 <_fpadd_parts+0x28c>
    2e64:	eb 01       	movw	r28, r22
    2e66:	88 81       	ld	r24, Y
    2e68:	82 30       	cpi	r24, 0x02	; 2
    2e6a:	08 f4       	brcc	.+2      	; 0x2e6e <_fpadd_parts+0x24>
    2e6c:	33 c1       	rjmp	.+614    	; 0x30d4 <_fpadd_parts+0x28a>
    2e6e:	94 30       	cpi	r25, 0x04	; 4
    2e70:	69 f4       	brne	.+26     	; 0x2e8c <_fpadd_parts+0x42>
    2e72:	84 30       	cpi	r24, 0x04	; 4
    2e74:	09 f0       	breq	.+2      	; 0x2e78 <_fpadd_parts+0x2e>
    2e76:	2f c1       	rjmp	.+606    	; 0x30d6 <_fpadd_parts+0x28c>
    2e78:	11 96       	adiw	r26, 0x01	; 1
    2e7a:	9c 91       	ld	r25, X
    2e7c:	11 97       	sbiw	r26, 0x01	; 1
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	98 17       	cp	r25, r24
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <_fpadd_parts+0x3c>
    2e84:	28 c1       	rjmp	.+592    	; 0x30d6 <_fpadd_parts+0x28c>
    2e86:	a0 e0       	ldi	r26, 0x00	; 0
    2e88:	b2 e0       	ldi	r27, 0x02	; 2
    2e8a:	25 c1       	rjmp	.+586    	; 0x30d6 <_fpadd_parts+0x28c>
    2e8c:	84 30       	cpi	r24, 0x04	; 4
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <_fpadd_parts+0x48>
    2e90:	21 c1       	rjmp	.+578    	; 0x30d4 <_fpadd_parts+0x28a>
    2e92:	82 30       	cpi	r24, 0x02	; 2
    2e94:	a9 f4       	brne	.+42     	; 0x2ec0 <_fpadd_parts+0x76>
    2e96:	92 30       	cpi	r25, 0x02	; 2
    2e98:	09 f0       	breq	.+2      	; 0x2e9c <_fpadd_parts+0x52>
    2e9a:	1d c1       	rjmp	.+570    	; 0x30d6 <_fpadd_parts+0x28c>
    2e9c:	9a 01       	movw	r18, r20
    2e9e:	ad 01       	movw	r20, r26
    2ea0:	88 e0       	ldi	r24, 0x08	; 8
    2ea2:	ea 01       	movw	r28, r20
    2ea4:	09 90       	ld	r0, Y+
    2ea6:	ae 01       	movw	r20, r28
    2ea8:	e9 01       	movw	r28, r18
    2eaa:	09 92       	st	Y+, r0
    2eac:	9e 01       	movw	r18, r28
    2eae:	81 50       	subi	r24, 0x01	; 1
    2eb0:	c1 f7       	brne	.-16     	; 0x2ea2 <_fpadd_parts+0x58>
    2eb2:	e2 01       	movw	r28, r4
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	11 96       	adiw	r26, 0x01	; 1
    2eb8:	9c 91       	ld	r25, X
    2eba:	89 23       	and	r24, r25
    2ebc:	81 83       	std	Z+1, r24	; 0x01
    2ebe:	08 c1       	rjmp	.+528    	; 0x30d0 <_fpadd_parts+0x286>
    2ec0:	92 30       	cpi	r25, 0x02	; 2
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <_fpadd_parts+0x7c>
    2ec4:	07 c1       	rjmp	.+526    	; 0x30d4 <_fpadd_parts+0x28a>
    2ec6:	12 96       	adiw	r26, 0x02	; 2
    2ec8:	2d 90       	ld	r2, X+
    2eca:	3c 90       	ld	r3, X
    2ecc:	13 97       	sbiw	r26, 0x03	; 3
    2ece:	eb 01       	movw	r28, r22
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed4:	14 96       	adiw	r26, 0x04	; 4
    2ed6:	ad 90       	ld	r10, X+
    2ed8:	bd 90       	ld	r11, X+
    2eda:	cd 90       	ld	r12, X+
    2edc:	dc 90       	ld	r13, X
    2ede:	17 97       	sbiw	r26, 0x07	; 7
    2ee0:	ec 80       	ldd	r14, Y+4	; 0x04
    2ee2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ee4:	0e 81       	ldd	r16, Y+6	; 0x06
    2ee6:	1f 81       	ldd	r17, Y+7	; 0x07
    2ee8:	91 01       	movw	r18, r2
    2eea:	28 1b       	sub	r18, r24
    2eec:	39 0b       	sbc	r19, r25
    2eee:	b9 01       	movw	r22, r18
    2ef0:	37 ff       	sbrs	r19, 7
    2ef2:	04 c0       	rjmp	.+8      	; 0x2efc <_fpadd_parts+0xb2>
    2ef4:	66 27       	eor	r22, r22
    2ef6:	77 27       	eor	r23, r23
    2ef8:	62 1b       	sub	r22, r18
    2efa:	73 0b       	sbc	r23, r19
    2efc:	60 32       	cpi	r22, 0x20	; 32
    2efe:	71 05       	cpc	r23, r1
    2f00:	0c f0       	brlt	.+2      	; 0x2f04 <_fpadd_parts+0xba>
    2f02:	61 c0       	rjmp	.+194    	; 0x2fc6 <_fpadd_parts+0x17c>
    2f04:	12 16       	cp	r1, r18
    2f06:	13 06       	cpc	r1, r19
    2f08:	6c f5       	brge	.+90     	; 0x2f64 <_fpadd_parts+0x11a>
    2f0a:	37 01       	movw	r6, r14
    2f0c:	48 01       	movw	r8, r16
    2f0e:	06 2e       	mov	r0, r22
    2f10:	04 c0       	rjmp	.+8      	; 0x2f1a <_fpadd_parts+0xd0>
    2f12:	96 94       	lsr	r9
    2f14:	87 94       	ror	r8
    2f16:	77 94       	ror	r7
    2f18:	67 94       	ror	r6
    2f1a:	0a 94       	dec	r0
    2f1c:	d2 f7       	brpl	.-12     	; 0x2f12 <_fpadd_parts+0xc8>
    2f1e:	21 e0       	ldi	r18, 0x01	; 1
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	40 e0       	ldi	r20, 0x00	; 0
    2f24:	50 e0       	ldi	r21, 0x00	; 0
    2f26:	04 c0       	rjmp	.+8      	; 0x2f30 <_fpadd_parts+0xe6>
    2f28:	22 0f       	add	r18, r18
    2f2a:	33 1f       	adc	r19, r19
    2f2c:	44 1f       	adc	r20, r20
    2f2e:	55 1f       	adc	r21, r21
    2f30:	6a 95       	dec	r22
    2f32:	d2 f7       	brpl	.-12     	; 0x2f28 <_fpadd_parts+0xde>
    2f34:	21 50       	subi	r18, 0x01	; 1
    2f36:	30 40       	sbci	r19, 0x00	; 0
    2f38:	40 40       	sbci	r20, 0x00	; 0
    2f3a:	50 40       	sbci	r21, 0x00	; 0
    2f3c:	2e 21       	and	r18, r14
    2f3e:	3f 21       	and	r19, r15
    2f40:	40 23       	and	r20, r16
    2f42:	51 23       	and	r21, r17
    2f44:	21 15       	cp	r18, r1
    2f46:	31 05       	cpc	r19, r1
    2f48:	41 05       	cpc	r20, r1
    2f4a:	51 05       	cpc	r21, r1
    2f4c:	21 f0       	breq	.+8      	; 0x2f56 <_fpadd_parts+0x10c>
    2f4e:	21 e0       	ldi	r18, 0x01	; 1
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e0       	ldi	r20, 0x00	; 0
    2f54:	50 e0       	ldi	r21, 0x00	; 0
    2f56:	79 01       	movw	r14, r18
    2f58:	8a 01       	movw	r16, r20
    2f5a:	e6 28       	or	r14, r6
    2f5c:	f7 28       	or	r15, r7
    2f5e:	08 29       	or	r16, r8
    2f60:	19 29       	or	r17, r9
    2f62:	3c c0       	rjmp	.+120    	; 0x2fdc <_fpadd_parts+0x192>
    2f64:	23 2b       	or	r18, r19
    2f66:	d1 f1       	breq	.+116    	; 0x2fdc <_fpadd_parts+0x192>
    2f68:	26 0e       	add	r2, r22
    2f6a:	37 1e       	adc	r3, r23
    2f6c:	35 01       	movw	r6, r10
    2f6e:	46 01       	movw	r8, r12
    2f70:	06 2e       	mov	r0, r22
    2f72:	04 c0       	rjmp	.+8      	; 0x2f7c <_fpadd_parts+0x132>
    2f74:	96 94       	lsr	r9
    2f76:	87 94       	ror	r8
    2f78:	77 94       	ror	r7
    2f7a:	67 94       	ror	r6
    2f7c:	0a 94       	dec	r0
    2f7e:	d2 f7       	brpl	.-12     	; 0x2f74 <_fpadd_parts+0x12a>
    2f80:	21 e0       	ldi	r18, 0x01	; 1
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e0       	ldi	r20, 0x00	; 0
    2f86:	50 e0       	ldi	r21, 0x00	; 0
    2f88:	04 c0       	rjmp	.+8      	; 0x2f92 <_fpadd_parts+0x148>
    2f8a:	22 0f       	add	r18, r18
    2f8c:	33 1f       	adc	r19, r19
    2f8e:	44 1f       	adc	r20, r20
    2f90:	55 1f       	adc	r21, r21
    2f92:	6a 95       	dec	r22
    2f94:	d2 f7       	brpl	.-12     	; 0x2f8a <_fpadd_parts+0x140>
    2f96:	21 50       	subi	r18, 0x01	; 1
    2f98:	30 40       	sbci	r19, 0x00	; 0
    2f9a:	40 40       	sbci	r20, 0x00	; 0
    2f9c:	50 40       	sbci	r21, 0x00	; 0
    2f9e:	2a 21       	and	r18, r10
    2fa0:	3b 21       	and	r19, r11
    2fa2:	4c 21       	and	r20, r12
    2fa4:	5d 21       	and	r21, r13
    2fa6:	21 15       	cp	r18, r1
    2fa8:	31 05       	cpc	r19, r1
    2faa:	41 05       	cpc	r20, r1
    2fac:	51 05       	cpc	r21, r1
    2fae:	21 f0       	breq	.+8      	; 0x2fb8 <_fpadd_parts+0x16e>
    2fb0:	21 e0       	ldi	r18, 0x01	; 1
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e0       	ldi	r20, 0x00	; 0
    2fb6:	50 e0       	ldi	r21, 0x00	; 0
    2fb8:	59 01       	movw	r10, r18
    2fba:	6a 01       	movw	r12, r20
    2fbc:	a6 28       	or	r10, r6
    2fbe:	b7 28       	or	r11, r7
    2fc0:	c8 28       	or	r12, r8
    2fc2:	d9 28       	or	r13, r9
    2fc4:	0b c0       	rjmp	.+22     	; 0x2fdc <_fpadd_parts+0x192>
    2fc6:	82 15       	cp	r24, r2
    2fc8:	93 05       	cpc	r25, r3
    2fca:	2c f0       	brlt	.+10     	; 0x2fd6 <_fpadd_parts+0x18c>
    2fcc:	1c 01       	movw	r2, r24
    2fce:	aa 24       	eor	r10, r10
    2fd0:	bb 24       	eor	r11, r11
    2fd2:	65 01       	movw	r12, r10
    2fd4:	03 c0       	rjmp	.+6      	; 0x2fdc <_fpadd_parts+0x192>
    2fd6:	ee 24       	eor	r14, r14
    2fd8:	ff 24       	eor	r15, r15
    2fda:	87 01       	movw	r16, r14
    2fdc:	11 96       	adiw	r26, 0x01	; 1
    2fde:	9c 91       	ld	r25, X
    2fe0:	d2 01       	movw	r26, r4
    2fe2:	11 96       	adiw	r26, 0x01	; 1
    2fe4:	8c 91       	ld	r24, X
    2fe6:	98 17       	cp	r25, r24
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <_fpadd_parts+0x1a2>
    2fea:	45 c0       	rjmp	.+138    	; 0x3076 <_fpadd_parts+0x22c>
    2fec:	99 23       	and	r25, r25
    2fee:	39 f0       	breq	.+14     	; 0x2ffe <_fpadd_parts+0x1b4>
    2ff0:	a8 01       	movw	r20, r16
    2ff2:	97 01       	movw	r18, r14
    2ff4:	2a 19       	sub	r18, r10
    2ff6:	3b 09       	sbc	r19, r11
    2ff8:	4c 09       	sbc	r20, r12
    2ffa:	5d 09       	sbc	r21, r13
    2ffc:	06 c0       	rjmp	.+12     	; 0x300a <_fpadd_parts+0x1c0>
    2ffe:	a6 01       	movw	r20, r12
    3000:	95 01       	movw	r18, r10
    3002:	2e 19       	sub	r18, r14
    3004:	3f 09       	sbc	r19, r15
    3006:	40 0b       	sbc	r20, r16
    3008:	51 0b       	sbc	r21, r17
    300a:	57 fd       	sbrc	r21, 7
    300c:	08 c0       	rjmp	.+16     	; 0x301e <_fpadd_parts+0x1d4>
    300e:	11 82       	std	Z+1, r1	; 0x01
    3010:	33 82       	std	Z+3, r3	; 0x03
    3012:	22 82       	std	Z+2, r2	; 0x02
    3014:	24 83       	std	Z+4, r18	; 0x04
    3016:	35 83       	std	Z+5, r19	; 0x05
    3018:	46 83       	std	Z+6, r20	; 0x06
    301a:	57 83       	std	Z+7, r21	; 0x07
    301c:	1d c0       	rjmp	.+58     	; 0x3058 <_fpadd_parts+0x20e>
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	81 83       	std	Z+1, r24	; 0x01
    3022:	33 82       	std	Z+3, r3	; 0x03
    3024:	22 82       	std	Z+2, r2	; 0x02
    3026:	88 27       	eor	r24, r24
    3028:	99 27       	eor	r25, r25
    302a:	dc 01       	movw	r26, r24
    302c:	82 1b       	sub	r24, r18
    302e:	93 0b       	sbc	r25, r19
    3030:	a4 0b       	sbc	r26, r20
    3032:	b5 0b       	sbc	r27, r21
    3034:	84 83       	std	Z+4, r24	; 0x04
    3036:	95 83       	std	Z+5, r25	; 0x05
    3038:	a6 83       	std	Z+6, r26	; 0x06
    303a:	b7 83       	std	Z+7, r27	; 0x07
    303c:	0d c0       	rjmp	.+26     	; 0x3058 <_fpadd_parts+0x20e>
    303e:	22 0f       	add	r18, r18
    3040:	33 1f       	adc	r19, r19
    3042:	44 1f       	adc	r20, r20
    3044:	55 1f       	adc	r21, r21
    3046:	24 83       	std	Z+4, r18	; 0x04
    3048:	35 83       	std	Z+5, r19	; 0x05
    304a:	46 83       	std	Z+6, r20	; 0x06
    304c:	57 83       	std	Z+7, r21	; 0x07
    304e:	82 81       	ldd	r24, Z+2	; 0x02
    3050:	93 81       	ldd	r25, Z+3	; 0x03
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	93 83       	std	Z+3, r25	; 0x03
    3056:	82 83       	std	Z+2, r24	; 0x02
    3058:	24 81       	ldd	r18, Z+4	; 0x04
    305a:	35 81       	ldd	r19, Z+5	; 0x05
    305c:	46 81       	ldd	r20, Z+6	; 0x06
    305e:	57 81       	ldd	r21, Z+7	; 0x07
    3060:	da 01       	movw	r26, r20
    3062:	c9 01       	movw	r24, r18
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	a1 09       	sbc	r26, r1
    3068:	b1 09       	sbc	r27, r1
    306a:	8f 5f       	subi	r24, 0xFF	; 255
    306c:	9f 4f       	sbci	r25, 0xFF	; 255
    306e:	af 4f       	sbci	r26, 0xFF	; 255
    3070:	bf 43       	sbci	r27, 0x3F	; 63
    3072:	28 f3       	brcs	.-54     	; 0x303e <_fpadd_parts+0x1f4>
    3074:	0b c0       	rjmp	.+22     	; 0x308c <_fpadd_parts+0x242>
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	33 82       	std	Z+3, r3	; 0x03
    307a:	22 82       	std	Z+2, r2	; 0x02
    307c:	ea 0c       	add	r14, r10
    307e:	fb 1c       	adc	r15, r11
    3080:	0c 1d       	adc	r16, r12
    3082:	1d 1d       	adc	r17, r13
    3084:	e4 82       	std	Z+4, r14	; 0x04
    3086:	f5 82       	std	Z+5, r15	; 0x05
    3088:	06 83       	std	Z+6, r16	; 0x06
    308a:	17 83       	std	Z+7, r17	; 0x07
    308c:	83 e0       	ldi	r24, 0x03	; 3
    308e:	80 83       	st	Z, r24
    3090:	24 81       	ldd	r18, Z+4	; 0x04
    3092:	35 81       	ldd	r19, Z+5	; 0x05
    3094:	46 81       	ldd	r20, Z+6	; 0x06
    3096:	57 81       	ldd	r21, Z+7	; 0x07
    3098:	57 ff       	sbrs	r21, 7
    309a:	1a c0       	rjmp	.+52     	; 0x30d0 <_fpadd_parts+0x286>
    309c:	c9 01       	movw	r24, r18
    309e:	aa 27       	eor	r26, r26
    30a0:	97 fd       	sbrc	r25, 7
    30a2:	a0 95       	com	r26
    30a4:	ba 2f       	mov	r27, r26
    30a6:	81 70       	andi	r24, 0x01	; 1
    30a8:	90 70       	andi	r25, 0x00	; 0
    30aa:	a0 70       	andi	r26, 0x00	; 0
    30ac:	b0 70       	andi	r27, 0x00	; 0
    30ae:	56 95       	lsr	r21
    30b0:	47 95       	ror	r20
    30b2:	37 95       	ror	r19
    30b4:	27 95       	ror	r18
    30b6:	82 2b       	or	r24, r18
    30b8:	93 2b       	or	r25, r19
    30ba:	a4 2b       	or	r26, r20
    30bc:	b5 2b       	or	r27, r21
    30be:	84 83       	std	Z+4, r24	; 0x04
    30c0:	95 83       	std	Z+5, r25	; 0x05
    30c2:	a6 83       	std	Z+6, r26	; 0x06
    30c4:	b7 83       	std	Z+7, r27	; 0x07
    30c6:	82 81       	ldd	r24, Z+2	; 0x02
    30c8:	93 81       	ldd	r25, Z+3	; 0x03
    30ca:	01 96       	adiw	r24, 0x01	; 1
    30cc:	93 83       	std	Z+3, r25	; 0x03
    30ce:	82 83       	std	Z+2, r24	; 0x02
    30d0:	df 01       	movw	r26, r30
    30d2:	01 c0       	rjmp	.+2      	; 0x30d6 <_fpadd_parts+0x28c>
    30d4:	d2 01       	movw	r26, r4
    30d6:	cd 01       	movw	r24, r26
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
    30dc:	e2 e1       	ldi	r30, 0x12	; 18
    30de:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__epilogue_restores__>

000030e2 <__subsf3>:
    30e2:	a0 e2       	ldi	r26, 0x20	; 32
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	e7 e7       	ldi	r30, 0x77	; 119
    30e8:	f8 e1       	ldi	r31, 0x18	; 24
    30ea:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__prologue_saves__+0x18>
    30ee:	69 83       	std	Y+1, r22	; 0x01
    30f0:	7a 83       	std	Y+2, r23	; 0x02
    30f2:	8b 83       	std	Y+3, r24	; 0x03
    30f4:	9c 83       	std	Y+4, r25	; 0x04
    30f6:	2d 83       	std	Y+5, r18	; 0x05
    30f8:	3e 83       	std	Y+6, r19	; 0x06
    30fa:	4f 83       	std	Y+7, r20	; 0x07
    30fc:	58 87       	std	Y+8, r21	; 0x08
    30fe:	e9 e0       	ldi	r30, 0x09	; 9
    3100:	ee 2e       	mov	r14, r30
    3102:	f1 2c       	mov	r15, r1
    3104:	ec 0e       	add	r14, r28
    3106:	fd 1e       	adc	r15, r29
    3108:	ce 01       	movw	r24, r28
    310a:	01 96       	adiw	r24, 0x01	; 1
    310c:	b7 01       	movw	r22, r14
    310e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    3112:	8e 01       	movw	r16, r28
    3114:	0f 5e       	subi	r16, 0xEF	; 239
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	ce 01       	movw	r24, r28
    311a:	05 96       	adiw	r24, 0x05	; 5
    311c:	b8 01       	movw	r22, r16
    311e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    3122:	8a 89       	ldd	r24, Y+18	; 0x12
    3124:	91 e0       	ldi	r25, 0x01	; 1
    3126:	89 27       	eor	r24, r25
    3128:	8a 8b       	std	Y+18, r24	; 0x12
    312a:	c7 01       	movw	r24, r14
    312c:	b8 01       	movw	r22, r16
    312e:	ae 01       	movw	r20, r28
    3130:	47 5e       	subi	r20, 0xE7	; 231
    3132:	5f 4f       	sbci	r21, 0xFF	; 255
    3134:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <_fpadd_parts>
    3138:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__pack_f>
    313c:	a0 96       	adiw	r28, 0x20	; 32
    313e:	e6 e0       	ldi	r30, 0x06	; 6
    3140:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__epilogue_restores__+0x18>

00003144 <__addsf3>:
    3144:	a0 e2       	ldi	r26, 0x20	; 32
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	e8 ea       	ldi	r30, 0xA8	; 168
    314a:	f8 e1       	ldi	r31, 0x18	; 24
    314c:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__prologue_saves__+0x18>
    3150:	69 83       	std	Y+1, r22	; 0x01
    3152:	7a 83       	std	Y+2, r23	; 0x02
    3154:	8b 83       	std	Y+3, r24	; 0x03
    3156:	9c 83       	std	Y+4, r25	; 0x04
    3158:	2d 83       	std	Y+5, r18	; 0x05
    315a:	3e 83       	std	Y+6, r19	; 0x06
    315c:	4f 83       	std	Y+7, r20	; 0x07
    315e:	58 87       	std	Y+8, r21	; 0x08
    3160:	f9 e0       	ldi	r31, 0x09	; 9
    3162:	ef 2e       	mov	r14, r31
    3164:	f1 2c       	mov	r15, r1
    3166:	ec 0e       	add	r14, r28
    3168:	fd 1e       	adc	r15, r29
    316a:	ce 01       	movw	r24, r28
    316c:	01 96       	adiw	r24, 0x01	; 1
    316e:	b7 01       	movw	r22, r14
    3170:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    3174:	8e 01       	movw	r16, r28
    3176:	0f 5e       	subi	r16, 0xEF	; 239
    3178:	1f 4f       	sbci	r17, 0xFF	; 255
    317a:	ce 01       	movw	r24, r28
    317c:	05 96       	adiw	r24, 0x05	; 5
    317e:	b8 01       	movw	r22, r16
    3180:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    3184:	c7 01       	movw	r24, r14
    3186:	b8 01       	movw	r22, r16
    3188:	ae 01       	movw	r20, r28
    318a:	47 5e       	subi	r20, 0xE7	; 231
    318c:	5f 4f       	sbci	r21, 0xFF	; 255
    318e:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <_fpadd_parts>
    3192:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__pack_f>
    3196:	a0 96       	adiw	r28, 0x20	; 32
    3198:	e6 e0       	ldi	r30, 0x06	; 6
    319a:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__epilogue_restores__+0x18>

0000319e <__mulsf3>:
    319e:	a0 e2       	ldi	r26, 0x20	; 32
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	e5 ed       	ldi	r30, 0xD5	; 213
    31a4:	f8 e1       	ldi	r31, 0x18	; 24
    31a6:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__prologue_saves__>
    31aa:	69 83       	std	Y+1, r22	; 0x01
    31ac:	7a 83       	std	Y+2, r23	; 0x02
    31ae:	8b 83       	std	Y+3, r24	; 0x03
    31b0:	9c 83       	std	Y+4, r25	; 0x04
    31b2:	2d 83       	std	Y+5, r18	; 0x05
    31b4:	3e 83       	std	Y+6, r19	; 0x06
    31b6:	4f 83       	std	Y+7, r20	; 0x07
    31b8:	58 87       	std	Y+8, r21	; 0x08
    31ba:	ce 01       	movw	r24, r28
    31bc:	01 96       	adiw	r24, 0x01	; 1
    31be:	be 01       	movw	r22, r28
    31c0:	67 5f       	subi	r22, 0xF7	; 247
    31c2:	7f 4f       	sbci	r23, 0xFF	; 255
    31c4:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    31c8:	ce 01       	movw	r24, r28
    31ca:	05 96       	adiw	r24, 0x05	; 5
    31cc:	be 01       	movw	r22, r28
    31ce:	6f 5e       	subi	r22, 0xEF	; 239
    31d0:	7f 4f       	sbci	r23, 0xFF	; 255
    31d2:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    31d6:	99 85       	ldd	r25, Y+9	; 0x09
    31d8:	92 30       	cpi	r25, 0x02	; 2
    31da:	88 f0       	brcs	.+34     	; 0x31fe <__mulsf3+0x60>
    31dc:	89 89       	ldd	r24, Y+17	; 0x11
    31de:	82 30       	cpi	r24, 0x02	; 2
    31e0:	c8 f0       	brcs	.+50     	; 0x3214 <__mulsf3+0x76>
    31e2:	94 30       	cpi	r25, 0x04	; 4
    31e4:	19 f4       	brne	.+6      	; 0x31ec <__mulsf3+0x4e>
    31e6:	82 30       	cpi	r24, 0x02	; 2
    31e8:	51 f4       	brne	.+20     	; 0x31fe <__mulsf3+0x60>
    31ea:	04 c0       	rjmp	.+8      	; 0x31f4 <__mulsf3+0x56>
    31ec:	84 30       	cpi	r24, 0x04	; 4
    31ee:	29 f4       	brne	.+10     	; 0x31fa <__mulsf3+0x5c>
    31f0:	92 30       	cpi	r25, 0x02	; 2
    31f2:	81 f4       	brne	.+32     	; 0x3214 <__mulsf3+0x76>
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	92 e0       	ldi	r25, 0x02	; 2
    31f8:	c6 c0       	rjmp	.+396    	; 0x3386 <__mulsf3+0x1e8>
    31fa:	92 30       	cpi	r25, 0x02	; 2
    31fc:	49 f4       	brne	.+18     	; 0x3210 <__mulsf3+0x72>
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	9a 85       	ldd	r25, Y+10	; 0x0a
    3202:	8a 89       	ldd	r24, Y+18	; 0x12
    3204:	98 13       	cpse	r25, r24
    3206:	21 e0       	ldi	r18, 0x01	; 1
    3208:	2a 87       	std	Y+10, r18	; 0x0a
    320a:	ce 01       	movw	r24, r28
    320c:	09 96       	adiw	r24, 0x09	; 9
    320e:	bb c0       	rjmp	.+374    	; 0x3386 <__mulsf3+0x1e8>
    3210:	82 30       	cpi	r24, 0x02	; 2
    3212:	49 f4       	brne	.+18     	; 0x3226 <__mulsf3+0x88>
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	9a 85       	ldd	r25, Y+10	; 0x0a
    3218:	8a 89       	ldd	r24, Y+18	; 0x12
    321a:	98 13       	cpse	r25, r24
    321c:	21 e0       	ldi	r18, 0x01	; 1
    321e:	2a 8b       	std	Y+18, r18	; 0x12
    3220:	ce 01       	movw	r24, r28
    3222:	41 96       	adiw	r24, 0x11	; 17
    3224:	b0 c0       	rjmp	.+352    	; 0x3386 <__mulsf3+0x1e8>
    3226:	2d 84       	ldd	r2, Y+13	; 0x0d
    3228:	3e 84       	ldd	r3, Y+14	; 0x0e
    322a:	4f 84       	ldd	r4, Y+15	; 0x0f
    322c:	58 88       	ldd	r5, Y+16	; 0x10
    322e:	6d 88       	ldd	r6, Y+21	; 0x15
    3230:	7e 88       	ldd	r7, Y+22	; 0x16
    3232:	8f 88       	ldd	r8, Y+23	; 0x17
    3234:	98 8c       	ldd	r9, Y+24	; 0x18
    3236:	ee 24       	eor	r14, r14
    3238:	ff 24       	eor	r15, r15
    323a:	87 01       	movw	r16, r14
    323c:	aa 24       	eor	r10, r10
    323e:	bb 24       	eor	r11, r11
    3240:	65 01       	movw	r12, r10
    3242:	40 e0       	ldi	r20, 0x00	; 0
    3244:	50 e0       	ldi	r21, 0x00	; 0
    3246:	60 e0       	ldi	r22, 0x00	; 0
    3248:	70 e0       	ldi	r23, 0x00	; 0
    324a:	e0 e0       	ldi	r30, 0x00	; 0
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	c1 01       	movw	r24, r2
    3250:	81 70       	andi	r24, 0x01	; 1
    3252:	90 70       	andi	r25, 0x00	; 0
    3254:	89 2b       	or	r24, r25
    3256:	e9 f0       	breq	.+58     	; 0x3292 <__mulsf3+0xf4>
    3258:	e6 0c       	add	r14, r6
    325a:	f7 1c       	adc	r15, r7
    325c:	08 1d       	adc	r16, r8
    325e:	19 1d       	adc	r17, r9
    3260:	9a 01       	movw	r18, r20
    3262:	ab 01       	movw	r20, r22
    3264:	2a 0d       	add	r18, r10
    3266:	3b 1d       	adc	r19, r11
    3268:	4c 1d       	adc	r20, r12
    326a:	5d 1d       	adc	r21, r13
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	a0 e0       	ldi	r26, 0x00	; 0
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e6 14       	cp	r14, r6
    3276:	f7 04       	cpc	r15, r7
    3278:	08 05       	cpc	r16, r8
    327a:	19 05       	cpc	r17, r9
    327c:	20 f4       	brcc	.+8      	; 0x3286 <__mulsf3+0xe8>
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	a0 e0       	ldi	r26, 0x00	; 0
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	ba 01       	movw	r22, r20
    3288:	a9 01       	movw	r20, r18
    328a:	48 0f       	add	r20, r24
    328c:	59 1f       	adc	r21, r25
    328e:	6a 1f       	adc	r22, r26
    3290:	7b 1f       	adc	r23, r27
    3292:	aa 0c       	add	r10, r10
    3294:	bb 1c       	adc	r11, r11
    3296:	cc 1c       	adc	r12, r12
    3298:	dd 1c       	adc	r13, r13
    329a:	97 fe       	sbrs	r9, 7
    329c:	08 c0       	rjmp	.+16     	; 0x32ae <__mulsf3+0x110>
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	a0 e0       	ldi	r26, 0x00	; 0
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	a8 2a       	or	r10, r24
    32a8:	b9 2a       	or	r11, r25
    32aa:	ca 2a       	or	r12, r26
    32ac:	db 2a       	or	r13, r27
    32ae:	31 96       	adiw	r30, 0x01	; 1
    32b0:	e0 32       	cpi	r30, 0x20	; 32
    32b2:	f1 05       	cpc	r31, r1
    32b4:	49 f0       	breq	.+18     	; 0x32c8 <__mulsf3+0x12a>
    32b6:	66 0c       	add	r6, r6
    32b8:	77 1c       	adc	r7, r7
    32ba:	88 1c       	adc	r8, r8
    32bc:	99 1c       	adc	r9, r9
    32be:	56 94       	lsr	r5
    32c0:	47 94       	ror	r4
    32c2:	37 94       	ror	r3
    32c4:	27 94       	ror	r2
    32c6:	c3 cf       	rjmp	.-122    	; 0x324e <__mulsf3+0xb0>
    32c8:	fa 85       	ldd	r31, Y+10	; 0x0a
    32ca:	ea 89       	ldd	r30, Y+18	; 0x12
    32cc:	2b 89       	ldd	r18, Y+19	; 0x13
    32ce:	3c 89       	ldd	r19, Y+20	; 0x14
    32d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    32d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    32d4:	28 0f       	add	r18, r24
    32d6:	39 1f       	adc	r19, r25
    32d8:	2e 5f       	subi	r18, 0xFE	; 254
    32da:	3f 4f       	sbci	r19, 0xFF	; 255
    32dc:	17 c0       	rjmp	.+46     	; 0x330c <__mulsf3+0x16e>
    32de:	ca 01       	movw	r24, r20
    32e0:	81 70       	andi	r24, 0x01	; 1
    32e2:	90 70       	andi	r25, 0x00	; 0
    32e4:	89 2b       	or	r24, r25
    32e6:	61 f0       	breq	.+24     	; 0x3300 <__mulsf3+0x162>
    32e8:	16 95       	lsr	r17
    32ea:	07 95       	ror	r16
    32ec:	f7 94       	ror	r15
    32ee:	e7 94       	ror	r14
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	a0 e0       	ldi	r26, 0x00	; 0
    32f6:	b0 e8       	ldi	r27, 0x80	; 128
    32f8:	e8 2a       	or	r14, r24
    32fa:	f9 2a       	or	r15, r25
    32fc:	0a 2b       	or	r16, r26
    32fe:	1b 2b       	or	r17, r27
    3300:	76 95       	lsr	r23
    3302:	67 95       	ror	r22
    3304:	57 95       	ror	r21
    3306:	47 95       	ror	r20
    3308:	2f 5f       	subi	r18, 0xFF	; 255
    330a:	3f 4f       	sbci	r19, 0xFF	; 255
    330c:	77 fd       	sbrc	r23, 7
    330e:	e7 cf       	rjmp	.-50     	; 0x32de <__mulsf3+0x140>
    3310:	0c c0       	rjmp	.+24     	; 0x332a <__mulsf3+0x18c>
    3312:	44 0f       	add	r20, r20
    3314:	55 1f       	adc	r21, r21
    3316:	66 1f       	adc	r22, r22
    3318:	77 1f       	adc	r23, r23
    331a:	17 fd       	sbrc	r17, 7
    331c:	41 60       	ori	r20, 0x01	; 1
    331e:	ee 0c       	add	r14, r14
    3320:	ff 1c       	adc	r15, r15
    3322:	00 1f       	adc	r16, r16
    3324:	11 1f       	adc	r17, r17
    3326:	21 50       	subi	r18, 0x01	; 1
    3328:	30 40       	sbci	r19, 0x00	; 0
    332a:	40 30       	cpi	r20, 0x00	; 0
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	59 07       	cpc	r21, r25
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	69 07       	cpc	r22, r25
    3334:	90 e4       	ldi	r25, 0x40	; 64
    3336:	79 07       	cpc	r23, r25
    3338:	60 f3       	brcs	.-40     	; 0x3312 <__mulsf3+0x174>
    333a:	2b 8f       	std	Y+27, r18	; 0x1b
    333c:	3c 8f       	std	Y+28, r19	; 0x1c
    333e:	db 01       	movw	r26, r22
    3340:	ca 01       	movw	r24, r20
    3342:	8f 77       	andi	r24, 0x7F	; 127
    3344:	90 70       	andi	r25, 0x00	; 0
    3346:	a0 70       	andi	r26, 0x00	; 0
    3348:	b0 70       	andi	r27, 0x00	; 0
    334a:	80 34       	cpi	r24, 0x40	; 64
    334c:	91 05       	cpc	r25, r1
    334e:	a1 05       	cpc	r26, r1
    3350:	b1 05       	cpc	r27, r1
    3352:	61 f4       	brne	.+24     	; 0x336c <__mulsf3+0x1ce>
    3354:	47 fd       	sbrc	r20, 7
    3356:	0a c0       	rjmp	.+20     	; 0x336c <__mulsf3+0x1ce>
    3358:	e1 14       	cp	r14, r1
    335a:	f1 04       	cpc	r15, r1
    335c:	01 05       	cpc	r16, r1
    335e:	11 05       	cpc	r17, r1
    3360:	29 f0       	breq	.+10     	; 0x336c <__mulsf3+0x1ce>
    3362:	40 5c       	subi	r20, 0xC0	; 192
    3364:	5f 4f       	sbci	r21, 0xFF	; 255
    3366:	6f 4f       	sbci	r22, 0xFF	; 255
    3368:	7f 4f       	sbci	r23, 0xFF	; 255
    336a:	40 78       	andi	r20, 0x80	; 128
    336c:	1a 8e       	std	Y+26, r1	; 0x1a
    336e:	fe 17       	cp	r31, r30
    3370:	11 f0       	breq	.+4      	; 0x3376 <__mulsf3+0x1d8>
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	8a 8f       	std	Y+26, r24	; 0x1a
    3376:	4d 8f       	std	Y+29, r20	; 0x1d
    3378:	5e 8f       	std	Y+30, r21	; 0x1e
    337a:	6f 8f       	std	Y+31, r22	; 0x1f
    337c:	78 a3       	std	Y+32, r23	; 0x20
    337e:	83 e0       	ldi	r24, 0x03	; 3
    3380:	89 8f       	std	Y+25, r24	; 0x19
    3382:	ce 01       	movw	r24, r28
    3384:	49 96       	adiw	r24, 0x19	; 25
    3386:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__pack_f>
    338a:	a0 96       	adiw	r28, 0x20	; 32
    338c:	e2 e1       	ldi	r30, 0x12	; 18
    338e:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__epilogue_restores__>

00003392 <__divsf3>:
    3392:	a8 e1       	ldi	r26, 0x18	; 24
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	ef ec       	ldi	r30, 0xCF	; 207
    3398:	f9 e1       	ldi	r31, 0x19	; 25
    339a:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x10>
    339e:	69 83       	std	Y+1, r22	; 0x01
    33a0:	7a 83       	std	Y+2, r23	; 0x02
    33a2:	8b 83       	std	Y+3, r24	; 0x03
    33a4:	9c 83       	std	Y+4, r25	; 0x04
    33a6:	2d 83       	std	Y+5, r18	; 0x05
    33a8:	3e 83       	std	Y+6, r19	; 0x06
    33aa:	4f 83       	std	Y+7, r20	; 0x07
    33ac:	58 87       	std	Y+8, r21	; 0x08
    33ae:	b9 e0       	ldi	r27, 0x09	; 9
    33b0:	eb 2e       	mov	r14, r27
    33b2:	f1 2c       	mov	r15, r1
    33b4:	ec 0e       	add	r14, r28
    33b6:	fd 1e       	adc	r15, r29
    33b8:	ce 01       	movw	r24, r28
    33ba:	01 96       	adiw	r24, 0x01	; 1
    33bc:	b7 01       	movw	r22, r14
    33be:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    33c2:	8e 01       	movw	r16, r28
    33c4:	0f 5e       	subi	r16, 0xEF	; 239
    33c6:	1f 4f       	sbci	r17, 0xFF	; 255
    33c8:	ce 01       	movw	r24, r28
    33ca:	05 96       	adiw	r24, 0x05	; 5
    33cc:	b8 01       	movw	r22, r16
    33ce:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    33d2:	29 85       	ldd	r18, Y+9	; 0x09
    33d4:	22 30       	cpi	r18, 0x02	; 2
    33d6:	08 f4       	brcc	.+2      	; 0x33da <__divsf3+0x48>
    33d8:	7e c0       	rjmp	.+252    	; 0x34d6 <__divsf3+0x144>
    33da:	39 89       	ldd	r19, Y+17	; 0x11
    33dc:	32 30       	cpi	r19, 0x02	; 2
    33de:	10 f4       	brcc	.+4      	; 0x33e4 <__divsf3+0x52>
    33e0:	b8 01       	movw	r22, r16
    33e2:	7c c0       	rjmp	.+248    	; 0x34dc <__divsf3+0x14a>
    33e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    33e6:	9a 89       	ldd	r25, Y+18	; 0x12
    33e8:	89 27       	eor	r24, r25
    33ea:	8a 87       	std	Y+10, r24	; 0x0a
    33ec:	24 30       	cpi	r18, 0x04	; 4
    33ee:	11 f0       	breq	.+4      	; 0x33f4 <__divsf3+0x62>
    33f0:	22 30       	cpi	r18, 0x02	; 2
    33f2:	31 f4       	brne	.+12     	; 0x3400 <__divsf3+0x6e>
    33f4:	23 17       	cp	r18, r19
    33f6:	09 f0       	breq	.+2      	; 0x33fa <__divsf3+0x68>
    33f8:	6e c0       	rjmp	.+220    	; 0x34d6 <__divsf3+0x144>
    33fa:	60 e0       	ldi	r22, 0x00	; 0
    33fc:	72 e0       	ldi	r23, 0x02	; 2
    33fe:	6e c0       	rjmp	.+220    	; 0x34dc <__divsf3+0x14a>
    3400:	34 30       	cpi	r19, 0x04	; 4
    3402:	39 f4       	brne	.+14     	; 0x3412 <__divsf3+0x80>
    3404:	1d 86       	std	Y+13, r1	; 0x0d
    3406:	1e 86       	std	Y+14, r1	; 0x0e
    3408:	1f 86       	std	Y+15, r1	; 0x0f
    340a:	18 8a       	std	Y+16, r1	; 0x10
    340c:	1c 86       	std	Y+12, r1	; 0x0c
    340e:	1b 86       	std	Y+11, r1	; 0x0b
    3410:	04 c0       	rjmp	.+8      	; 0x341a <__divsf3+0x88>
    3412:	32 30       	cpi	r19, 0x02	; 2
    3414:	21 f4       	brne	.+8      	; 0x341e <__divsf3+0x8c>
    3416:	84 e0       	ldi	r24, 0x04	; 4
    3418:	89 87       	std	Y+9, r24	; 0x09
    341a:	b7 01       	movw	r22, r14
    341c:	5f c0       	rjmp	.+190    	; 0x34dc <__divsf3+0x14a>
    341e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3420:	3c 85       	ldd	r19, Y+12	; 0x0c
    3422:	8b 89       	ldd	r24, Y+19	; 0x13
    3424:	9c 89       	ldd	r25, Y+20	; 0x14
    3426:	28 1b       	sub	r18, r24
    3428:	39 0b       	sbc	r19, r25
    342a:	3c 87       	std	Y+12, r19	; 0x0c
    342c:	2b 87       	std	Y+11, r18	; 0x0b
    342e:	ed 84       	ldd	r14, Y+13	; 0x0d
    3430:	fe 84       	ldd	r15, Y+14	; 0x0e
    3432:	0f 85       	ldd	r16, Y+15	; 0x0f
    3434:	18 89       	ldd	r17, Y+16	; 0x10
    3436:	ad 88       	ldd	r10, Y+21	; 0x15
    3438:	be 88       	ldd	r11, Y+22	; 0x16
    343a:	cf 88       	ldd	r12, Y+23	; 0x17
    343c:	d8 8c       	ldd	r13, Y+24	; 0x18
    343e:	ea 14       	cp	r14, r10
    3440:	fb 04       	cpc	r15, r11
    3442:	0c 05       	cpc	r16, r12
    3444:	1d 05       	cpc	r17, r13
    3446:	40 f4       	brcc	.+16     	; 0x3458 <__divsf3+0xc6>
    3448:	ee 0c       	add	r14, r14
    344a:	ff 1c       	adc	r15, r15
    344c:	00 1f       	adc	r16, r16
    344e:	11 1f       	adc	r17, r17
    3450:	21 50       	subi	r18, 0x01	; 1
    3452:	30 40       	sbci	r19, 0x00	; 0
    3454:	3c 87       	std	Y+12, r19	; 0x0c
    3456:	2b 87       	std	Y+11, r18	; 0x0b
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	40 e0       	ldi	r20, 0x00	; 0
    345e:	50 e0       	ldi	r21, 0x00	; 0
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	a0 e0       	ldi	r26, 0x00	; 0
    3466:	b0 e4       	ldi	r27, 0x40	; 64
    3468:	60 e0       	ldi	r22, 0x00	; 0
    346a:	70 e0       	ldi	r23, 0x00	; 0
    346c:	ea 14       	cp	r14, r10
    346e:	fb 04       	cpc	r15, r11
    3470:	0c 05       	cpc	r16, r12
    3472:	1d 05       	cpc	r17, r13
    3474:	40 f0       	brcs	.+16     	; 0x3486 <__divsf3+0xf4>
    3476:	28 2b       	or	r18, r24
    3478:	39 2b       	or	r19, r25
    347a:	4a 2b       	or	r20, r26
    347c:	5b 2b       	or	r21, r27
    347e:	ea 18       	sub	r14, r10
    3480:	fb 08       	sbc	r15, r11
    3482:	0c 09       	sbc	r16, r12
    3484:	1d 09       	sbc	r17, r13
    3486:	b6 95       	lsr	r27
    3488:	a7 95       	ror	r26
    348a:	97 95       	ror	r25
    348c:	87 95       	ror	r24
    348e:	ee 0c       	add	r14, r14
    3490:	ff 1c       	adc	r15, r15
    3492:	00 1f       	adc	r16, r16
    3494:	11 1f       	adc	r17, r17
    3496:	6f 5f       	subi	r22, 0xFF	; 255
    3498:	7f 4f       	sbci	r23, 0xFF	; 255
    349a:	6f 31       	cpi	r22, 0x1F	; 31
    349c:	71 05       	cpc	r23, r1
    349e:	31 f7       	brne	.-52     	; 0x346c <__divsf3+0xda>
    34a0:	da 01       	movw	r26, r20
    34a2:	c9 01       	movw	r24, r18
    34a4:	8f 77       	andi	r24, 0x7F	; 127
    34a6:	90 70       	andi	r25, 0x00	; 0
    34a8:	a0 70       	andi	r26, 0x00	; 0
    34aa:	b0 70       	andi	r27, 0x00	; 0
    34ac:	80 34       	cpi	r24, 0x40	; 64
    34ae:	91 05       	cpc	r25, r1
    34b0:	a1 05       	cpc	r26, r1
    34b2:	b1 05       	cpc	r27, r1
    34b4:	61 f4       	brne	.+24     	; 0x34ce <__divsf3+0x13c>
    34b6:	27 fd       	sbrc	r18, 7
    34b8:	0a c0       	rjmp	.+20     	; 0x34ce <__divsf3+0x13c>
    34ba:	e1 14       	cp	r14, r1
    34bc:	f1 04       	cpc	r15, r1
    34be:	01 05       	cpc	r16, r1
    34c0:	11 05       	cpc	r17, r1
    34c2:	29 f0       	breq	.+10     	; 0x34ce <__divsf3+0x13c>
    34c4:	20 5c       	subi	r18, 0xC0	; 192
    34c6:	3f 4f       	sbci	r19, 0xFF	; 255
    34c8:	4f 4f       	sbci	r20, 0xFF	; 255
    34ca:	5f 4f       	sbci	r21, 0xFF	; 255
    34cc:	20 78       	andi	r18, 0x80	; 128
    34ce:	2d 87       	std	Y+13, r18	; 0x0d
    34d0:	3e 87       	std	Y+14, r19	; 0x0e
    34d2:	4f 87       	std	Y+15, r20	; 0x0f
    34d4:	58 8b       	std	Y+16, r21	; 0x10
    34d6:	be 01       	movw	r22, r28
    34d8:	67 5f       	subi	r22, 0xF7	; 247
    34da:	7f 4f       	sbci	r23, 0xFF	; 255
    34dc:	cb 01       	movw	r24, r22
    34de:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__pack_f>
    34e2:	68 96       	adiw	r28, 0x18	; 24
    34e4:	ea e0       	ldi	r30, 0x0A	; 10
    34e6:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x10>

000034ea <__gtsf2>:
    34ea:	a8 e1       	ldi	r26, 0x18	; 24
    34ec:	b0 e0       	ldi	r27, 0x00	; 0
    34ee:	eb e7       	ldi	r30, 0x7B	; 123
    34f0:	fa e1       	ldi	r31, 0x1A	; 26
    34f2:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__prologue_saves__+0x18>
    34f6:	69 83       	std	Y+1, r22	; 0x01
    34f8:	7a 83       	std	Y+2, r23	; 0x02
    34fa:	8b 83       	std	Y+3, r24	; 0x03
    34fc:	9c 83       	std	Y+4, r25	; 0x04
    34fe:	2d 83       	std	Y+5, r18	; 0x05
    3500:	3e 83       	std	Y+6, r19	; 0x06
    3502:	4f 83       	std	Y+7, r20	; 0x07
    3504:	58 87       	std	Y+8, r21	; 0x08
    3506:	89 e0       	ldi	r24, 0x09	; 9
    3508:	e8 2e       	mov	r14, r24
    350a:	f1 2c       	mov	r15, r1
    350c:	ec 0e       	add	r14, r28
    350e:	fd 1e       	adc	r15, r29
    3510:	ce 01       	movw	r24, r28
    3512:	01 96       	adiw	r24, 0x01	; 1
    3514:	b7 01       	movw	r22, r14
    3516:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    351a:	8e 01       	movw	r16, r28
    351c:	0f 5e       	subi	r16, 0xEF	; 239
    351e:	1f 4f       	sbci	r17, 0xFF	; 255
    3520:	ce 01       	movw	r24, r28
    3522:	05 96       	adiw	r24, 0x05	; 5
    3524:	b8 01       	movw	r22, r16
    3526:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    352a:	89 85       	ldd	r24, Y+9	; 0x09
    352c:	82 30       	cpi	r24, 0x02	; 2
    352e:	40 f0       	brcs	.+16     	; 0x3540 <__gtsf2+0x56>
    3530:	89 89       	ldd	r24, Y+17	; 0x11
    3532:	82 30       	cpi	r24, 0x02	; 2
    3534:	28 f0       	brcs	.+10     	; 0x3540 <__gtsf2+0x56>
    3536:	c7 01       	movw	r24, r14
    3538:	b8 01       	movw	r22, r16
    353a:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__fpcmp_parts_f>
    353e:	01 c0       	rjmp	.+2      	; 0x3542 <__gtsf2+0x58>
    3540:	8f ef       	ldi	r24, 0xFF	; 255
    3542:	68 96       	adiw	r28, 0x18	; 24
    3544:	e6 e0       	ldi	r30, 0x06	; 6
    3546:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__epilogue_restores__+0x18>

0000354a <__gesf2>:
    354a:	a8 e1       	ldi	r26, 0x18	; 24
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	eb ea       	ldi	r30, 0xAB	; 171
    3550:	fa e1       	ldi	r31, 0x1A	; 26
    3552:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__prologue_saves__+0x18>
    3556:	69 83       	std	Y+1, r22	; 0x01
    3558:	7a 83       	std	Y+2, r23	; 0x02
    355a:	8b 83       	std	Y+3, r24	; 0x03
    355c:	9c 83       	std	Y+4, r25	; 0x04
    355e:	2d 83       	std	Y+5, r18	; 0x05
    3560:	3e 83       	std	Y+6, r19	; 0x06
    3562:	4f 83       	std	Y+7, r20	; 0x07
    3564:	58 87       	std	Y+8, r21	; 0x08
    3566:	89 e0       	ldi	r24, 0x09	; 9
    3568:	e8 2e       	mov	r14, r24
    356a:	f1 2c       	mov	r15, r1
    356c:	ec 0e       	add	r14, r28
    356e:	fd 1e       	adc	r15, r29
    3570:	ce 01       	movw	r24, r28
    3572:	01 96       	adiw	r24, 0x01	; 1
    3574:	b7 01       	movw	r22, r14
    3576:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    357a:	8e 01       	movw	r16, r28
    357c:	0f 5e       	subi	r16, 0xEF	; 239
    357e:	1f 4f       	sbci	r17, 0xFF	; 255
    3580:	ce 01       	movw	r24, r28
    3582:	05 96       	adiw	r24, 0x05	; 5
    3584:	b8 01       	movw	r22, r16
    3586:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    358a:	89 85       	ldd	r24, Y+9	; 0x09
    358c:	82 30       	cpi	r24, 0x02	; 2
    358e:	40 f0       	brcs	.+16     	; 0x35a0 <__gesf2+0x56>
    3590:	89 89       	ldd	r24, Y+17	; 0x11
    3592:	82 30       	cpi	r24, 0x02	; 2
    3594:	28 f0       	brcs	.+10     	; 0x35a0 <__gesf2+0x56>
    3596:	c7 01       	movw	r24, r14
    3598:	b8 01       	movw	r22, r16
    359a:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__fpcmp_parts_f>
    359e:	01 c0       	rjmp	.+2      	; 0x35a2 <__gesf2+0x58>
    35a0:	8f ef       	ldi	r24, 0xFF	; 255
    35a2:	68 96       	adiw	r28, 0x18	; 24
    35a4:	e6 e0       	ldi	r30, 0x06	; 6
    35a6:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__epilogue_restores__+0x18>

000035aa <__ltsf2>:
    35aa:	a8 e1       	ldi	r26, 0x18	; 24
    35ac:	b0 e0       	ldi	r27, 0x00	; 0
    35ae:	eb ed       	ldi	r30, 0xDB	; 219
    35b0:	fa e1       	ldi	r31, 0x1A	; 26
    35b2:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__prologue_saves__+0x18>
    35b6:	69 83       	std	Y+1, r22	; 0x01
    35b8:	7a 83       	std	Y+2, r23	; 0x02
    35ba:	8b 83       	std	Y+3, r24	; 0x03
    35bc:	9c 83       	std	Y+4, r25	; 0x04
    35be:	2d 83       	std	Y+5, r18	; 0x05
    35c0:	3e 83       	std	Y+6, r19	; 0x06
    35c2:	4f 83       	std	Y+7, r20	; 0x07
    35c4:	58 87       	std	Y+8, r21	; 0x08
    35c6:	89 e0       	ldi	r24, 0x09	; 9
    35c8:	e8 2e       	mov	r14, r24
    35ca:	f1 2c       	mov	r15, r1
    35cc:	ec 0e       	add	r14, r28
    35ce:	fd 1e       	adc	r15, r29
    35d0:	ce 01       	movw	r24, r28
    35d2:	01 96       	adiw	r24, 0x01	; 1
    35d4:	b7 01       	movw	r22, r14
    35d6:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    35da:	8e 01       	movw	r16, r28
    35dc:	0f 5e       	subi	r16, 0xEF	; 239
    35de:	1f 4f       	sbci	r17, 0xFF	; 255
    35e0:	ce 01       	movw	r24, r28
    35e2:	05 96       	adiw	r24, 0x05	; 5
    35e4:	b8 01       	movw	r22, r16
    35e6:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    35ea:	89 85       	ldd	r24, Y+9	; 0x09
    35ec:	82 30       	cpi	r24, 0x02	; 2
    35ee:	40 f0       	brcs	.+16     	; 0x3600 <__ltsf2+0x56>
    35f0:	89 89       	ldd	r24, Y+17	; 0x11
    35f2:	82 30       	cpi	r24, 0x02	; 2
    35f4:	28 f0       	brcs	.+10     	; 0x3600 <__ltsf2+0x56>
    35f6:	c7 01       	movw	r24, r14
    35f8:	b8 01       	movw	r22, r16
    35fa:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__fpcmp_parts_f>
    35fe:	01 c0       	rjmp	.+2      	; 0x3602 <__ltsf2+0x58>
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	68 96       	adiw	r28, 0x18	; 24
    3604:	e6 e0       	ldi	r30, 0x06	; 6
    3606:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__epilogue_restores__+0x18>

0000360a <__floatsisf>:
    360a:	a8 e0       	ldi	r26, 0x08	; 8
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	eb e0       	ldi	r30, 0x0B	; 11
    3610:	fb e1       	ldi	r31, 0x1B	; 27
    3612:	0c 94 55 1e 	jmp	0x3caa	; 0x3caa <__prologue_saves__+0x12>
    3616:	9b 01       	movw	r18, r22
    3618:	ac 01       	movw	r20, r24
    361a:	83 e0       	ldi	r24, 0x03	; 3
    361c:	89 83       	std	Y+1, r24	; 0x01
    361e:	da 01       	movw	r26, r20
    3620:	c9 01       	movw	r24, r18
    3622:	88 27       	eor	r24, r24
    3624:	b7 fd       	sbrc	r27, 7
    3626:	83 95       	inc	r24
    3628:	99 27       	eor	r25, r25
    362a:	aa 27       	eor	r26, r26
    362c:	bb 27       	eor	r27, r27
    362e:	b8 2e       	mov	r11, r24
    3630:	21 15       	cp	r18, r1
    3632:	31 05       	cpc	r19, r1
    3634:	41 05       	cpc	r20, r1
    3636:	51 05       	cpc	r21, r1
    3638:	19 f4       	brne	.+6      	; 0x3640 <__floatsisf+0x36>
    363a:	82 e0       	ldi	r24, 0x02	; 2
    363c:	89 83       	std	Y+1, r24	; 0x01
    363e:	3a c0       	rjmp	.+116    	; 0x36b4 <__floatsisf+0xaa>
    3640:	88 23       	and	r24, r24
    3642:	a9 f0       	breq	.+42     	; 0x366e <__floatsisf+0x64>
    3644:	20 30       	cpi	r18, 0x00	; 0
    3646:	80 e0       	ldi	r24, 0x00	; 0
    3648:	38 07       	cpc	r19, r24
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	48 07       	cpc	r20, r24
    364e:	80 e8       	ldi	r24, 0x80	; 128
    3650:	58 07       	cpc	r21, r24
    3652:	29 f4       	brne	.+10     	; 0x365e <__floatsisf+0x54>
    3654:	60 e0       	ldi	r22, 0x00	; 0
    3656:	70 e0       	ldi	r23, 0x00	; 0
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	9f ec       	ldi	r25, 0xCF	; 207
    365c:	30 c0       	rjmp	.+96     	; 0x36be <__floatsisf+0xb4>
    365e:	ee 24       	eor	r14, r14
    3660:	ff 24       	eor	r15, r15
    3662:	87 01       	movw	r16, r14
    3664:	e2 1a       	sub	r14, r18
    3666:	f3 0a       	sbc	r15, r19
    3668:	04 0b       	sbc	r16, r20
    366a:	15 0b       	sbc	r17, r21
    366c:	02 c0       	rjmp	.+4      	; 0x3672 <__floatsisf+0x68>
    366e:	79 01       	movw	r14, r18
    3670:	8a 01       	movw	r16, r20
    3672:	8e e1       	ldi	r24, 0x1E	; 30
    3674:	c8 2e       	mov	r12, r24
    3676:	d1 2c       	mov	r13, r1
    3678:	dc 82       	std	Y+4, r13	; 0x04
    367a:	cb 82       	std	Y+3, r12	; 0x03
    367c:	ed 82       	std	Y+5, r14	; 0x05
    367e:	fe 82       	std	Y+6, r15	; 0x06
    3680:	0f 83       	std	Y+7, r16	; 0x07
    3682:	18 87       	std	Y+8, r17	; 0x08
    3684:	c8 01       	movw	r24, r16
    3686:	b7 01       	movw	r22, r14
    3688:	0e 94 30 1c 	call	0x3860	; 0x3860 <__clzsi2>
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	18 16       	cp	r1, r24
    3690:	19 06       	cpc	r1, r25
    3692:	84 f4       	brge	.+32     	; 0x36b4 <__floatsisf+0xaa>
    3694:	08 2e       	mov	r0, r24
    3696:	04 c0       	rjmp	.+8      	; 0x36a0 <__floatsisf+0x96>
    3698:	ee 0c       	add	r14, r14
    369a:	ff 1c       	adc	r15, r15
    369c:	00 1f       	adc	r16, r16
    369e:	11 1f       	adc	r17, r17
    36a0:	0a 94       	dec	r0
    36a2:	d2 f7       	brpl	.-12     	; 0x3698 <__floatsisf+0x8e>
    36a4:	ed 82       	std	Y+5, r14	; 0x05
    36a6:	fe 82       	std	Y+6, r15	; 0x06
    36a8:	0f 83       	std	Y+7, r16	; 0x07
    36aa:	18 87       	std	Y+8, r17	; 0x08
    36ac:	c8 1a       	sub	r12, r24
    36ae:	d9 0a       	sbc	r13, r25
    36b0:	dc 82       	std	Y+4, r13	; 0x04
    36b2:	cb 82       	std	Y+3, r12	; 0x03
    36b4:	ba 82       	std	Y+2, r11	; 0x02
    36b6:	ce 01       	movw	r24, r28
    36b8:	01 96       	adiw	r24, 0x01	; 1
    36ba:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__pack_f>
    36be:	28 96       	adiw	r28, 0x08	; 8
    36c0:	e9 e0       	ldi	r30, 0x09	; 9
    36c2:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <__epilogue_restores__+0x12>

000036c6 <__fixsfsi>:
    36c6:	ac e0       	ldi	r26, 0x0C	; 12
    36c8:	b0 e0       	ldi	r27, 0x00	; 0
    36ca:	e9 e6       	ldi	r30, 0x69	; 105
    36cc:	fb e1       	ldi	r31, 0x1B	; 27
    36ce:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__prologue_saves__+0x20>
    36d2:	69 83       	std	Y+1, r22	; 0x01
    36d4:	7a 83       	std	Y+2, r23	; 0x02
    36d6:	8b 83       	std	Y+3, r24	; 0x03
    36d8:	9c 83       	std	Y+4, r25	; 0x04
    36da:	ce 01       	movw	r24, r28
    36dc:	01 96       	adiw	r24, 0x01	; 1
    36de:	be 01       	movw	r22, r28
    36e0:	6b 5f       	subi	r22, 0xFB	; 251
    36e2:	7f 4f       	sbci	r23, 0xFF	; 255
    36e4:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__unpack_f>
    36e8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ea:	82 30       	cpi	r24, 0x02	; 2
    36ec:	61 f1       	breq	.+88     	; 0x3746 <__fixsfsi+0x80>
    36ee:	82 30       	cpi	r24, 0x02	; 2
    36f0:	50 f1       	brcs	.+84     	; 0x3746 <__fixsfsi+0x80>
    36f2:	84 30       	cpi	r24, 0x04	; 4
    36f4:	21 f4       	brne	.+8      	; 0x36fe <__fixsfsi+0x38>
    36f6:	8e 81       	ldd	r24, Y+6	; 0x06
    36f8:	88 23       	and	r24, r24
    36fa:	51 f1       	breq	.+84     	; 0x3750 <__fixsfsi+0x8a>
    36fc:	2e c0       	rjmp	.+92     	; 0x375a <__fixsfsi+0x94>
    36fe:	2f 81       	ldd	r18, Y+7	; 0x07
    3700:	38 85       	ldd	r19, Y+8	; 0x08
    3702:	37 fd       	sbrc	r19, 7
    3704:	20 c0       	rjmp	.+64     	; 0x3746 <__fixsfsi+0x80>
    3706:	6e 81       	ldd	r22, Y+6	; 0x06
    3708:	2f 31       	cpi	r18, 0x1F	; 31
    370a:	31 05       	cpc	r19, r1
    370c:	1c f0       	brlt	.+6      	; 0x3714 <__fixsfsi+0x4e>
    370e:	66 23       	and	r22, r22
    3710:	f9 f0       	breq	.+62     	; 0x3750 <__fixsfsi+0x8a>
    3712:	23 c0       	rjmp	.+70     	; 0x375a <__fixsfsi+0x94>
    3714:	8e e1       	ldi	r24, 0x1E	; 30
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	82 1b       	sub	r24, r18
    371a:	93 0b       	sbc	r25, r19
    371c:	29 85       	ldd	r18, Y+9	; 0x09
    371e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3720:	4b 85       	ldd	r20, Y+11	; 0x0b
    3722:	5c 85       	ldd	r21, Y+12	; 0x0c
    3724:	04 c0       	rjmp	.+8      	; 0x372e <__fixsfsi+0x68>
    3726:	56 95       	lsr	r21
    3728:	47 95       	ror	r20
    372a:	37 95       	ror	r19
    372c:	27 95       	ror	r18
    372e:	8a 95       	dec	r24
    3730:	d2 f7       	brpl	.-12     	; 0x3726 <__fixsfsi+0x60>
    3732:	66 23       	and	r22, r22
    3734:	b1 f0       	breq	.+44     	; 0x3762 <__fixsfsi+0x9c>
    3736:	50 95       	com	r21
    3738:	40 95       	com	r20
    373a:	30 95       	com	r19
    373c:	21 95       	neg	r18
    373e:	3f 4f       	sbci	r19, 0xFF	; 255
    3740:	4f 4f       	sbci	r20, 0xFF	; 255
    3742:	5f 4f       	sbci	r21, 0xFF	; 255
    3744:	0e c0       	rjmp	.+28     	; 0x3762 <__fixsfsi+0x9c>
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	50 e0       	ldi	r21, 0x00	; 0
    374e:	09 c0       	rjmp	.+18     	; 0x3762 <__fixsfsi+0x9c>
    3750:	2f ef       	ldi	r18, 0xFF	; 255
    3752:	3f ef       	ldi	r19, 0xFF	; 255
    3754:	4f ef       	ldi	r20, 0xFF	; 255
    3756:	5f e7       	ldi	r21, 0x7F	; 127
    3758:	04 c0       	rjmp	.+8      	; 0x3762 <__fixsfsi+0x9c>
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e0       	ldi	r20, 0x00	; 0
    3760:	50 e8       	ldi	r21, 0x80	; 128
    3762:	b9 01       	movw	r22, r18
    3764:	ca 01       	movw	r24, r20
    3766:	2c 96       	adiw	r28, 0x0c	; 12
    3768:	e2 e0       	ldi	r30, 0x02	; 2
    376a:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__epilogue_restores__+0x20>

0000376e <__floatunsisf>:
    376e:	a8 e0       	ldi	r26, 0x08	; 8
    3770:	b0 e0       	ldi	r27, 0x00	; 0
    3772:	ed eb       	ldi	r30, 0xBD	; 189
    3774:	fb e1       	ldi	r31, 0x1B	; 27
    3776:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x10>
    377a:	7b 01       	movw	r14, r22
    377c:	8c 01       	movw	r16, r24
    377e:	61 15       	cp	r22, r1
    3780:	71 05       	cpc	r23, r1
    3782:	81 05       	cpc	r24, r1
    3784:	91 05       	cpc	r25, r1
    3786:	19 f4       	brne	.+6      	; 0x378e <__floatunsisf+0x20>
    3788:	82 e0       	ldi	r24, 0x02	; 2
    378a:	89 83       	std	Y+1, r24	; 0x01
    378c:	60 c0       	rjmp	.+192    	; 0x384e <__floatunsisf+0xe0>
    378e:	83 e0       	ldi	r24, 0x03	; 3
    3790:	89 83       	std	Y+1, r24	; 0x01
    3792:	8e e1       	ldi	r24, 0x1E	; 30
    3794:	c8 2e       	mov	r12, r24
    3796:	d1 2c       	mov	r13, r1
    3798:	dc 82       	std	Y+4, r13	; 0x04
    379a:	cb 82       	std	Y+3, r12	; 0x03
    379c:	ed 82       	std	Y+5, r14	; 0x05
    379e:	fe 82       	std	Y+6, r15	; 0x06
    37a0:	0f 83       	std	Y+7, r16	; 0x07
    37a2:	18 87       	std	Y+8, r17	; 0x08
    37a4:	c8 01       	movw	r24, r16
    37a6:	b7 01       	movw	r22, r14
    37a8:	0e 94 30 1c 	call	0x3860	; 0x3860 <__clzsi2>
    37ac:	fc 01       	movw	r30, r24
    37ae:	31 97       	sbiw	r30, 0x01	; 1
    37b0:	f7 ff       	sbrs	r31, 7
    37b2:	3b c0       	rjmp	.+118    	; 0x382a <__floatunsisf+0xbc>
    37b4:	22 27       	eor	r18, r18
    37b6:	33 27       	eor	r19, r19
    37b8:	2e 1b       	sub	r18, r30
    37ba:	3f 0b       	sbc	r19, r31
    37bc:	57 01       	movw	r10, r14
    37be:	68 01       	movw	r12, r16
    37c0:	02 2e       	mov	r0, r18
    37c2:	04 c0       	rjmp	.+8      	; 0x37cc <__floatunsisf+0x5e>
    37c4:	d6 94       	lsr	r13
    37c6:	c7 94       	ror	r12
    37c8:	b7 94       	ror	r11
    37ca:	a7 94       	ror	r10
    37cc:	0a 94       	dec	r0
    37ce:	d2 f7       	brpl	.-12     	; 0x37c4 <__floatunsisf+0x56>
    37d0:	40 e0       	ldi	r20, 0x00	; 0
    37d2:	50 e0       	ldi	r21, 0x00	; 0
    37d4:	60 e0       	ldi	r22, 0x00	; 0
    37d6:	70 e0       	ldi	r23, 0x00	; 0
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	a0 e0       	ldi	r26, 0x00	; 0
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	04 c0       	rjmp	.+8      	; 0x37ea <__floatunsisf+0x7c>
    37e2:	88 0f       	add	r24, r24
    37e4:	99 1f       	adc	r25, r25
    37e6:	aa 1f       	adc	r26, r26
    37e8:	bb 1f       	adc	r27, r27
    37ea:	2a 95       	dec	r18
    37ec:	d2 f7       	brpl	.-12     	; 0x37e2 <__floatunsisf+0x74>
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	a1 09       	sbc	r26, r1
    37f2:	b1 09       	sbc	r27, r1
    37f4:	8e 21       	and	r24, r14
    37f6:	9f 21       	and	r25, r15
    37f8:	a0 23       	and	r26, r16
    37fa:	b1 23       	and	r27, r17
    37fc:	00 97       	sbiw	r24, 0x00	; 0
    37fe:	a1 05       	cpc	r26, r1
    3800:	b1 05       	cpc	r27, r1
    3802:	21 f0       	breq	.+8      	; 0x380c <__floatunsisf+0x9e>
    3804:	41 e0       	ldi	r20, 0x01	; 1
    3806:	50 e0       	ldi	r21, 0x00	; 0
    3808:	60 e0       	ldi	r22, 0x00	; 0
    380a:	70 e0       	ldi	r23, 0x00	; 0
    380c:	4a 29       	or	r20, r10
    380e:	5b 29       	or	r21, r11
    3810:	6c 29       	or	r22, r12
    3812:	7d 29       	or	r23, r13
    3814:	4d 83       	std	Y+5, r20	; 0x05
    3816:	5e 83       	std	Y+6, r21	; 0x06
    3818:	6f 83       	std	Y+7, r22	; 0x07
    381a:	78 87       	std	Y+8, r23	; 0x08
    381c:	8e e1       	ldi	r24, 0x1E	; 30
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	8e 1b       	sub	r24, r30
    3822:	9f 0b       	sbc	r25, r31
    3824:	9c 83       	std	Y+4, r25	; 0x04
    3826:	8b 83       	std	Y+3, r24	; 0x03
    3828:	12 c0       	rjmp	.+36     	; 0x384e <__floatunsisf+0xe0>
    382a:	30 97       	sbiw	r30, 0x00	; 0
    382c:	81 f0       	breq	.+32     	; 0x384e <__floatunsisf+0xe0>
    382e:	0e 2e       	mov	r0, r30
    3830:	04 c0       	rjmp	.+8      	; 0x383a <__floatunsisf+0xcc>
    3832:	ee 0c       	add	r14, r14
    3834:	ff 1c       	adc	r15, r15
    3836:	00 1f       	adc	r16, r16
    3838:	11 1f       	adc	r17, r17
    383a:	0a 94       	dec	r0
    383c:	d2 f7       	brpl	.-12     	; 0x3832 <__floatunsisf+0xc4>
    383e:	ed 82       	std	Y+5, r14	; 0x05
    3840:	fe 82       	std	Y+6, r15	; 0x06
    3842:	0f 83       	std	Y+7, r16	; 0x07
    3844:	18 87       	std	Y+8, r17	; 0x08
    3846:	ce 1a       	sub	r12, r30
    3848:	df 0a       	sbc	r13, r31
    384a:	dc 82       	std	Y+4, r13	; 0x04
    384c:	cb 82       	std	Y+3, r12	; 0x03
    384e:	1a 82       	std	Y+2, r1	; 0x02
    3850:	ce 01       	movw	r24, r28
    3852:	01 96       	adiw	r24, 0x01	; 1
    3854:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__pack_f>
    3858:	28 96       	adiw	r28, 0x08	; 8
    385a:	ea e0       	ldi	r30, 0x0A	; 10
    385c:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x10>

00003860 <__clzsi2>:
    3860:	ef 92       	push	r14
    3862:	ff 92       	push	r15
    3864:	0f 93       	push	r16
    3866:	1f 93       	push	r17
    3868:	7b 01       	movw	r14, r22
    386a:	8c 01       	movw	r16, r24
    386c:	80 e0       	ldi	r24, 0x00	; 0
    386e:	e8 16       	cp	r14, r24
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	f8 06       	cpc	r15, r24
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	08 07       	cpc	r16, r24
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	18 07       	cpc	r17, r24
    387c:	88 f4       	brcc	.+34     	; 0x38a0 <__clzsi2+0x40>
    387e:	8f ef       	ldi	r24, 0xFF	; 255
    3880:	e8 16       	cp	r14, r24
    3882:	f1 04       	cpc	r15, r1
    3884:	01 05       	cpc	r16, r1
    3886:	11 05       	cpc	r17, r1
    3888:	31 f0       	breq	.+12     	; 0x3896 <__clzsi2+0x36>
    388a:	28 f0       	brcs	.+10     	; 0x3896 <__clzsi2+0x36>
    388c:	88 e0       	ldi	r24, 0x08	; 8
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	a0 e0       	ldi	r26, 0x00	; 0
    3892:	b0 e0       	ldi	r27, 0x00	; 0
    3894:	17 c0       	rjmp	.+46     	; 0x38c4 <__clzsi2+0x64>
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	a0 e0       	ldi	r26, 0x00	; 0
    389c:	b0 e0       	ldi	r27, 0x00	; 0
    389e:	12 c0       	rjmp	.+36     	; 0x38c4 <__clzsi2+0x64>
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	e8 16       	cp	r14, r24
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	f8 06       	cpc	r15, r24
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	08 07       	cpc	r16, r24
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	18 07       	cpc	r17, r24
    38b0:	28 f0       	brcs	.+10     	; 0x38bc <__clzsi2+0x5c>
    38b2:	88 e1       	ldi	r24, 0x18	; 24
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	a0 e0       	ldi	r26, 0x00	; 0
    38b8:	b0 e0       	ldi	r27, 0x00	; 0
    38ba:	04 c0       	rjmp	.+8      	; 0x38c4 <__clzsi2+0x64>
    38bc:	80 e1       	ldi	r24, 0x10	; 16
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	a0 e0       	ldi	r26, 0x00	; 0
    38c2:	b0 e0       	ldi	r27, 0x00	; 0
    38c4:	20 e2       	ldi	r18, 0x20	; 32
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	40 e0       	ldi	r20, 0x00	; 0
    38ca:	50 e0       	ldi	r21, 0x00	; 0
    38cc:	28 1b       	sub	r18, r24
    38ce:	39 0b       	sbc	r19, r25
    38d0:	4a 0b       	sbc	r20, r26
    38d2:	5b 0b       	sbc	r21, r27
    38d4:	04 c0       	rjmp	.+8      	; 0x38de <__clzsi2+0x7e>
    38d6:	16 95       	lsr	r17
    38d8:	07 95       	ror	r16
    38da:	f7 94       	ror	r15
    38dc:	e7 94       	ror	r14
    38de:	8a 95       	dec	r24
    38e0:	d2 f7       	brpl	.-12     	; 0x38d6 <__clzsi2+0x76>
    38e2:	f7 01       	movw	r30, r14
    38e4:	e8 5f       	subi	r30, 0xF8	; 248
    38e6:	fd 4f       	sbci	r31, 0xFD	; 253
    38e8:	80 81       	ld	r24, Z
    38ea:	28 1b       	sub	r18, r24
    38ec:	31 09       	sbc	r19, r1
    38ee:	41 09       	sbc	r20, r1
    38f0:	51 09       	sbc	r21, r1
    38f2:	c9 01       	movw	r24, r18
    38f4:	1f 91       	pop	r17
    38f6:	0f 91       	pop	r16
    38f8:	ff 90       	pop	r15
    38fa:	ef 90       	pop	r14
    38fc:	08 95       	ret

000038fe <__pack_f>:
    38fe:	df 92       	push	r13
    3900:	ef 92       	push	r14
    3902:	ff 92       	push	r15
    3904:	0f 93       	push	r16
    3906:	1f 93       	push	r17
    3908:	fc 01       	movw	r30, r24
    390a:	e4 80       	ldd	r14, Z+4	; 0x04
    390c:	f5 80       	ldd	r15, Z+5	; 0x05
    390e:	06 81       	ldd	r16, Z+6	; 0x06
    3910:	17 81       	ldd	r17, Z+7	; 0x07
    3912:	d1 80       	ldd	r13, Z+1	; 0x01
    3914:	80 81       	ld	r24, Z
    3916:	82 30       	cpi	r24, 0x02	; 2
    3918:	48 f4       	brcc	.+18     	; 0x392c <__pack_f+0x2e>
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	a0 e1       	ldi	r26, 0x10	; 16
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	e8 2a       	or	r14, r24
    3924:	f9 2a       	or	r15, r25
    3926:	0a 2b       	or	r16, r26
    3928:	1b 2b       	or	r17, r27
    392a:	a5 c0       	rjmp	.+330    	; 0x3a76 <__pack_f+0x178>
    392c:	84 30       	cpi	r24, 0x04	; 4
    392e:	09 f4       	brne	.+2      	; 0x3932 <__pack_f+0x34>
    3930:	9f c0       	rjmp	.+318    	; 0x3a70 <__pack_f+0x172>
    3932:	82 30       	cpi	r24, 0x02	; 2
    3934:	21 f4       	brne	.+8      	; 0x393e <__pack_f+0x40>
    3936:	ee 24       	eor	r14, r14
    3938:	ff 24       	eor	r15, r15
    393a:	87 01       	movw	r16, r14
    393c:	05 c0       	rjmp	.+10     	; 0x3948 <__pack_f+0x4a>
    393e:	e1 14       	cp	r14, r1
    3940:	f1 04       	cpc	r15, r1
    3942:	01 05       	cpc	r16, r1
    3944:	11 05       	cpc	r17, r1
    3946:	19 f4       	brne	.+6      	; 0x394e <__pack_f+0x50>
    3948:	e0 e0       	ldi	r30, 0x00	; 0
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	96 c0       	rjmp	.+300    	; 0x3a7a <__pack_f+0x17c>
    394e:	62 81       	ldd	r22, Z+2	; 0x02
    3950:	73 81       	ldd	r23, Z+3	; 0x03
    3952:	9f ef       	ldi	r25, 0xFF	; 255
    3954:	62 38       	cpi	r22, 0x82	; 130
    3956:	79 07       	cpc	r23, r25
    3958:	0c f0       	brlt	.+2      	; 0x395c <__pack_f+0x5e>
    395a:	5b c0       	rjmp	.+182    	; 0x3a12 <__pack_f+0x114>
    395c:	22 e8       	ldi	r18, 0x82	; 130
    395e:	3f ef       	ldi	r19, 0xFF	; 255
    3960:	26 1b       	sub	r18, r22
    3962:	37 0b       	sbc	r19, r23
    3964:	2a 31       	cpi	r18, 0x1A	; 26
    3966:	31 05       	cpc	r19, r1
    3968:	2c f0       	brlt	.+10     	; 0x3974 <__pack_f+0x76>
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e0       	ldi	r20, 0x00	; 0
    3970:	50 e0       	ldi	r21, 0x00	; 0
    3972:	2a c0       	rjmp	.+84     	; 0x39c8 <__pack_f+0xca>
    3974:	b8 01       	movw	r22, r16
    3976:	a7 01       	movw	r20, r14
    3978:	02 2e       	mov	r0, r18
    397a:	04 c0       	rjmp	.+8      	; 0x3984 <__pack_f+0x86>
    397c:	76 95       	lsr	r23
    397e:	67 95       	ror	r22
    3980:	57 95       	ror	r21
    3982:	47 95       	ror	r20
    3984:	0a 94       	dec	r0
    3986:	d2 f7       	brpl	.-12     	; 0x397c <__pack_f+0x7e>
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	a0 e0       	ldi	r26, 0x00	; 0
    398e:	b0 e0       	ldi	r27, 0x00	; 0
    3990:	04 c0       	rjmp	.+8      	; 0x399a <__pack_f+0x9c>
    3992:	88 0f       	add	r24, r24
    3994:	99 1f       	adc	r25, r25
    3996:	aa 1f       	adc	r26, r26
    3998:	bb 1f       	adc	r27, r27
    399a:	2a 95       	dec	r18
    399c:	d2 f7       	brpl	.-12     	; 0x3992 <__pack_f+0x94>
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	a1 09       	sbc	r26, r1
    39a2:	b1 09       	sbc	r27, r1
    39a4:	8e 21       	and	r24, r14
    39a6:	9f 21       	and	r25, r15
    39a8:	a0 23       	and	r26, r16
    39aa:	b1 23       	and	r27, r17
    39ac:	00 97       	sbiw	r24, 0x00	; 0
    39ae:	a1 05       	cpc	r26, r1
    39b0:	b1 05       	cpc	r27, r1
    39b2:	21 f0       	breq	.+8      	; 0x39bc <__pack_f+0xbe>
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	a0 e0       	ldi	r26, 0x00	; 0
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	9a 01       	movw	r18, r20
    39be:	ab 01       	movw	r20, r22
    39c0:	28 2b       	or	r18, r24
    39c2:	39 2b       	or	r19, r25
    39c4:	4a 2b       	or	r20, r26
    39c6:	5b 2b       	or	r21, r27
    39c8:	da 01       	movw	r26, r20
    39ca:	c9 01       	movw	r24, r18
    39cc:	8f 77       	andi	r24, 0x7F	; 127
    39ce:	90 70       	andi	r25, 0x00	; 0
    39d0:	a0 70       	andi	r26, 0x00	; 0
    39d2:	b0 70       	andi	r27, 0x00	; 0
    39d4:	80 34       	cpi	r24, 0x40	; 64
    39d6:	91 05       	cpc	r25, r1
    39d8:	a1 05       	cpc	r26, r1
    39da:	b1 05       	cpc	r27, r1
    39dc:	39 f4       	brne	.+14     	; 0x39ec <__pack_f+0xee>
    39de:	27 ff       	sbrs	r18, 7
    39e0:	09 c0       	rjmp	.+18     	; 0x39f4 <__pack_f+0xf6>
    39e2:	20 5c       	subi	r18, 0xC0	; 192
    39e4:	3f 4f       	sbci	r19, 0xFF	; 255
    39e6:	4f 4f       	sbci	r20, 0xFF	; 255
    39e8:	5f 4f       	sbci	r21, 0xFF	; 255
    39ea:	04 c0       	rjmp	.+8      	; 0x39f4 <__pack_f+0xf6>
    39ec:	21 5c       	subi	r18, 0xC1	; 193
    39ee:	3f 4f       	sbci	r19, 0xFF	; 255
    39f0:	4f 4f       	sbci	r20, 0xFF	; 255
    39f2:	5f 4f       	sbci	r21, 0xFF	; 255
    39f4:	e0 e0       	ldi	r30, 0x00	; 0
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	20 30       	cpi	r18, 0x00	; 0
    39fa:	a0 e0       	ldi	r26, 0x00	; 0
    39fc:	3a 07       	cpc	r19, r26
    39fe:	a0 e0       	ldi	r26, 0x00	; 0
    3a00:	4a 07       	cpc	r20, r26
    3a02:	a0 e4       	ldi	r26, 0x40	; 64
    3a04:	5a 07       	cpc	r21, r26
    3a06:	10 f0       	brcs	.+4      	; 0x3a0c <__pack_f+0x10e>
    3a08:	e1 e0       	ldi	r30, 0x01	; 1
    3a0a:	f0 e0       	ldi	r31, 0x00	; 0
    3a0c:	79 01       	movw	r14, r18
    3a0e:	8a 01       	movw	r16, r20
    3a10:	27 c0       	rjmp	.+78     	; 0x3a60 <__pack_f+0x162>
    3a12:	60 38       	cpi	r22, 0x80	; 128
    3a14:	71 05       	cpc	r23, r1
    3a16:	64 f5       	brge	.+88     	; 0x3a70 <__pack_f+0x172>
    3a18:	fb 01       	movw	r30, r22
    3a1a:	e1 58       	subi	r30, 0x81	; 129
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	d8 01       	movw	r26, r16
    3a20:	c7 01       	movw	r24, r14
    3a22:	8f 77       	andi	r24, 0x7F	; 127
    3a24:	90 70       	andi	r25, 0x00	; 0
    3a26:	a0 70       	andi	r26, 0x00	; 0
    3a28:	b0 70       	andi	r27, 0x00	; 0
    3a2a:	80 34       	cpi	r24, 0x40	; 64
    3a2c:	91 05       	cpc	r25, r1
    3a2e:	a1 05       	cpc	r26, r1
    3a30:	b1 05       	cpc	r27, r1
    3a32:	39 f4       	brne	.+14     	; 0x3a42 <__pack_f+0x144>
    3a34:	e7 fe       	sbrs	r14, 7
    3a36:	0d c0       	rjmp	.+26     	; 0x3a52 <__pack_f+0x154>
    3a38:	80 e4       	ldi	r24, 0x40	; 64
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	a0 e0       	ldi	r26, 0x00	; 0
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	04 c0       	rjmp	.+8      	; 0x3a4a <__pack_f+0x14c>
    3a42:	8f e3       	ldi	r24, 0x3F	; 63
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	a0 e0       	ldi	r26, 0x00	; 0
    3a48:	b0 e0       	ldi	r27, 0x00	; 0
    3a4a:	e8 0e       	add	r14, r24
    3a4c:	f9 1e       	adc	r15, r25
    3a4e:	0a 1f       	adc	r16, r26
    3a50:	1b 1f       	adc	r17, r27
    3a52:	17 ff       	sbrs	r17, 7
    3a54:	05 c0       	rjmp	.+10     	; 0x3a60 <__pack_f+0x162>
    3a56:	16 95       	lsr	r17
    3a58:	07 95       	ror	r16
    3a5a:	f7 94       	ror	r15
    3a5c:	e7 94       	ror	r14
    3a5e:	31 96       	adiw	r30, 0x01	; 1
    3a60:	87 e0       	ldi	r24, 0x07	; 7
    3a62:	16 95       	lsr	r17
    3a64:	07 95       	ror	r16
    3a66:	f7 94       	ror	r15
    3a68:	e7 94       	ror	r14
    3a6a:	8a 95       	dec	r24
    3a6c:	d1 f7       	brne	.-12     	; 0x3a62 <__pack_f+0x164>
    3a6e:	05 c0       	rjmp	.+10     	; 0x3a7a <__pack_f+0x17c>
    3a70:	ee 24       	eor	r14, r14
    3a72:	ff 24       	eor	r15, r15
    3a74:	87 01       	movw	r16, r14
    3a76:	ef ef       	ldi	r30, 0xFF	; 255
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	6e 2f       	mov	r22, r30
    3a7c:	67 95       	ror	r22
    3a7e:	66 27       	eor	r22, r22
    3a80:	67 95       	ror	r22
    3a82:	90 2f       	mov	r25, r16
    3a84:	9f 77       	andi	r25, 0x7F	; 127
    3a86:	d7 94       	ror	r13
    3a88:	dd 24       	eor	r13, r13
    3a8a:	d7 94       	ror	r13
    3a8c:	8e 2f       	mov	r24, r30
    3a8e:	86 95       	lsr	r24
    3a90:	49 2f       	mov	r20, r25
    3a92:	46 2b       	or	r20, r22
    3a94:	58 2f       	mov	r21, r24
    3a96:	5d 29       	or	r21, r13
    3a98:	b7 01       	movw	r22, r14
    3a9a:	ca 01       	movw	r24, r20
    3a9c:	1f 91       	pop	r17
    3a9e:	0f 91       	pop	r16
    3aa0:	ff 90       	pop	r15
    3aa2:	ef 90       	pop	r14
    3aa4:	df 90       	pop	r13
    3aa6:	08 95       	ret

00003aa8 <__unpack_f>:
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	db 01       	movw	r26, r22
    3aac:	40 81       	ld	r20, Z
    3aae:	51 81       	ldd	r21, Z+1	; 0x01
    3ab0:	22 81       	ldd	r18, Z+2	; 0x02
    3ab2:	62 2f       	mov	r22, r18
    3ab4:	6f 77       	andi	r22, 0x7F	; 127
    3ab6:	70 e0       	ldi	r23, 0x00	; 0
    3ab8:	22 1f       	adc	r18, r18
    3aba:	22 27       	eor	r18, r18
    3abc:	22 1f       	adc	r18, r18
    3abe:	93 81       	ldd	r25, Z+3	; 0x03
    3ac0:	89 2f       	mov	r24, r25
    3ac2:	88 0f       	add	r24, r24
    3ac4:	82 2b       	or	r24, r18
    3ac6:	28 2f       	mov	r18, r24
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	99 1f       	adc	r25, r25
    3acc:	99 27       	eor	r25, r25
    3ace:	99 1f       	adc	r25, r25
    3ad0:	11 96       	adiw	r26, 0x01	; 1
    3ad2:	9c 93       	st	X, r25
    3ad4:	11 97       	sbiw	r26, 0x01	; 1
    3ad6:	21 15       	cp	r18, r1
    3ad8:	31 05       	cpc	r19, r1
    3ada:	a9 f5       	brne	.+106    	; 0x3b46 <__unpack_f+0x9e>
    3adc:	41 15       	cp	r20, r1
    3ade:	51 05       	cpc	r21, r1
    3ae0:	61 05       	cpc	r22, r1
    3ae2:	71 05       	cpc	r23, r1
    3ae4:	11 f4       	brne	.+4      	; 0x3aea <__unpack_f+0x42>
    3ae6:	82 e0       	ldi	r24, 0x02	; 2
    3ae8:	37 c0       	rjmp	.+110    	; 0x3b58 <__unpack_f+0xb0>
    3aea:	82 e8       	ldi	r24, 0x82	; 130
    3aec:	9f ef       	ldi	r25, 0xFF	; 255
    3aee:	13 96       	adiw	r26, 0x03	; 3
    3af0:	9c 93       	st	X, r25
    3af2:	8e 93       	st	-X, r24
    3af4:	12 97       	sbiw	r26, 0x02	; 2
    3af6:	9a 01       	movw	r18, r20
    3af8:	ab 01       	movw	r20, r22
    3afa:	67 e0       	ldi	r22, 0x07	; 7
    3afc:	22 0f       	add	r18, r18
    3afe:	33 1f       	adc	r19, r19
    3b00:	44 1f       	adc	r20, r20
    3b02:	55 1f       	adc	r21, r21
    3b04:	6a 95       	dec	r22
    3b06:	d1 f7       	brne	.-12     	; 0x3afc <__unpack_f+0x54>
    3b08:	83 e0       	ldi	r24, 0x03	; 3
    3b0a:	8c 93       	st	X, r24
    3b0c:	0d c0       	rjmp	.+26     	; 0x3b28 <__unpack_f+0x80>
    3b0e:	22 0f       	add	r18, r18
    3b10:	33 1f       	adc	r19, r19
    3b12:	44 1f       	adc	r20, r20
    3b14:	55 1f       	adc	r21, r21
    3b16:	12 96       	adiw	r26, 0x02	; 2
    3b18:	8d 91       	ld	r24, X+
    3b1a:	9c 91       	ld	r25, X
    3b1c:	13 97       	sbiw	r26, 0x03	; 3
    3b1e:	01 97       	sbiw	r24, 0x01	; 1
    3b20:	13 96       	adiw	r26, 0x03	; 3
    3b22:	9c 93       	st	X, r25
    3b24:	8e 93       	st	-X, r24
    3b26:	12 97       	sbiw	r26, 0x02	; 2
    3b28:	20 30       	cpi	r18, 0x00	; 0
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	38 07       	cpc	r19, r24
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	48 07       	cpc	r20, r24
    3b32:	80 e4       	ldi	r24, 0x40	; 64
    3b34:	58 07       	cpc	r21, r24
    3b36:	58 f3       	brcs	.-42     	; 0x3b0e <__unpack_f+0x66>
    3b38:	14 96       	adiw	r26, 0x04	; 4
    3b3a:	2d 93       	st	X+, r18
    3b3c:	3d 93       	st	X+, r19
    3b3e:	4d 93       	st	X+, r20
    3b40:	5c 93       	st	X, r21
    3b42:	17 97       	sbiw	r26, 0x07	; 7
    3b44:	08 95       	ret
    3b46:	2f 3f       	cpi	r18, 0xFF	; 255
    3b48:	31 05       	cpc	r19, r1
    3b4a:	79 f4       	brne	.+30     	; 0x3b6a <__unpack_f+0xc2>
    3b4c:	41 15       	cp	r20, r1
    3b4e:	51 05       	cpc	r21, r1
    3b50:	61 05       	cpc	r22, r1
    3b52:	71 05       	cpc	r23, r1
    3b54:	19 f4       	brne	.+6      	; 0x3b5c <__unpack_f+0xb4>
    3b56:	84 e0       	ldi	r24, 0x04	; 4
    3b58:	8c 93       	st	X, r24
    3b5a:	08 95       	ret
    3b5c:	64 ff       	sbrs	r22, 4
    3b5e:	03 c0       	rjmp	.+6      	; 0x3b66 <__unpack_f+0xbe>
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	8c 93       	st	X, r24
    3b64:	12 c0       	rjmp	.+36     	; 0x3b8a <__unpack_f+0xe2>
    3b66:	1c 92       	st	X, r1
    3b68:	10 c0       	rjmp	.+32     	; 0x3b8a <__unpack_f+0xe2>
    3b6a:	2f 57       	subi	r18, 0x7F	; 127
    3b6c:	30 40       	sbci	r19, 0x00	; 0
    3b6e:	13 96       	adiw	r26, 0x03	; 3
    3b70:	3c 93       	st	X, r19
    3b72:	2e 93       	st	-X, r18
    3b74:	12 97       	sbiw	r26, 0x02	; 2
    3b76:	83 e0       	ldi	r24, 0x03	; 3
    3b78:	8c 93       	st	X, r24
    3b7a:	87 e0       	ldi	r24, 0x07	; 7
    3b7c:	44 0f       	add	r20, r20
    3b7e:	55 1f       	adc	r21, r21
    3b80:	66 1f       	adc	r22, r22
    3b82:	77 1f       	adc	r23, r23
    3b84:	8a 95       	dec	r24
    3b86:	d1 f7       	brne	.-12     	; 0x3b7c <__unpack_f+0xd4>
    3b88:	70 64       	ori	r23, 0x40	; 64
    3b8a:	14 96       	adiw	r26, 0x04	; 4
    3b8c:	4d 93       	st	X+, r20
    3b8e:	5d 93       	st	X+, r21
    3b90:	6d 93       	st	X+, r22
    3b92:	7c 93       	st	X, r23
    3b94:	17 97       	sbiw	r26, 0x07	; 7
    3b96:	08 95       	ret

00003b98 <__fpcmp_parts_f>:
    3b98:	1f 93       	push	r17
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	fb 01       	movw	r30, r22
    3b9e:	9c 91       	ld	r25, X
    3ba0:	92 30       	cpi	r25, 0x02	; 2
    3ba2:	08 f4       	brcc	.+2      	; 0x3ba6 <__fpcmp_parts_f+0xe>
    3ba4:	47 c0       	rjmp	.+142    	; 0x3c34 <__fpcmp_parts_f+0x9c>
    3ba6:	80 81       	ld	r24, Z
    3ba8:	82 30       	cpi	r24, 0x02	; 2
    3baa:	08 f4       	brcc	.+2      	; 0x3bae <__fpcmp_parts_f+0x16>
    3bac:	43 c0       	rjmp	.+134    	; 0x3c34 <__fpcmp_parts_f+0x9c>
    3bae:	94 30       	cpi	r25, 0x04	; 4
    3bb0:	51 f4       	brne	.+20     	; 0x3bc6 <__fpcmp_parts_f+0x2e>
    3bb2:	11 96       	adiw	r26, 0x01	; 1
    3bb4:	1c 91       	ld	r17, X
    3bb6:	84 30       	cpi	r24, 0x04	; 4
    3bb8:	99 f5       	brne	.+102    	; 0x3c20 <__fpcmp_parts_f+0x88>
    3bba:	81 81       	ldd	r24, Z+1	; 0x01
    3bbc:	68 2f       	mov	r22, r24
    3bbe:	70 e0       	ldi	r23, 0x00	; 0
    3bc0:	61 1b       	sub	r22, r17
    3bc2:	71 09       	sbc	r23, r1
    3bc4:	3f c0       	rjmp	.+126    	; 0x3c44 <__fpcmp_parts_f+0xac>
    3bc6:	84 30       	cpi	r24, 0x04	; 4
    3bc8:	21 f0       	breq	.+8      	; 0x3bd2 <__fpcmp_parts_f+0x3a>
    3bca:	92 30       	cpi	r25, 0x02	; 2
    3bcc:	31 f4       	brne	.+12     	; 0x3bda <__fpcmp_parts_f+0x42>
    3bce:	82 30       	cpi	r24, 0x02	; 2
    3bd0:	b9 f1       	breq	.+110    	; 0x3c40 <__fpcmp_parts_f+0xa8>
    3bd2:	81 81       	ldd	r24, Z+1	; 0x01
    3bd4:	88 23       	and	r24, r24
    3bd6:	89 f1       	breq	.+98     	; 0x3c3a <__fpcmp_parts_f+0xa2>
    3bd8:	2d c0       	rjmp	.+90     	; 0x3c34 <__fpcmp_parts_f+0x9c>
    3bda:	11 96       	adiw	r26, 0x01	; 1
    3bdc:	1c 91       	ld	r17, X
    3bde:	11 97       	sbiw	r26, 0x01	; 1
    3be0:	82 30       	cpi	r24, 0x02	; 2
    3be2:	f1 f0       	breq	.+60     	; 0x3c20 <__fpcmp_parts_f+0x88>
    3be4:	81 81       	ldd	r24, Z+1	; 0x01
    3be6:	18 17       	cp	r17, r24
    3be8:	d9 f4       	brne	.+54     	; 0x3c20 <__fpcmp_parts_f+0x88>
    3bea:	12 96       	adiw	r26, 0x02	; 2
    3bec:	2d 91       	ld	r18, X+
    3bee:	3c 91       	ld	r19, X
    3bf0:	13 97       	sbiw	r26, 0x03	; 3
    3bf2:	82 81       	ldd	r24, Z+2	; 0x02
    3bf4:	93 81       	ldd	r25, Z+3	; 0x03
    3bf6:	82 17       	cp	r24, r18
    3bf8:	93 07       	cpc	r25, r19
    3bfa:	94 f0       	brlt	.+36     	; 0x3c20 <__fpcmp_parts_f+0x88>
    3bfc:	28 17       	cp	r18, r24
    3bfe:	39 07       	cpc	r19, r25
    3c00:	bc f0       	brlt	.+46     	; 0x3c30 <__fpcmp_parts_f+0x98>
    3c02:	14 96       	adiw	r26, 0x04	; 4
    3c04:	8d 91       	ld	r24, X+
    3c06:	9d 91       	ld	r25, X+
    3c08:	0d 90       	ld	r0, X+
    3c0a:	bc 91       	ld	r27, X
    3c0c:	a0 2d       	mov	r26, r0
    3c0e:	24 81       	ldd	r18, Z+4	; 0x04
    3c10:	35 81       	ldd	r19, Z+5	; 0x05
    3c12:	46 81       	ldd	r20, Z+6	; 0x06
    3c14:	57 81       	ldd	r21, Z+7	; 0x07
    3c16:	28 17       	cp	r18, r24
    3c18:	39 07       	cpc	r19, r25
    3c1a:	4a 07       	cpc	r20, r26
    3c1c:	5b 07       	cpc	r21, r27
    3c1e:	18 f4       	brcc	.+6      	; 0x3c26 <__fpcmp_parts_f+0x8e>
    3c20:	11 23       	and	r17, r17
    3c22:	41 f0       	breq	.+16     	; 0x3c34 <__fpcmp_parts_f+0x9c>
    3c24:	0a c0       	rjmp	.+20     	; 0x3c3a <__fpcmp_parts_f+0xa2>
    3c26:	82 17       	cp	r24, r18
    3c28:	93 07       	cpc	r25, r19
    3c2a:	a4 07       	cpc	r26, r20
    3c2c:	b5 07       	cpc	r27, r21
    3c2e:	40 f4       	brcc	.+16     	; 0x3c40 <__fpcmp_parts_f+0xa8>
    3c30:	11 23       	and	r17, r17
    3c32:	19 f0       	breq	.+6      	; 0x3c3a <__fpcmp_parts_f+0xa2>
    3c34:	61 e0       	ldi	r22, 0x01	; 1
    3c36:	70 e0       	ldi	r23, 0x00	; 0
    3c38:	05 c0       	rjmp	.+10     	; 0x3c44 <__fpcmp_parts_f+0xac>
    3c3a:	6f ef       	ldi	r22, 0xFF	; 255
    3c3c:	7f ef       	ldi	r23, 0xFF	; 255
    3c3e:	02 c0       	rjmp	.+4      	; 0x3c44 <__fpcmp_parts_f+0xac>
    3c40:	60 e0       	ldi	r22, 0x00	; 0
    3c42:	70 e0       	ldi	r23, 0x00	; 0
    3c44:	cb 01       	movw	r24, r22
    3c46:	1f 91       	pop	r17
    3c48:	08 95       	ret

00003c4a <__udivmodhi4>:
    3c4a:	aa 1b       	sub	r26, r26
    3c4c:	bb 1b       	sub	r27, r27
    3c4e:	51 e1       	ldi	r21, 0x11	; 17
    3c50:	07 c0       	rjmp	.+14     	; 0x3c60 <__udivmodhi4_ep>

00003c52 <__udivmodhi4_loop>:
    3c52:	aa 1f       	adc	r26, r26
    3c54:	bb 1f       	adc	r27, r27
    3c56:	a6 17       	cp	r26, r22
    3c58:	b7 07       	cpc	r27, r23
    3c5a:	10 f0       	brcs	.+4      	; 0x3c60 <__udivmodhi4_ep>
    3c5c:	a6 1b       	sub	r26, r22
    3c5e:	b7 0b       	sbc	r27, r23

00003c60 <__udivmodhi4_ep>:
    3c60:	88 1f       	adc	r24, r24
    3c62:	99 1f       	adc	r25, r25
    3c64:	5a 95       	dec	r21
    3c66:	a9 f7       	brne	.-22     	; 0x3c52 <__udivmodhi4_loop>
    3c68:	80 95       	com	r24
    3c6a:	90 95       	com	r25
    3c6c:	bc 01       	movw	r22, r24
    3c6e:	cd 01       	movw	r24, r26
    3c70:	08 95       	ret

00003c72 <__divmodhi4>:
    3c72:	97 fb       	bst	r25, 7
    3c74:	09 2e       	mov	r0, r25
    3c76:	07 26       	eor	r0, r23
    3c78:	0a d0       	rcall	.+20     	; 0x3c8e <__divmodhi4_neg1>
    3c7a:	77 fd       	sbrc	r23, 7
    3c7c:	04 d0       	rcall	.+8      	; 0x3c86 <__divmodhi4_neg2>
    3c7e:	e5 df       	rcall	.-54     	; 0x3c4a <__udivmodhi4>
    3c80:	06 d0       	rcall	.+12     	; 0x3c8e <__divmodhi4_neg1>
    3c82:	00 20       	and	r0, r0
    3c84:	1a f4       	brpl	.+6      	; 0x3c8c <__divmodhi4_exit>

00003c86 <__divmodhi4_neg2>:
    3c86:	70 95       	com	r23
    3c88:	61 95       	neg	r22
    3c8a:	7f 4f       	sbci	r23, 0xFF	; 255

00003c8c <__divmodhi4_exit>:
    3c8c:	08 95       	ret

00003c8e <__divmodhi4_neg1>:
    3c8e:	f6 f7       	brtc	.-4      	; 0x3c8c <__divmodhi4_exit>
    3c90:	90 95       	com	r25
    3c92:	81 95       	neg	r24
    3c94:	9f 4f       	sbci	r25, 0xFF	; 255
    3c96:	08 95       	ret

00003c98 <__prologue_saves__>:
    3c98:	2f 92       	push	r2
    3c9a:	3f 92       	push	r3
    3c9c:	4f 92       	push	r4
    3c9e:	5f 92       	push	r5
    3ca0:	6f 92       	push	r6
    3ca2:	7f 92       	push	r7
    3ca4:	8f 92       	push	r8
    3ca6:	9f 92       	push	r9
    3ca8:	af 92       	push	r10
    3caa:	bf 92       	push	r11
    3cac:	cf 92       	push	r12
    3cae:	df 92       	push	r13
    3cb0:	ef 92       	push	r14
    3cb2:	ff 92       	push	r15
    3cb4:	0f 93       	push	r16
    3cb6:	1f 93       	push	r17
    3cb8:	cf 93       	push	r28
    3cba:	df 93       	push	r29
    3cbc:	cd b7       	in	r28, 0x3d	; 61
    3cbe:	de b7       	in	r29, 0x3e	; 62
    3cc0:	ca 1b       	sub	r28, r26
    3cc2:	db 0b       	sbc	r29, r27
    3cc4:	0f b6       	in	r0, 0x3f	; 63
    3cc6:	f8 94       	cli
    3cc8:	de bf       	out	0x3e, r29	; 62
    3cca:	0f be       	out	0x3f, r0	; 63
    3ccc:	cd bf       	out	0x3d, r28	; 61
    3cce:	19 94       	eijmp

00003cd0 <__epilogue_restores__>:
    3cd0:	2a 88       	ldd	r2, Y+18	; 0x12
    3cd2:	39 88       	ldd	r3, Y+17	; 0x11
    3cd4:	48 88       	ldd	r4, Y+16	; 0x10
    3cd6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cd8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cda:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cdc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cde:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ce0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ce2:	b9 84       	ldd	r11, Y+9	; 0x09
    3ce4:	c8 84       	ldd	r12, Y+8	; 0x08
    3ce6:	df 80       	ldd	r13, Y+7	; 0x07
    3ce8:	ee 80       	ldd	r14, Y+6	; 0x06
    3cea:	fd 80       	ldd	r15, Y+5	; 0x05
    3cec:	0c 81       	ldd	r16, Y+4	; 0x04
    3cee:	1b 81       	ldd	r17, Y+3	; 0x03
    3cf0:	aa 81       	ldd	r26, Y+2	; 0x02
    3cf2:	b9 81       	ldd	r27, Y+1	; 0x01
    3cf4:	ce 0f       	add	r28, r30
    3cf6:	d1 1d       	adc	r29, r1
    3cf8:	0f b6       	in	r0, 0x3f	; 63
    3cfa:	f8 94       	cli
    3cfc:	de bf       	out	0x3e, r29	; 62
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	cd bf       	out	0x3d, r28	; 61
    3d02:	ed 01       	movw	r28, r26
    3d04:	08 95       	ret

00003d06 <strlen>:
    3d06:	fc 01       	movw	r30, r24
    3d08:	01 90       	ld	r0, Z+
    3d0a:	00 20       	and	r0, r0
    3d0c:	e9 f7       	brne	.-6      	; 0x3d08 <strlen+0x2>
    3d0e:	80 95       	com	r24
    3d10:	90 95       	com	r25
    3d12:	8e 0f       	add	r24, r30
    3d14:	9f 1f       	adc	r25, r31
    3d16:	08 95       	ret

00003d18 <pow>:
    3d18:	fa 01       	movw	r30, r20
    3d1a:	ee 0f       	add	r30, r30
    3d1c:	ff 1f       	adc	r31, r31
    3d1e:	30 96       	adiw	r30, 0x00	; 0
    3d20:	21 05       	cpc	r18, r1
    3d22:	31 05       	cpc	r19, r1
    3d24:	99 f1       	breq	.+102    	; 0x3d8c <pow+0x74>
    3d26:	61 15       	cp	r22, r1
    3d28:	71 05       	cpc	r23, r1
    3d2a:	61 f4       	brne	.+24     	; 0x3d44 <pow+0x2c>
    3d2c:	80 38       	cpi	r24, 0x80	; 128
    3d2e:	bf e3       	ldi	r27, 0x3F	; 63
    3d30:	9b 07       	cpc	r25, r27
    3d32:	49 f1       	breq	.+82     	; 0x3d86 <pow+0x6e>
    3d34:	68 94       	set
    3d36:	90 38       	cpi	r25, 0x80	; 128
    3d38:	81 05       	cpc	r24, r1
    3d3a:	61 f0       	breq	.+24     	; 0x3d54 <pow+0x3c>
    3d3c:	80 38       	cpi	r24, 0x80	; 128
    3d3e:	bf ef       	ldi	r27, 0xFF	; 255
    3d40:	9b 07       	cpc	r25, r27
    3d42:	41 f0       	breq	.+16     	; 0x3d54 <pow+0x3c>
    3d44:	99 23       	and	r25, r25
    3d46:	42 f5       	brpl	.+80     	; 0x3d98 <pow+0x80>
    3d48:	ff 3f       	cpi	r31, 0xFF	; 255
    3d4a:	e1 05       	cpc	r30, r1
    3d4c:	31 05       	cpc	r19, r1
    3d4e:	21 05       	cpc	r18, r1
    3d50:	11 f1       	breq	.+68     	; 0x3d96 <pow+0x7e>
    3d52:	e8 94       	clt
    3d54:	08 94       	sec
    3d56:	e7 95       	ror	r30
    3d58:	d9 01       	movw	r26, r18
    3d5a:	aa 23       	and	r26, r26
    3d5c:	29 f4       	brne	.+10     	; 0x3d68 <pow+0x50>
    3d5e:	ab 2f       	mov	r26, r27
    3d60:	be 2f       	mov	r27, r30
    3d62:	f8 5f       	subi	r31, 0xF8	; 248
    3d64:	d0 f3       	brcs	.-12     	; 0x3d5a <pow+0x42>
    3d66:	10 c0       	rjmp	.+32     	; 0x3d88 <pow+0x70>
    3d68:	ff 5f       	subi	r31, 0xFF	; 255
    3d6a:	70 f4       	brcc	.+28     	; 0x3d88 <pow+0x70>
    3d6c:	a6 95       	lsr	r26
    3d6e:	e0 f7       	brcc	.-8      	; 0x3d68 <pow+0x50>
    3d70:	f7 39       	cpi	r31, 0x97	; 151
    3d72:	50 f0       	brcs	.+20     	; 0x3d88 <pow+0x70>
    3d74:	19 f0       	breq	.+6      	; 0x3d7c <pow+0x64>
    3d76:	ff 3a       	cpi	r31, 0xAF	; 175
    3d78:	38 f4       	brcc	.+14     	; 0x3d88 <pow+0x70>
    3d7a:	9f 77       	andi	r25, 0x7F	; 127
    3d7c:	9f 93       	push	r25
    3d7e:	0c d0       	rcall	.+24     	; 0x3d98 <pow+0x80>
    3d80:	0f 90       	pop	r0
    3d82:	07 fc       	sbrc	r0, 7
    3d84:	90 58       	subi	r25, 0x80	; 128
    3d86:	08 95       	ret
    3d88:	3e f0       	brts	.+14     	; 0x3d98 <pow+0x80>
    3d8a:	49 c0       	rjmp	.+146    	; 0x3e1e <__fp_nan>
    3d8c:	60 e0       	ldi	r22, 0x00	; 0
    3d8e:	70 e0       	ldi	r23, 0x00	; 0
    3d90:	80 e8       	ldi	r24, 0x80	; 128
    3d92:	9f e3       	ldi	r25, 0x3F	; 63
    3d94:	08 95       	ret
    3d96:	4f e7       	ldi	r20, 0x7F	; 127
    3d98:	9f 77       	andi	r25, 0x7F	; 127
    3d9a:	5f 93       	push	r21
    3d9c:	4f 93       	push	r20
    3d9e:	3f 93       	push	r19
    3da0:	2f 93       	push	r18
    3da2:	d0 d0       	rcall	.+416    	; 0x3f44 <log>
    3da4:	2f 91       	pop	r18
    3da6:	3f 91       	pop	r19
    3da8:	4f 91       	pop	r20
    3daa:	5f 91       	pop	r21
    3dac:	f8 d9       	rcall	.-3088   	; 0x319e <__mulsf3>
    3dae:	05 c0       	rjmp	.+10     	; 0x3dba <exp>
    3db0:	19 f4       	brne	.+6      	; 0x3db8 <pow+0xa0>
    3db2:	0e f0       	brts	.+2      	; 0x3db6 <pow+0x9e>
    3db4:	2e c0       	rjmp	.+92     	; 0x3e12 <__fp_inf>
    3db6:	7d c0       	rjmp	.+250    	; 0x3eb2 <__fp_zero>
    3db8:	32 c0       	rjmp	.+100    	; 0x3e1e <__fp_nan>

00003dba <exp>:
    3dba:	61 d0       	rcall	.+194    	; 0x3e7e <__fp_splitA>
    3dbc:	c8 f3       	brcs	.-14     	; 0x3db0 <pow+0x98>
    3dbe:	96 38       	cpi	r25, 0x86	; 134
    3dc0:	c0 f7       	brcc	.-16     	; 0x3db2 <pow+0x9a>
    3dc2:	07 f8       	bld	r0, 7
    3dc4:	0f 92       	push	r0
    3dc6:	e8 94       	clt
    3dc8:	2b e3       	ldi	r18, 0x3B	; 59
    3dca:	3a ea       	ldi	r19, 0xAA	; 170
    3dcc:	48 eb       	ldi	r20, 0xB8	; 184
    3dce:	5f e7       	ldi	r21, 0x7F	; 127
    3dd0:	38 d1       	rcall	.+624    	; 0x4042 <__mulsf3_pse>
    3dd2:	0f 92       	push	r0
    3dd4:	0f 92       	push	r0
    3dd6:	0f 92       	push	r0
    3dd8:	4d b7       	in	r20, 0x3d	; 61
    3dda:	5e b7       	in	r21, 0x3e	; 62
    3ddc:	0f 92       	push	r0
    3dde:	f2 d0       	rcall	.+484    	; 0x3fc4 <modf>
    3de0:	e4 ee       	ldi	r30, 0xE4	; 228
    3de2:	f0 e0       	ldi	r31, 0x00	; 0
    3de4:	1f d0       	rcall	.+62     	; 0x3e24 <__fp_powser>
    3de6:	4f 91       	pop	r20
    3de8:	5f 91       	pop	r21
    3dea:	ef 91       	pop	r30
    3dec:	ff 91       	pop	r31
    3dee:	e5 95       	asr	r30
    3df0:	ee 1f       	adc	r30, r30
    3df2:	ff 1f       	adc	r31, r31
    3df4:	49 f0       	breq	.+18     	; 0x3e08 <exp+0x4e>
    3df6:	fe 57       	subi	r31, 0x7E	; 126
    3df8:	e0 68       	ori	r30, 0x80	; 128
    3dfa:	44 27       	eor	r20, r20
    3dfc:	ee 0f       	add	r30, r30
    3dfe:	44 1f       	adc	r20, r20
    3e00:	fa 95       	dec	r31
    3e02:	e1 f7       	brne	.-8      	; 0x3dfc <exp+0x42>
    3e04:	41 95       	neg	r20
    3e06:	55 0b       	sbc	r21, r21
    3e08:	64 d0       	rcall	.+200    	; 0x3ed2 <ldexp>
    3e0a:	0f 90       	pop	r0
    3e0c:	07 fe       	sbrs	r0, 7
    3e0e:	58 c0       	rjmp	.+176    	; 0x3ec0 <inverse>
    3e10:	08 95       	ret

00003e12 <__fp_inf>:
    3e12:	97 f9       	bld	r25, 7
    3e14:	9f 67       	ori	r25, 0x7F	; 127
    3e16:	80 e8       	ldi	r24, 0x80	; 128
    3e18:	70 e0       	ldi	r23, 0x00	; 0
    3e1a:	60 e0       	ldi	r22, 0x00	; 0
    3e1c:	08 95       	ret

00003e1e <__fp_nan>:
    3e1e:	9f ef       	ldi	r25, 0xFF	; 255
    3e20:	80 ec       	ldi	r24, 0xC0	; 192
    3e22:	08 95       	ret

00003e24 <__fp_powser>:
    3e24:	df 93       	push	r29
    3e26:	cf 93       	push	r28
    3e28:	1f 93       	push	r17
    3e2a:	0f 93       	push	r16
    3e2c:	ff 92       	push	r15
    3e2e:	ef 92       	push	r14
    3e30:	df 92       	push	r13
    3e32:	7b 01       	movw	r14, r22
    3e34:	8c 01       	movw	r16, r24
    3e36:	68 94       	set
    3e38:	05 c0       	rjmp	.+10     	; 0x3e44 <__fp_powser+0x20>
    3e3a:	da 2e       	mov	r13, r26
    3e3c:	ef 01       	movw	r28, r30
    3e3e:	ff d0       	rcall	.+510    	; 0x403e <__mulsf3x>
    3e40:	fe 01       	movw	r30, r28
    3e42:	e8 94       	clt
    3e44:	a5 91       	lpm	r26, Z+
    3e46:	25 91       	lpm	r18, Z+
    3e48:	35 91       	lpm	r19, Z+
    3e4a:	45 91       	lpm	r20, Z+
    3e4c:	55 91       	lpm	r21, Z+
    3e4e:	ae f3       	brts	.-22     	; 0x3e3a <__fp_powser+0x16>
    3e50:	ef 01       	movw	r28, r30
    3e52:	59 d1       	rcall	.+690    	; 0x4106 <__addsf3x>
    3e54:	fe 01       	movw	r30, r28
    3e56:	97 01       	movw	r18, r14
    3e58:	a8 01       	movw	r20, r16
    3e5a:	da 94       	dec	r13
    3e5c:	79 f7       	brne	.-34     	; 0x3e3c <__fp_powser+0x18>
    3e5e:	df 90       	pop	r13
    3e60:	ef 90       	pop	r14
    3e62:	ff 90       	pop	r15
    3e64:	0f 91       	pop	r16
    3e66:	1f 91       	pop	r17
    3e68:	cf 91       	pop	r28
    3e6a:	df 91       	pop	r29
    3e6c:	08 95       	ret

00003e6e <__fp_split3>:
    3e6e:	57 fd       	sbrc	r21, 7
    3e70:	90 58       	subi	r25, 0x80	; 128
    3e72:	44 0f       	add	r20, r20
    3e74:	55 1f       	adc	r21, r21
    3e76:	59 f0       	breq	.+22     	; 0x3e8e <__fp_splitA+0x10>
    3e78:	5f 3f       	cpi	r21, 0xFF	; 255
    3e7a:	71 f0       	breq	.+28     	; 0x3e98 <__fp_splitA+0x1a>
    3e7c:	47 95       	ror	r20

00003e7e <__fp_splitA>:
    3e7e:	88 0f       	add	r24, r24
    3e80:	97 fb       	bst	r25, 7
    3e82:	99 1f       	adc	r25, r25
    3e84:	61 f0       	breq	.+24     	; 0x3e9e <__fp_splitA+0x20>
    3e86:	9f 3f       	cpi	r25, 0xFF	; 255
    3e88:	79 f0       	breq	.+30     	; 0x3ea8 <__fp_splitA+0x2a>
    3e8a:	87 95       	ror	r24
    3e8c:	08 95       	ret
    3e8e:	12 16       	cp	r1, r18
    3e90:	13 06       	cpc	r1, r19
    3e92:	14 06       	cpc	r1, r20
    3e94:	55 1f       	adc	r21, r21
    3e96:	f2 cf       	rjmp	.-28     	; 0x3e7c <__fp_split3+0xe>
    3e98:	46 95       	lsr	r20
    3e9a:	f1 df       	rcall	.-30     	; 0x3e7e <__fp_splitA>
    3e9c:	08 c0       	rjmp	.+16     	; 0x3eae <__fp_splitA+0x30>
    3e9e:	16 16       	cp	r1, r22
    3ea0:	17 06       	cpc	r1, r23
    3ea2:	18 06       	cpc	r1, r24
    3ea4:	99 1f       	adc	r25, r25
    3ea6:	f1 cf       	rjmp	.-30     	; 0x3e8a <__fp_splitA+0xc>
    3ea8:	86 95       	lsr	r24
    3eaa:	71 05       	cpc	r23, r1
    3eac:	61 05       	cpc	r22, r1
    3eae:	08 94       	sec
    3eb0:	08 95       	ret

00003eb2 <__fp_zero>:
    3eb2:	e8 94       	clt

00003eb4 <__fp_szero>:
    3eb4:	bb 27       	eor	r27, r27
    3eb6:	66 27       	eor	r22, r22
    3eb8:	77 27       	eor	r23, r23
    3eba:	cb 01       	movw	r24, r22
    3ebc:	97 f9       	bld	r25, 7
    3ebe:	08 95       	ret

00003ec0 <inverse>:
    3ec0:	9b 01       	movw	r18, r22
    3ec2:	ac 01       	movw	r20, r24
    3ec4:	60 e0       	ldi	r22, 0x00	; 0
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
    3ec8:	80 e8       	ldi	r24, 0x80	; 128
    3eca:	9f e3       	ldi	r25, 0x3F	; 63
    3ecc:	62 ca       	rjmp	.-2876   	; 0x3392 <__divsf3>
    3ece:	a1 cf       	rjmp	.-190    	; 0x3e12 <__fp_inf>
    3ed0:	6d c1       	rjmp	.+730    	; 0x41ac <__fp_mpack>

00003ed2 <ldexp>:
    3ed2:	d5 df       	rcall	.-86     	; 0x3e7e <__fp_splitA>
    3ed4:	e8 f3       	brcs	.-6      	; 0x3ed0 <inverse+0x10>
    3ed6:	99 23       	and	r25, r25
    3ed8:	d9 f3       	breq	.-10     	; 0x3ed0 <inverse+0x10>
    3eda:	94 0f       	add	r25, r20
    3edc:	51 1d       	adc	r21, r1
    3ede:	bb f3       	brvs	.-18     	; 0x3ece <inverse+0xe>
    3ee0:	91 50       	subi	r25, 0x01	; 1
    3ee2:	50 40       	sbci	r21, 0x00	; 0
    3ee4:	94 f0       	brlt	.+36     	; 0x3f0a <ldexp+0x38>
    3ee6:	59 f0       	breq	.+22     	; 0x3efe <ldexp+0x2c>
    3ee8:	88 23       	and	r24, r24
    3eea:	32 f0       	brmi	.+12     	; 0x3ef8 <ldexp+0x26>
    3eec:	66 0f       	add	r22, r22
    3eee:	77 1f       	adc	r23, r23
    3ef0:	88 1f       	adc	r24, r24
    3ef2:	91 50       	subi	r25, 0x01	; 1
    3ef4:	50 40       	sbci	r21, 0x00	; 0
    3ef6:	c1 f7       	brne	.-16     	; 0x3ee8 <ldexp+0x16>
    3ef8:	9e 3f       	cpi	r25, 0xFE	; 254
    3efa:	51 05       	cpc	r21, r1
    3efc:	44 f7       	brge	.-48     	; 0x3ece <inverse+0xe>
    3efe:	88 0f       	add	r24, r24
    3f00:	91 1d       	adc	r25, r1
    3f02:	96 95       	lsr	r25
    3f04:	87 95       	ror	r24
    3f06:	97 f9       	bld	r25, 7
    3f08:	08 95       	ret
    3f0a:	5f 3f       	cpi	r21, 0xFF	; 255
    3f0c:	ac f0       	brlt	.+42     	; 0x3f38 <ldexp+0x66>
    3f0e:	98 3e       	cpi	r25, 0xE8	; 232
    3f10:	9c f0       	brlt	.+38     	; 0x3f38 <ldexp+0x66>
    3f12:	bb 27       	eor	r27, r27
    3f14:	86 95       	lsr	r24
    3f16:	77 95       	ror	r23
    3f18:	67 95       	ror	r22
    3f1a:	b7 95       	ror	r27
    3f1c:	08 f4       	brcc	.+2      	; 0x3f20 <ldexp+0x4e>
    3f1e:	b1 60       	ori	r27, 0x01	; 1
    3f20:	93 95       	inc	r25
    3f22:	c1 f7       	brne	.-16     	; 0x3f14 <ldexp+0x42>
    3f24:	bb 0f       	add	r27, r27
    3f26:	58 f7       	brcc	.-42     	; 0x3efe <ldexp+0x2c>
    3f28:	11 f4       	brne	.+4      	; 0x3f2e <ldexp+0x5c>
    3f2a:	60 ff       	sbrs	r22, 0
    3f2c:	e8 cf       	rjmp	.-48     	; 0x3efe <ldexp+0x2c>
    3f2e:	6f 5f       	subi	r22, 0xFF	; 255
    3f30:	7f 4f       	sbci	r23, 0xFF	; 255
    3f32:	8f 4f       	sbci	r24, 0xFF	; 255
    3f34:	9f 4f       	sbci	r25, 0xFF	; 255
    3f36:	e3 cf       	rjmp	.-58     	; 0x3efe <ldexp+0x2c>
    3f38:	bd cf       	rjmp	.-134    	; 0x3eb4 <__fp_szero>
    3f3a:	0e f0       	brts	.+2      	; 0x3f3e <ldexp+0x6c>
    3f3c:	37 c1       	rjmp	.+622    	; 0x41ac <__fp_mpack>
    3f3e:	6f cf       	rjmp	.-290    	; 0x3e1e <__fp_nan>
    3f40:	68 94       	set
    3f42:	67 cf       	rjmp	.-306    	; 0x3e12 <__fp_inf>

00003f44 <log>:
    3f44:	9c df       	rcall	.-200    	; 0x3e7e <__fp_splitA>
    3f46:	c8 f3       	brcs	.-14     	; 0x3f3a <ldexp+0x68>
    3f48:	99 23       	and	r25, r25
    3f4a:	d1 f3       	breq	.-12     	; 0x3f40 <ldexp+0x6e>
    3f4c:	c6 f3       	brts	.-16     	; 0x3f3e <ldexp+0x6c>
    3f4e:	df 93       	push	r29
    3f50:	cf 93       	push	r28
    3f52:	1f 93       	push	r17
    3f54:	0f 93       	push	r16
    3f56:	ff 92       	push	r15
    3f58:	c9 2f       	mov	r28, r25
    3f5a:	dd 27       	eor	r29, r29
    3f5c:	88 23       	and	r24, r24
    3f5e:	2a f0       	brmi	.+10     	; 0x3f6a <log+0x26>
    3f60:	21 97       	sbiw	r28, 0x01	; 1
    3f62:	66 0f       	add	r22, r22
    3f64:	77 1f       	adc	r23, r23
    3f66:	88 1f       	adc	r24, r24
    3f68:	da f7       	brpl	.-10     	; 0x3f60 <log+0x1c>
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	40 e8       	ldi	r20, 0x80	; 128
    3f70:	5f eb       	ldi	r21, 0xBF	; 191
    3f72:	9f e3       	ldi	r25, 0x3F	; 63
    3f74:	88 39       	cpi	r24, 0x98	; 152
    3f76:	20 f0       	brcs	.+8      	; 0x3f80 <log+0x3c>
    3f78:	80 3e       	cpi	r24, 0xE0	; 224
    3f7a:	30 f0       	brcs	.+12     	; 0x3f88 <log+0x44>
    3f7c:	21 96       	adiw	r28, 0x01	; 1
    3f7e:	8f 77       	andi	r24, 0x7F	; 127
    3f80:	e1 d8       	rcall	.-3646   	; 0x3144 <__addsf3>
    3f82:	ec e0       	ldi	r30, 0x0C	; 12
    3f84:	f1 e0       	ldi	r31, 0x01	; 1
    3f86:	03 c0       	rjmp	.+6      	; 0x3f8e <log+0x4a>
    3f88:	dd d8       	rcall	.-3654   	; 0x3144 <__addsf3>
    3f8a:	e9 e3       	ldi	r30, 0x39	; 57
    3f8c:	f1 e0       	ldi	r31, 0x01	; 1
    3f8e:	4a df       	rcall	.-364    	; 0x3e24 <__fp_powser>
    3f90:	8b 01       	movw	r16, r22
    3f92:	be 01       	movw	r22, r28
    3f94:	ec 01       	movw	r28, r24
    3f96:	fb 2e       	mov	r15, r27
    3f98:	6f 57       	subi	r22, 0x7F	; 127
    3f9a:	71 09       	sbc	r23, r1
    3f9c:	75 95       	asr	r23
    3f9e:	77 1f       	adc	r23, r23
    3fa0:	88 0b       	sbc	r24, r24
    3fa2:	99 0b       	sbc	r25, r25
    3fa4:	32 db       	rcall	.-2460   	; 0x360a <__floatsisf>
    3fa6:	28 e1       	ldi	r18, 0x18	; 24
    3fa8:	32 e7       	ldi	r19, 0x72	; 114
    3faa:	41 e3       	ldi	r20, 0x31	; 49
    3fac:	5f e3       	ldi	r21, 0x3F	; 63
    3fae:	47 d0       	rcall	.+142    	; 0x403e <__mulsf3x>
    3fb0:	af 2d       	mov	r26, r15
    3fb2:	98 01       	movw	r18, r16
    3fb4:	ae 01       	movw	r20, r28
    3fb6:	ff 90       	pop	r15
    3fb8:	0f 91       	pop	r16
    3fba:	1f 91       	pop	r17
    3fbc:	cf 91       	pop	r28
    3fbe:	df 91       	pop	r29
    3fc0:	a2 d0       	rcall	.+324    	; 0x4106 <__addsf3x>
    3fc2:	10 c1       	rjmp	.+544    	; 0x41e4 <__fp_round>

00003fc4 <modf>:
    3fc4:	fa 01       	movw	r30, r20
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	aa 0f       	add	r26, r26
    3fca:	bb 1f       	adc	r27, r27
    3fcc:	9b 01       	movw	r18, r22
    3fce:	ac 01       	movw	r20, r24
    3fd0:	bf 57       	subi	r27, 0x7F	; 127
    3fd2:	28 f4       	brcc	.+10     	; 0x3fde <modf+0x1a>
    3fd4:	22 27       	eor	r18, r18
    3fd6:	33 27       	eor	r19, r19
    3fd8:	44 27       	eor	r20, r20
    3fda:	50 78       	andi	r21, 0x80	; 128
    3fdc:	1f c0       	rjmp	.+62     	; 0x401c <modf+0x58>
    3fde:	b7 51       	subi	r27, 0x17	; 23
    3fe0:	88 f4       	brcc	.+34     	; 0x4004 <modf+0x40>
    3fe2:	ab 2f       	mov	r26, r27
    3fe4:	00 24       	eor	r0, r0
    3fe6:	46 95       	lsr	r20
    3fe8:	37 95       	ror	r19
    3fea:	27 95       	ror	r18
    3fec:	01 1c       	adc	r0, r1
    3fee:	a3 95       	inc	r26
    3ff0:	d2 f3       	brmi	.-12     	; 0x3fe6 <modf+0x22>
    3ff2:	00 20       	and	r0, r0
    3ff4:	69 f0       	breq	.+26     	; 0x4010 <modf+0x4c>
    3ff6:	22 0f       	add	r18, r18
    3ff8:	33 1f       	adc	r19, r19
    3ffa:	44 1f       	adc	r20, r20
    3ffc:	b3 95       	inc	r27
    3ffe:	da f3       	brmi	.-10     	; 0x3ff6 <modf+0x32>
    4000:	0d d0       	rcall	.+26     	; 0x401c <modf+0x58>
    4002:	6f c8       	rjmp	.-3874   	; 0x30e2 <__subsf3>
    4004:	61 30       	cpi	r22, 0x01	; 1
    4006:	71 05       	cpc	r23, r1
    4008:	a0 e8       	ldi	r26, 0x80	; 128
    400a:	8a 07       	cpc	r24, r26
    400c:	b9 46       	sbci	r27, 0x69	; 105
    400e:	30 f4       	brcc	.+12     	; 0x401c <modf+0x58>
    4010:	9b 01       	movw	r18, r22
    4012:	ac 01       	movw	r20, r24
    4014:	66 27       	eor	r22, r22
    4016:	77 27       	eor	r23, r23
    4018:	88 27       	eor	r24, r24
    401a:	90 78       	andi	r25, 0x80	; 128
    401c:	30 96       	adiw	r30, 0x00	; 0
    401e:	21 f0       	breq	.+8      	; 0x4028 <modf+0x64>
    4020:	20 83       	st	Z, r18
    4022:	31 83       	std	Z+1, r19	; 0x01
    4024:	42 83       	std	Z+2, r20	; 0x02
    4026:	53 83       	std	Z+3, r21	; 0x03
    4028:	08 95       	ret
    402a:	ce d0       	rcall	.+412    	; 0x41c8 <__fp_pscA>
    402c:	28 f0       	brcs	.+10     	; 0x4038 <modf+0x74>
    402e:	d3 d0       	rcall	.+422    	; 0x41d6 <__fp_pscB>
    4030:	18 f0       	brcs	.+6      	; 0x4038 <modf+0x74>
    4032:	95 23       	and	r25, r21
    4034:	09 f0       	breq	.+2      	; 0x4038 <modf+0x74>
    4036:	ed ce       	rjmp	.-550    	; 0x3e12 <__fp_inf>
    4038:	f2 ce       	rjmp	.-540    	; 0x3e1e <__fp_nan>
    403a:	11 24       	eor	r1, r1
    403c:	3b cf       	rjmp	.-394    	; 0x3eb4 <__fp_szero>

0000403e <__mulsf3x>:
    403e:	17 df       	rcall	.-466    	; 0x3e6e <__fp_split3>
    4040:	a0 f3       	brcs	.-24     	; 0x402a <modf+0x66>

00004042 <__mulsf3_pse>:
    4042:	95 9f       	mul	r25, r21
    4044:	d1 f3       	breq	.-12     	; 0x403a <modf+0x76>
    4046:	95 0f       	add	r25, r21
    4048:	50 e0       	ldi	r21, 0x00	; 0
    404a:	55 1f       	adc	r21, r21
    404c:	62 9f       	mul	r22, r18
    404e:	f0 01       	movw	r30, r0
    4050:	72 9f       	mul	r23, r18
    4052:	bb 27       	eor	r27, r27
    4054:	f0 0d       	add	r31, r0
    4056:	b1 1d       	adc	r27, r1
    4058:	63 9f       	mul	r22, r19
    405a:	aa 27       	eor	r26, r26
    405c:	f0 0d       	add	r31, r0
    405e:	b1 1d       	adc	r27, r1
    4060:	aa 1f       	adc	r26, r26
    4062:	64 9f       	mul	r22, r20
    4064:	66 27       	eor	r22, r22
    4066:	b0 0d       	add	r27, r0
    4068:	a1 1d       	adc	r26, r1
    406a:	66 1f       	adc	r22, r22
    406c:	82 9f       	mul	r24, r18
    406e:	22 27       	eor	r18, r18
    4070:	b0 0d       	add	r27, r0
    4072:	a1 1d       	adc	r26, r1
    4074:	62 1f       	adc	r22, r18
    4076:	73 9f       	mul	r23, r19
    4078:	b0 0d       	add	r27, r0
    407a:	a1 1d       	adc	r26, r1
    407c:	62 1f       	adc	r22, r18
    407e:	83 9f       	mul	r24, r19
    4080:	a0 0d       	add	r26, r0
    4082:	61 1d       	adc	r22, r1
    4084:	22 1f       	adc	r18, r18
    4086:	74 9f       	mul	r23, r20
    4088:	33 27       	eor	r19, r19
    408a:	a0 0d       	add	r26, r0
    408c:	61 1d       	adc	r22, r1
    408e:	23 1f       	adc	r18, r19
    4090:	84 9f       	mul	r24, r20
    4092:	60 0d       	add	r22, r0
    4094:	21 1d       	adc	r18, r1
    4096:	82 2f       	mov	r24, r18
    4098:	76 2f       	mov	r23, r22
    409a:	6a 2f       	mov	r22, r26
    409c:	11 24       	eor	r1, r1
    409e:	9f 57       	subi	r25, 0x7F	; 127
    40a0:	50 40       	sbci	r21, 0x00	; 0
    40a2:	8a f0       	brmi	.+34     	; 0x40c6 <__mulsf3_pse+0x84>
    40a4:	e1 f0       	breq	.+56     	; 0x40de <__mulsf3_pse+0x9c>
    40a6:	88 23       	and	r24, r24
    40a8:	4a f0       	brmi	.+18     	; 0x40bc <__mulsf3_pse+0x7a>
    40aa:	ee 0f       	add	r30, r30
    40ac:	ff 1f       	adc	r31, r31
    40ae:	bb 1f       	adc	r27, r27
    40b0:	66 1f       	adc	r22, r22
    40b2:	77 1f       	adc	r23, r23
    40b4:	88 1f       	adc	r24, r24
    40b6:	91 50       	subi	r25, 0x01	; 1
    40b8:	50 40       	sbci	r21, 0x00	; 0
    40ba:	a9 f7       	brne	.-22     	; 0x40a6 <__mulsf3_pse+0x64>
    40bc:	9e 3f       	cpi	r25, 0xFE	; 254
    40be:	51 05       	cpc	r21, r1
    40c0:	70 f0       	brcs	.+28     	; 0x40de <__mulsf3_pse+0x9c>
    40c2:	a7 ce       	rjmp	.-690    	; 0x3e12 <__fp_inf>
    40c4:	f7 ce       	rjmp	.-530    	; 0x3eb4 <__fp_szero>
    40c6:	5f 3f       	cpi	r21, 0xFF	; 255
    40c8:	ec f3       	brlt	.-6      	; 0x40c4 <__mulsf3_pse+0x82>
    40ca:	98 3e       	cpi	r25, 0xE8	; 232
    40cc:	dc f3       	brlt	.-10     	; 0x40c4 <__mulsf3_pse+0x82>
    40ce:	86 95       	lsr	r24
    40d0:	77 95       	ror	r23
    40d2:	67 95       	ror	r22
    40d4:	b7 95       	ror	r27
    40d6:	f7 95       	ror	r31
    40d8:	e7 95       	ror	r30
    40da:	9f 5f       	subi	r25, 0xFF	; 255
    40dc:	c1 f7       	brne	.-16     	; 0x40ce <__mulsf3_pse+0x8c>
    40de:	fe 2b       	or	r31, r30
    40e0:	88 0f       	add	r24, r24
    40e2:	91 1d       	adc	r25, r1
    40e4:	96 95       	lsr	r25
    40e6:	87 95       	ror	r24
    40e8:	97 f9       	bld	r25, 7
    40ea:	08 95       	ret
    40ec:	6d d0       	rcall	.+218    	; 0x41c8 <__fp_pscA>
    40ee:	30 f0       	brcs	.+12     	; 0x40fc <__mulsf3_pse+0xba>
    40f0:	72 d0       	rcall	.+228    	; 0x41d6 <__fp_pscB>
    40f2:	20 f0       	brcs	.+8      	; 0x40fc <__mulsf3_pse+0xba>
    40f4:	31 f4       	brne	.+12     	; 0x4102 <__mulsf3_pse+0xc0>
    40f6:	9f 3f       	cpi	r25, 0xFF	; 255
    40f8:	11 f4       	brne	.+4      	; 0x40fe <__mulsf3_pse+0xbc>
    40fa:	1e f4       	brtc	.+6      	; 0x4102 <__mulsf3_pse+0xc0>
    40fc:	90 ce       	rjmp	.-736    	; 0x3e1e <__fp_nan>
    40fe:	0e f4       	brtc	.+2      	; 0x4102 <__mulsf3_pse+0xc0>
    4100:	e0 95       	com	r30
    4102:	e7 fb       	bst	r30, 7
    4104:	86 ce       	rjmp	.-756    	; 0x3e12 <__fp_inf>

00004106 <__addsf3x>:
    4106:	e9 2f       	mov	r30, r25
    4108:	b2 de       	rcall	.-668    	; 0x3e6e <__fp_split3>
    410a:	80 f3       	brcs	.-32     	; 0x40ec <__mulsf3_pse+0xaa>
    410c:	ba 17       	cp	r27, r26
    410e:	62 07       	cpc	r22, r18
    4110:	73 07       	cpc	r23, r19
    4112:	84 07       	cpc	r24, r20
    4114:	95 07       	cpc	r25, r21
    4116:	18 f0       	brcs	.+6      	; 0x411e <__addsf3x+0x18>
    4118:	71 f4       	brne	.+28     	; 0x4136 <__addsf3x+0x30>
    411a:	9e f5       	brtc	.+102    	; 0x4182 <__addsf3x+0x7c>
    411c:	ca ce       	rjmp	.-620    	; 0x3eb2 <__fp_zero>
    411e:	0e f4       	brtc	.+2      	; 0x4122 <__addsf3x+0x1c>
    4120:	e0 95       	com	r30
    4122:	0b 2e       	mov	r0, r27
    4124:	ba 2f       	mov	r27, r26
    4126:	a0 2d       	mov	r26, r0
    4128:	0b 01       	movw	r0, r22
    412a:	b9 01       	movw	r22, r18
    412c:	90 01       	movw	r18, r0
    412e:	0c 01       	movw	r0, r24
    4130:	ca 01       	movw	r24, r20
    4132:	a0 01       	movw	r20, r0
    4134:	11 24       	eor	r1, r1
    4136:	ff 27       	eor	r31, r31
    4138:	59 1b       	sub	r21, r25
    413a:	99 f0       	breq	.+38     	; 0x4162 <__addsf3x+0x5c>
    413c:	59 3f       	cpi	r21, 0xF9	; 249
    413e:	50 f4       	brcc	.+20     	; 0x4154 <__addsf3x+0x4e>
    4140:	50 3e       	cpi	r21, 0xE0	; 224
    4142:	68 f1       	brcs	.+90     	; 0x419e <__addsf3x+0x98>
    4144:	1a 16       	cp	r1, r26
    4146:	f0 40       	sbci	r31, 0x00	; 0
    4148:	a2 2f       	mov	r26, r18
    414a:	23 2f       	mov	r18, r19
    414c:	34 2f       	mov	r19, r20
    414e:	44 27       	eor	r20, r20
    4150:	58 5f       	subi	r21, 0xF8	; 248
    4152:	f3 cf       	rjmp	.-26     	; 0x413a <__addsf3x+0x34>
    4154:	46 95       	lsr	r20
    4156:	37 95       	ror	r19
    4158:	27 95       	ror	r18
    415a:	a7 95       	ror	r26
    415c:	f0 40       	sbci	r31, 0x00	; 0
    415e:	53 95       	inc	r21
    4160:	c9 f7       	brne	.-14     	; 0x4154 <__addsf3x+0x4e>
    4162:	7e f4       	brtc	.+30     	; 0x4182 <__addsf3x+0x7c>
    4164:	1f 16       	cp	r1, r31
    4166:	ba 0b       	sbc	r27, r26
    4168:	62 0b       	sbc	r22, r18
    416a:	73 0b       	sbc	r23, r19
    416c:	84 0b       	sbc	r24, r20
    416e:	ba f0       	brmi	.+46     	; 0x419e <__addsf3x+0x98>
    4170:	91 50       	subi	r25, 0x01	; 1
    4172:	a1 f0       	breq	.+40     	; 0x419c <__addsf3x+0x96>
    4174:	ff 0f       	add	r31, r31
    4176:	bb 1f       	adc	r27, r27
    4178:	66 1f       	adc	r22, r22
    417a:	77 1f       	adc	r23, r23
    417c:	88 1f       	adc	r24, r24
    417e:	c2 f7       	brpl	.-16     	; 0x4170 <__addsf3x+0x6a>
    4180:	0e c0       	rjmp	.+28     	; 0x419e <__addsf3x+0x98>
    4182:	ba 0f       	add	r27, r26
    4184:	62 1f       	adc	r22, r18
    4186:	73 1f       	adc	r23, r19
    4188:	84 1f       	adc	r24, r20
    418a:	48 f4       	brcc	.+18     	; 0x419e <__addsf3x+0x98>
    418c:	87 95       	ror	r24
    418e:	77 95       	ror	r23
    4190:	67 95       	ror	r22
    4192:	b7 95       	ror	r27
    4194:	f7 95       	ror	r31
    4196:	9e 3f       	cpi	r25, 0xFE	; 254
    4198:	08 f0       	brcs	.+2      	; 0x419c <__addsf3x+0x96>
    419a:	b3 cf       	rjmp	.-154    	; 0x4102 <__mulsf3_pse+0xc0>
    419c:	93 95       	inc	r25
    419e:	88 0f       	add	r24, r24
    41a0:	08 f0       	brcs	.+2      	; 0x41a4 <__addsf3x+0x9e>
    41a2:	99 27       	eor	r25, r25
    41a4:	ee 0f       	add	r30, r30
    41a6:	97 95       	ror	r25
    41a8:	87 95       	ror	r24
    41aa:	08 95       	ret

000041ac <__fp_mpack>:
    41ac:	9f 3f       	cpi	r25, 0xFF	; 255
    41ae:	31 f0       	breq	.+12     	; 0x41bc <__fp_mpack_finite+0xc>

000041b0 <__fp_mpack_finite>:
    41b0:	91 50       	subi	r25, 0x01	; 1
    41b2:	20 f4       	brcc	.+8      	; 0x41bc <__fp_mpack_finite+0xc>
    41b4:	87 95       	ror	r24
    41b6:	77 95       	ror	r23
    41b8:	67 95       	ror	r22
    41ba:	b7 95       	ror	r27
    41bc:	88 0f       	add	r24, r24
    41be:	91 1d       	adc	r25, r1
    41c0:	96 95       	lsr	r25
    41c2:	87 95       	ror	r24
    41c4:	97 f9       	bld	r25, 7
    41c6:	08 95       	ret

000041c8 <__fp_pscA>:
    41c8:	00 24       	eor	r0, r0
    41ca:	0a 94       	dec	r0
    41cc:	16 16       	cp	r1, r22
    41ce:	17 06       	cpc	r1, r23
    41d0:	18 06       	cpc	r1, r24
    41d2:	09 06       	cpc	r0, r25
    41d4:	08 95       	ret

000041d6 <__fp_pscB>:
    41d6:	00 24       	eor	r0, r0
    41d8:	0a 94       	dec	r0
    41da:	12 16       	cp	r1, r18
    41dc:	13 06       	cpc	r1, r19
    41de:	14 06       	cpc	r1, r20
    41e0:	05 06       	cpc	r0, r21
    41e2:	08 95       	ret

000041e4 <__fp_round>:
    41e4:	09 2e       	mov	r0, r25
    41e6:	03 94       	inc	r0
    41e8:	00 0c       	add	r0, r0
    41ea:	11 f4       	brne	.+4      	; 0x41f0 <__fp_round+0xc>
    41ec:	88 23       	and	r24, r24
    41ee:	52 f0       	brmi	.+20     	; 0x4204 <__fp_round+0x20>
    41f0:	bb 0f       	add	r27, r27
    41f2:	40 f4       	brcc	.+16     	; 0x4204 <__fp_round+0x20>
    41f4:	bf 2b       	or	r27, r31
    41f6:	11 f4       	brne	.+4      	; 0x41fc <__fp_round+0x18>
    41f8:	60 ff       	sbrs	r22, 0
    41fa:	04 c0       	rjmp	.+8      	; 0x4204 <__fp_round+0x20>
    41fc:	6f 5f       	subi	r22, 0xFF	; 255
    41fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4200:	8f 4f       	sbci	r24, 0xFF	; 255
    4202:	9f 4f       	sbci	r25, 0xFF	; 255
    4204:	08 95       	ret

00004206 <_exit>:
    4206:	f8 94       	cli

00004208 <__stop_program>:
    4208:	ff cf       	rjmp	.-2      	; 0x4208 <__stop_program>
