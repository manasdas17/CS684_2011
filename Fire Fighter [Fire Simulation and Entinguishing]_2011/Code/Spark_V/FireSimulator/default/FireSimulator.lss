
FireSimulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  000007c4  00000858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  008000b8  008000b8  000008b0  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002a1  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d33  00000000  00000000  00000b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000395  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ceb  00000000  00000000  00001c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  00002944  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000322  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004d6  00000000  00000000  00002e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000333c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 eb       	ldi	r26, 0xB8	; 184
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3e       	cpi	r26, 0xEB	; 235
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
  8a:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_pin_config>:


//ADC pin configuration
void adc_pin_config (void)
{
	DDRA = 0x00;  //set PORTA direction as input
  92:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00; //set PORTA pins floating
  94:	1b ba       	out	0x1b, r1	; 27
}
  96:	08 95       	ret

00000098 <motion_pin_config>:


void motion_pin_config (void)
{
	DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	8f 60       	ori	r24, 0x0F	; 15
  9c:	87 bb       	out	0x17, r24	; 23
	PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	88 bb       	out	0x18, r24	; 24
	DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	80 63       	ori	r24, 0x30	; 48
  a8:	81 bb       	out	0x11, r24	; 17
	PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	80 63       	ori	r24, 0x30	; 48
  ae:	82 bb       	out	0x12, r24	; 18
}
  b0:	08 95       	ret

000000b2 <buzzer_pin_config>:


void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
  b2:	a3 9a       	sbi	0x14, 3	; 20
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
  b4:	ab 98       	cbi	0x15, 3	; 21
}
  b6:	08 95       	ret

000000b8 <adc_init>:


//Function to Initialize ADC
void adc_init()
{
	ADCSRA = 0x00;
  b8:	16 b8       	out	0x06, r1	; 6
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	87 b9       	out	0x07, r24	; 7
	ACSR = 0x80;
  be:	80 e8       	ldi	r24, 0x80	; 128
  c0:	88 b9       	out	0x08, r24	; 8
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
  c2:	86 e8       	ldi	r24, 0x86	; 134
  c4:	86 b9       	out	0x06, r24	; 6
}
  c6:	08 95       	ret

000000c8 <ADC_Conversion>:
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
  c8:	87 70       	andi	r24, 0x07	; 7
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	87 b9       	out	0x07, r24	; 7
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
  ce:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
  d0:	34 9b       	sbis	0x06, 4	; 6
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <ADC_Conversion+0x8>
	a=ADCH;
  d4:	85 b1       	in	r24, 0x05	; 5
	ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
  d6:	34 9a       	sbi	0x06, 4	; 6
	return a;
}
  d8:	08 95       	ret

000000da <uart0_init>:
// actual: baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSRB = 0x00; //disable while setting baud rate
  da:	1a b8       	out	0x0a, r1	; 10
	UCSRA = 0x00;
  dc:	1b b8       	out	0x0b, r1	; 11
	UCSRC = 0x86;
  de:	86 e8       	ldi	r24, 0x86	; 134
  e0:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
  e2:	8f e2       	ldi	r24, 0x2F	; 47
  e4:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00; //set baud rate hi
  e6:	10 bc       	out	0x20, r1	; 32
	UCSRB = 0x98; 
  e8:	88 e9       	ldi	r24, 0x98	; 152
  ea:	8a b9       	out	0x0a, r24	; 10
}
  ec:	08 95       	ret

000000ee <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortBRestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortBRestore = PORTB; 			// reading the PORTB's original status
  ee:	98 b3       	in	r25, 0x18	; 24
	PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
  f0:	90 7f       	andi	r25, 0xF0	; 240
	PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
  f2:	8f 70       	andi	r24, 0x0F	; 15
  f4:	89 2b       	or	r24, r25
	PORTB = PortBRestore; 			// setting the command to the port
  f6:	88 bb       	out	0x18, r24	; 24
}
  f8:	08 95       	ret

000000fa <forward>:
void motion_set (unsigned char Direction)
{
	unsigned char PortBRestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortBRestore = PORTB; 			// reading the PORTB's original status
  fa:	88 b3       	in	r24, 0x18	; 24
	PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
  fc:	80 7f       	andi	r24, 0xF0	; 240
	PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
  fe:	86 60       	ori	r24, 0x06	; 6
	PORTB = PortBRestore; 			// setting the command to the port
 100:	88 bb       	out	0x18, r24	; 24


void forward (void)         //both wheels forward
{
	motion_set(0x06);
}
 102:	08 95       	ret

00000104 <backward>:
void motion_set (unsigned char Direction)
{
	unsigned char PortBRestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortBRestore = PORTB; 			// reading the PORTB's original status
 104:	88 b3       	in	r24, 0x18	; 24
	PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 106:	80 7f       	andi	r24, 0xF0	; 240
	PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 108:	89 60       	ori	r24, 0x09	; 9
	PORTB = PortBRestore; 			// setting the command to the port
 10a:	88 bb       	out	0x18, r24	; 24


void backward (void)        //both wheels backward
{
	motion_set(0x09);
}
 10c:	08 95       	ret

0000010e <left>:
void motion_set (unsigned char Direction)
{
	unsigned char PortBRestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortBRestore = PORTB; 			// reading the PORTB's original status
 10e:	88 b3       	in	r24, 0x18	; 24
	PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 110:	80 7f       	andi	r24, 0xF0	; 240
	PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 112:	85 60       	ori	r24, 0x05	; 5
	PORTB = PortBRestore; 			// setting the command to the port
 114:	88 bb       	out	0x18, r24	; 24


void left (void)            //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
}
 116:	08 95       	ret

00000118 <right>:
void motion_set (unsigned char Direction)
{
	unsigned char PortBRestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortBRestore = PORTB; 			// reading the PORTB's original status
 118:	88 b3       	in	r24, 0x18	; 24
	PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 11a:	80 7f       	andi	r24, 0xF0	; 240
	PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 11c:	8a 60       	ori	r24, 0x0A	; 10
	PORTB = PortBRestore; 			// setting the command to the port
 11e:	88 bb       	out	0x18, r24	; 24


void right (void)           //Left wheel forward, Right wheel backward
{   
	motion_set(0x0A);
}
 120:	08 95       	ret

00000122 <stop>:
void motion_set (unsigned char Direction)
{
	unsigned char PortBRestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortBRestore = PORTB; 			// reading the PORTB's original status
 122:	88 b3       	in	r24, 0x18	; 24
	PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 124:	80 7f       	andi	r24, 0xF0	; 240
	PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
	PORTB = PortBRestore; 			// setting the command to the port
 126:	88 bb       	out	0x18, r24	; 24


void stop (void)            //hard stop
{
	motion_set(0x00);
}
 128:	08 95       	ret

0000012a <buzzer_on>:


void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 12a:	83 b3       	in	r24, 0x13	; 19
	port_restore = port_restore | 0x08;
 12c:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
 12e:	85 bb       	out	0x15, r24	; 21
}
 130:	08 95       	ret

00000132 <buzzer_off>:


void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 132:	83 b3       	in	r24, 0x13	; 19
	port_restore = port_restore & 0xF7;
 134:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
 136:	85 bb       	out	0x15, r24	; 21
}
 138:	08 95       	ret

0000013a <end_fire>:


// Stop the fire
void end_fire(void)
{
	onFire = 0;
 13a:	10 92 bb 00 	sts	0x00BB, r1
 13e:	10 92 ba 00 	sts	0x00BA, r1
 142:	88 ee       	ldi	r24, 0xE8	; 232
 144:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 146:	28 eb       	ldi	r18, 0xB8	; 184
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <end_fire+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 150:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 152:	d9 f7       	brne	.-10     	; 0x14a <end_fire+0x10>

	_delay_ms((((int) NODE_ID) - 48)*25);		//back off delay to avoid collision
	UDR = '3';									//fire extinguished message sent to firebird
 154:	83 e3       	ldi	r24, 0x33	; 51
 156:	8c b9       	out	0x0c, r24	; 12
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	98 e4       	ldi	r25, 0x48	; 72
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <end_fire+0x22>
	_delay_ms(10);
	UDR = NODE_ID;								//send the node id on which fire is extinguished
 160:	84 e3       	ldi	r24, 0x34	; 52
 162:	8c b9       	out	0x0c, r24	; 12

	lcd_cursor(1,1);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	0e 94 20 03 	call	0x640	; 0x640 <lcd_cursor>
	lcd_string("               ");
 170:	80 e6       	ldi	r24, 0x60	; 96
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 13 03 	call	0x626	; 0x626 <lcd_string>
	lcd_cursor(1,1);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	0e 94 20 03 	call	0x640	; 0x640 <lcd_cursor>
	lcd_string("NO FIRE!! :-)   ");				//display no fire on lcd
 184:	80 e7       	ldi	r24, 0x70	; 112
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 13 03 	call	0x626	; 0x626 <lcd_string>
}
 18c:	08 95       	ret

0000018e <fire>:


//put fire on this node
void fire(void)
{
	onFire = 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	90 93 bb 00 	sts	0x00BB, r25
 196:	80 93 ba 00 	sts	0x00BA, r24
 19a:	88 ee       	ldi	r24, 0xE8	; 232
 19c:	93 e0       	ldi	r25, 0x03	; 3
 19e:	28 eb       	ldi	r18, 0xB8	; 184
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <fire+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1aa:	d9 f7       	brne	.-10     	; 0x1a2 <fire+0x14>

	_delay_ms((((int) NODE_ID) - 48)*25);		//back off delay to avoid collision
	UDR = '1';									//send fire start message to firebird
 1ac:	81 e3       	ldi	r24, 0x31	; 49
 1ae:	8c b9       	out	0x0c, r24	; 12
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	98 e4       	ldi	r25, 0x48	; 72
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <fire+0x26>
	_delay_ms(10);
	UDR = NODE_ID;								//send the node id on which fire has started to firebird
 1b8:	84 e3       	ldi	r24, 0x34	; 52
 1ba:	8c b9       	out	0x0c, r24	; 12

	lcd_cursor(1,1);
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	0e 94 20 03 	call	0x640	; 0x640 <lcd_cursor>
	lcd_string("               ");
 1c8:	80 e6       	ldi	r24, 0x60	; 96
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 13 03 	call	0x626	; 0x626 <lcd_string>
	lcd_cursor(1,1);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	0e 94 20 03 	call	0x640	; 0x640 <lcd_cursor>
	lcd_string("FIRE!");						//display fire on lcd
 1dc:	81 e8       	ldi	r24, 0x81	; 129
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 13 03 	call	0x626	; 0x626 <lcd_string>
}
 1e4:	08 95       	ret

000001e6 <__vector_11>:
}


// ZigBee Communication
SIGNAL(SIG_UART_RECV) 
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	4f 93       	push	r20
 1f6:	5f 93       	push	r21
 1f8:	6f 93       	push	r22
 1fa:	7f 93       	push	r23
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	af 93       	push	r26
 202:	bf 93       	push	r27
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
	unsigned char receive_data=0;  					// used to save Receiving data
	int i=0,r,c;
	receive_data = UDR;								// store the received byte
 208:	4c b1       	in	r20, 0x0c	; 12
		
	if(totalData == 0){								//receive 1st byte
 20a:	80 91 b8 00 	lds	r24, 0x00B8
 20e:	90 91 b9 00 	lds	r25, 0x00B9
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	b1 f4       	brne	.+44     	; 0x242 <__vector_11+0x5c>
		totalData++;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 b9 00 	sts	0x00B9, r25
 21e:	80 93 b8 00 	sts	0x00B8, r24
		firstByte = receive_data;
 222:	40 93 b6 00 	sts	0x00B6, r20
		if(firstByte == '5'){						//set topology of nodes
 226:	45 33       	cpi	r20, 0x35	; 53
 228:	09 f0       	breq	.+2      	; 0x22c <__vector_11+0x46>
 22a:	a3 c0       	rjmp	.+326    	; 0x372 <__vector_11+0x18c>
			topoUpdate = 1;
 22c:	90 93 bd 00 	sts	0x00BD, r25
 230:	80 93 bc 00 	sts	0x00BC, r24
			lcd_cursor(1,1);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	0e 94 20 03 	call	0x640	; 0x640 <lcd_cursor>
			lcd_string("TOPOLOGY");
 23c:	87 e8       	ldi	r24, 0x87	; 135
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	78 c0       	rjmp	.+240    	; 0x332 <__vector_11+0x14c>
		else{
		//	lcd_cursor(1,1);		
		//	lcd_string("               ");
		}
	}
	else if(totalData == 1){								// receive 2nd byte
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	09 f0       	breq	.+2      	; 0x248 <__vector_11+0x62>
 246:	95 c0       	rjmp	.+298    	; 0x372 <__vector_11+0x18c>
		if(firstByte == TOPOLOGY || topoUpdate == 1){		//setting topology
 248:	20 91 b6 00 	lds	r18, 0x00B6
 24c:	25 33       	cpi	r18, 0x35	; 53
 24e:	39 f0       	breq	.+14     	; 0x25e <__vector_11+0x78>
 250:	80 91 bc 00 	lds	r24, 0x00BC
 254:	90 91 bd 00 	lds	r25, 0x00BD
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	09 f0       	breq	.+2      	; 0x25e <__vector_11+0x78>
 25c:	6d c0       	rjmp	.+218    	; 0x338 <__vector_11+0x152>
			topoUpdate = 1;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 bd 00 	sts	0x00BD, r25
 266:	80 93 bc 00 	sts	0x00BC, r24
			topology[rtopo][ctopo] = receive_data;			//add the neighbours of this node
 26a:	20 91 be 00 	lds	r18, 0x00BE
 26e:	30 91 bf 00 	lds	r19, 0x00BF
 272:	80 91 c0 00 	lds	r24, 0x00C0
 276:	90 91 c1 00 	lds	r25, 0x00C1
 27a:	f9 01       	movw	r30, r18
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	e8 0f       	add	r30, r24
 286:	f9 1f       	adc	r31, r25
 288:	e4 53       	subi	r30, 0x34	; 52
 28a:	ff 4f       	sbci	r31, 0xFF	; 255
 28c:	40 83       	st	Z, r20
			ctopo++;
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	90 93 c1 00 	sts	0x00C1, r25
 294:	80 93 c0 00 	sts	0x00C0, r24

			if(ctopo == TOTAL_NODES){
 298:	04 97       	sbiw	r24, 0x04	; 4
 29a:	c1 f4       	brne	.+48     	; 0x2cc <__vector_11+0xe6>
				ctopo = 0;
 29c:	10 92 c1 00 	sts	0x00C1, r1
 2a0:	10 92 c0 00 	sts	0x00C0, r1
				rtopo++;
 2a4:	c9 01       	movw	r24, r18
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	90 93 bf 00 	sts	0x00BF, r25
 2ac:	80 93 be 00 	sts	0x00BE, r24
				if(rtopo == TOTAL_NODES){
 2b0:	04 97       	sbiw	r24, 0x04	; 4
 2b2:	61 f4       	brne	.+24     	; 0x2cc <__vector_11+0xe6>
					rtopo = 0;
 2b4:	10 92 bf 00 	sts	0x00BF, r1
 2b8:	10 92 be 00 	sts	0x00BE, r1
					topoUpdate = 0;
 2bc:	10 92 bd 00 	sts	0x00BD, r1
 2c0:	10 92 bc 00 	sts	0x00BC, r1
					totalData = 0;
 2c4:	10 92 b9 00 	sts	0x00B9, r1
 2c8:	10 92 b8 00 	sts	0x00B8, r1
				}
			}

			lcd_cursor(1,1);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	0e 94 20 03 	call	0x640	; 0x640 <lcd_cursor>
  			lcd_string("          ");
 2d8:	80 e9       	ldi	r24, 0x90	; 144
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 13 03 	call	0x626	; 0x626 <lcd_string>
			lcd_cursor(1,1);
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	0e 94 20 03 	call	0x640	; 0x640 <lcd_cursor>
			string[0]=topology[0][0];
 2ec:	80 91 cc 00 	lds	r24, 0x00CC
 2f0:	80 93 c2 00 	sts	0x00C2, r24
			string[1]=topology[0][1];
 2f4:	80 91 cd 00 	lds	r24, 0x00CD
 2f8:	80 93 c3 00 	sts	0x00C3, r24
			string[2]=topology[1][0];
 2fc:	80 91 d0 00 	lds	r24, 0x00D0
 300:	80 93 c4 00 	sts	0x00C4, r24
			string[3]=topology[1][1];
 304:	80 91 d1 00 	lds	r24, 0x00D1
 308:	80 93 c5 00 	sts	0x00C5, r24
			string[4]=totalData + 48;
 30c:	80 91 b8 00 	lds	r24, 0x00B8
 310:	80 5d       	subi	r24, 0xD0	; 208
 312:	80 93 c6 00 	sts	0x00C6, r24
			string[5]=topoUpdate + 48;
 316:	80 91 bc 00 	lds	r24, 0x00BC
 31a:	80 5d       	subi	r24, 0xD0	; 208
 31c:	80 93 c7 00 	sts	0x00C7, r24
			string[6]=onFire + 48;
 320:	80 91 ba 00 	lds	r24, 0x00BA
 324:	80 5d       	subi	r24, 0xD0	; 208
 326:	80 93 c8 00 	sts	0x00C8, r24
			string[7]='\0';
 32a:	10 92 c9 00 	sts	0x00C9, r1
			lcd_string(string);
 32e:	82 ec       	ldi	r24, 0xC2	; 194
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 13 03 	call	0x626	; 0x626 <lcd_string>
 336:	1d c0       	rjmp	.+58     	; 0x372 <__vector_11+0x18c>
		}
		else if(firstByte == '2' && onFire == 0){			//if firstbyte is 2 i.e it received a fire spread message & it is not on fire
 338:	22 33       	cpi	r18, 0x32	; 50
 33a:	b9 f4       	brne	.+46     	; 0x36a <__vector_11+0x184>
 33c:	80 91 ba 00 	lds	r24, 0x00BA
 340:	90 91 bb 00 	lds	r25, 0x00BB
 344:	89 2b       	or	r24, r25
 346:	89 f4       	brne	.+34     	; 0x36a <__vector_11+0x184>
			firstByte = 0xFF;
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	80 93 b6 00 	sts	0x00B6, r24
			totalData=0;
 34e:	10 92 b9 00 	sts	0x00B9, r1
 352:	10 92 b8 00 	sts	0x00B8, r1
			if(topology[NODE_ID - 49][receive_data - 49] == '1'){	//check if the spread message is from one of its neighbours then set fire
 356:	e4 2f       	mov	r30, r20
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	e9 55       	subi	r30, 0x59	; 89
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	80 81       	ld	r24, Z
 360:	81 33       	cpi	r24, 0x31	; 49
 362:	39 f4       	brne	.+14     	; 0x372 <__vector_11+0x18c>
					fire();
 364:	0e 94 c7 00 	call	0x18e	; 0x18e <fire>
 368:	04 c0       	rjmp	.+8      	; 0x372 <__vector_11+0x18c>
			}
		}
		else{								
			totalData=0;
 36a:	10 92 b9 00 	sts	0x00B9, r1
 36e:	10 92 b8 00 	sts	0x00B8, r1
		}
	}		
}
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <port_init>:
}


void motion_pin_config (void)
{
	DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
 394:	87 b3       	in	r24, 0x17	; 23
 396:	8f 60       	ori	r24, 0x0F	; 15
 398:	87 bb       	out	0x17, r24	; 23
	PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
 39a:	88 b3       	in	r24, 0x18	; 24
 39c:	80 7f       	andi	r24, 0xF0	; 240
 39e:	88 bb       	out	0x18, r24	; 24
	DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
 3a0:	81 b3       	in	r24, 0x11	; 17
 3a2:	80 63       	ori	r24, 0x30	; 48
 3a4:	81 bb       	out	0x11, r24	; 17
	PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
 3a6:	82 b3       	in	r24, 0x12	; 18
 3a8:	80 63       	ori	r24, 0x30	; 48
 3aa:	82 bb       	out	0x12, r24	; 18
}


void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 3ac:	a3 9a       	sbi	0x14, 3	; 20
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 3ae:	ab 98       	cbi	0x15, 3	; 21
//Function to initialize ports
void port_init()
{
	motion_pin_config();
	buzzer_pin_config();
	lcd_port_config();
 3b0:	0e 94 80 02 	call	0x500	; 0x500 <lcd_port_config>


//ADC pin configuration
void adc_pin_config (void)
{
	DDRA = 0x00;  //set PORTA direction as input
 3b4:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00; //set PORTA pins floating
 3b6:	1b ba       	out	0x1b, r1	; 27
	motion_pin_config();
	buzzer_pin_config();
	lcd_port_config();
	//lcd_port_config();
	adc_pin_config();
}
 3b8:	08 95       	ret

000003ba <init_devices>:
}


void init_devices (void)
{
	cli();         //Clears the global interrupts
 3ba:	f8 94       	cli
	port_init();
 3bc:	0e 94 ca 01 	call	0x394	; 0x394 <port_init>
// actual: baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSRB = 0x00; //disable while setting baud rate
 3c0:	1a b8       	out	0x0a, r1	; 10
	UCSRA = 0x00;
 3c2:	1b b8       	out	0x0b, r1	; 11
	UCSRC = 0x86;
 3c4:	96 e8       	ldi	r25, 0x86	; 134
 3c6:	90 bd       	out	0x20, r25	; 32
	UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
 3c8:	8f e2       	ldi	r24, 0x2F	; 47
 3ca:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00; //set baud rate hi
 3cc:	10 bc       	out	0x20, r1	; 32
	UCSRB = 0x98; 
 3ce:	88 e9       	ldi	r24, 0x98	; 152
 3d0:	8a b9       	out	0x0a, r24	; 10


//Function to Initialize ADC
void adc_init()
{
	ADCSRA = 0x00;
 3d2:	16 b8       	out	0x06, r1	; 6
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 3d4:	80 e2       	ldi	r24, 0x20	; 32
 3d6:	87 b9       	out	0x07, r24	; 7
	ACSR = 0x80;
 3d8:	80 e8       	ldi	r24, 0x80	; 128
 3da:	88 b9       	out	0x08, r24	; 8
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 3dc:	96 b9       	out	0x06, r25	; 6
{
	cli();         //Clears the global interrupts
	port_init();
	uart0_init();
	adc_init();
	sei();         //Enables the global interrupts
 3de:	78 94       	sei
}
 3e0:	08 95       	ret

000003e2 <main>:
}


//Main Function
int main()
{
 3e2:	bf 92       	push	r11
 3e4:	cf 92       	push	r12
 3e6:	df 92       	push	r13
 3e8:	ef 92       	push	r14
 3ea:	ff 92       	push	r15
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
	init_devices();
 3f4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <init_devices>
	lcd_set_4bit();
 3f8:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_set_4bit>
	lcd_init();
 3fc:	0e 94 da 02 	call	0x5b4	; 0x5b4 <lcd_init>
 400:	c0 e0       	ldi	r28, 0x00	; 0
 402:	d0 e0       	ldi	r29, 0x00	; 0
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	08 eb       	ldi	r16, 0xB8	; 184
 40a:	10 e0       	ldi	r17, 0x00	; 0
				fire_level++;
				time_count = 0;
				lcd_cursor(1,1);
				lcd_string("FIRE!FIRE!FIRE!");
				_delay_ms((((int) NODE_ID) - 48)*25);		//back off delay 
				UDR = '2';									//send fire spread message
 40c:	f2 e3       	ldi	r31, 0x32	; 50
 40e:	bf 2e       	mov	r11, r31
 410:	e1 2c       	mov	r14, r1
 412:	e8 e4       	ldi	r30, 0x48	; 72
 414:	fe 2e       	mov	r15, r30
				_delay_ms(10);
				UDR = NODE_ID;								//send the node id to whom neighbours are to be set on fire
 416:	74 e3       	ldi	r23, 0x34	; 52
 418:	c7 2e       	mov	r12, r23
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
 41a:	61 e2       	ldi	r22, 0x21	; 33
 41c:	d6 2e       	mov	r13, r22
	int fire_level=0;
	//lcd_cursor(1,5);
	//lcd_string(UDR);

	while(1) {
		if(onFire == 1 && fire_level == 0){			//indicating fire just started on the bot
 41e:	80 91 ba 00 	lds	r24, 0x00BA
 422:	90 91 bb 00 	lds	r25, 0x00BB
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	31 f4       	brne	.+12     	; 0x436 <main+0x54>
 42a:	21 15       	cp	r18, r1
 42c:	31 05       	cpc	r19, r1
 42e:	19 f4       	brne	.+6      	; 0x436 <main+0x54>
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	37 c0       	rjmp	.+110    	; 0x4a4 <__stack+0x45>
			fire_level = 1;
		}
		else if(fire_level == 1){					//increase fire on the bot after some delay
 436:	21 30       	cpi	r18, 0x01	; 1
 438:	31 05       	cpc	r19, r1
 43a:	99 f4       	brne	.+38     	; 0x462 <__stack+0x3>
			time_count++;
 43c:	21 96       	adiw	r28, 0x01	; 1
			if(time_count > 30){
 43e:	cf 31       	cpi	r28, 0x1F	; 31
 440:	d1 05       	cpc	r29, r1
 442:	84 f1       	brlt	.+96     	; 0x4a4 <__stack+0x45>
				fire_level++;
				time_count = 0;
				lcd_cursor(1,1);
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	0e 94 20 03 	call	0x640	; 0x640 <lcd_cursor>
  				lcd_string("FIRE!FIRE!");
 450:	8b e9       	ldi	r24, 0x9B	; 155
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 13 03 	call	0x626	; 0x626 <lcd_string>
 458:	c0 e0       	ldi	r28, 0x00	; 0
 45a:	d0 e0       	ldi	r29, 0x00	; 0
 45c:	22 e0       	ldi	r18, 0x02	; 2
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	21 c0       	rjmp	.+66     	; 0x4a4 <__stack+0x45>
			}
		}
		else if(fire_level == 2){					//maximum fire on the bot and spread fire to neighbouring bots
 462:	22 30       	cpi	r18, 0x02	; 2
 464:	31 05       	cpc	r19, r1
 466:	f1 f4       	brne	.+60     	; 0x4a4 <__stack+0x45>
			time_count++;
 468:	21 96       	adiw	r28, 0x01	; 1
			if(time_count > 30){
 46a:	cf 31       	cpi	r28, 0x1F	; 31
 46c:	d1 05       	cpc	r29, r1
 46e:	d4 f0       	brlt	.+52     	; 0x4a4 <__stack+0x45>
				fire_level++;
				time_count = 0;
				lcd_cursor(1,1);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	0e 94 20 03 	call	0x640	; 0x640 <lcd_cursor>
				lcd_string("FIRE!FIRE!FIRE!");
 47c:	86 ea       	ldi	r24, 0xA6	; 166
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 13 03 	call	0x626	; 0x626 <lcd_string>
 484:	88 ee       	ldi	r24, 0xE8	; 232
 486:	93 e0       	ldi	r25, 0x03	; 3
 488:	f8 01       	movw	r30, r16
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <__stack+0x2b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 48e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 490:	d9 f7       	brne	.-10     	; 0x488 <__stack+0x29>
				_delay_ms((((int) NODE_ID) - 48)*25);		//back off delay 
				UDR = '2';									//send fire spread message
 492:	bc b8       	out	0x0c, r11	; 12
 494:	c7 01       	movw	r24, r14
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <__stack+0x37>
				_delay_ms(10);
				UDR = NODE_ID;								//send the node id to whom neighbours are to be set on fire
 49a:	cc b8       	out	0x0c, r12	; 12
 49c:	c0 e0       	ldi	r28, 0x00	; 0
 49e:	d0 e0       	ldi	r29, 0x00	; 0
 4a0:	23 e0       	ldi	r18, 0x03	; 3
 4a2:	30 e0       	ldi	r19, 0x00	; 0
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
 4a4:	d7 b8       	out	0x07, r13	; 7
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 4a6:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
 4a8:	34 9b       	sbis	0x06, 4	; 6
 4aa:	fe cf       	rjmp	.-4      	; 0x4a8 <__stack+0x49>
	a=ADCH;
 4ac:	85 b1       	in	r24, 0x05	; 5
	ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 4ae:	34 9a       	sbi	0x06, 4	; 6
				_delay_ms(10);
				UDR = NODE_ID;								//send the node id to whom neighbours are to be set on fire
			}
		}

		ADC_Value = ADC_Conversion(1);							//read value of IR sensor
 4b0:	80 93 dc 00 	sts	0x00DC, r24

		if(ADC_Value <= EXTINGUISH_VAL && onFire == 1){			//if firebird is in the range and it is on fire then stop fire
 4b4:	83 33       	cpi	r24, 0x33	; 51
 4b6:	50 f4       	brcc	.+20     	; 0x4cc <__stack+0x6d>
 4b8:	80 91 ba 00 	lds	r24, 0x00BA
 4bc:	90 91 bb 00 	lds	r25, 0x00BB
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	21 f4       	brne	.+8      	; 0x4cc <__stack+0x6d>
			fire_level = 0;
			end_fire();
 4c4:	0e 94 9d 00 	call	0x13a	; 0x13a <end_fire>
 4c8:	20 e0       	ldi	r18, 0x00	; 0
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	88 ee       	ldi	r24, 0xE8	; 232
 4ce:	93 e0       	ldi	r25, 0x03	; 3
 4d0:	f8 01       	movw	r30, r16
 4d2:	31 97       	sbiw	r30, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__stack+0x73>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4d8:	d9 f7       	brne	.-10     	; 0x4d0 <__stack+0x71>
 4da:	a1 cf       	rjmp	.-190    	; 0x41e <main+0x3c>

000004dc <print_sensor>:
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
 4dc:	47 70       	andi	r20, 0x07	; 7
 4de:	40 62       	ori	r20, 0x20	; 32
 4e0:	47 b9       	out	0x07, r20	; 7
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 4e2:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
 4e4:	34 9b       	sbis	0x06, 4	; 6
 4e6:	fe cf       	rjmp	.-4      	; 0x4e4 <print_sensor+0x8>
	a=ADCH;
 4e8:	45 b1       	in	r20, 0x05	; 5
	ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 4ea:	34 9a       	sbi	0x06, 4	; 6

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
	ADC_Value = ADC_Conversion(channel);
 4ec:	40 93 dc 00 	sts	0x00DC, r20
	lcd_print(row, coloumn, ADC_Value, 3);
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	23 e0       	ldi	r18, 0x03	; 3
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_print>
}
 4fe:	08 95       	ret

00000500 <lcd_port_config>:
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 500:	84 b3       	in	r24, 0x14	; 20
 502:	87 6f       	ori	r24, 0xF7	; 247
 504:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 506:	85 b3       	in	r24, 0x15	; 21
 508:	80 78       	andi	r24, 0x80	; 128
 50a:	85 bb       	out	0x15, r24	; 21
}
 50c:	08 95       	ret

0000050e <lcd_set_4bit>:
 50e:	83 e3       	ldi	r24, 0x33	; 51
 510:	97 e0       	ldi	r25, 0x07	; 7
 512:	fc 01       	movw	r30, r24
 514:	31 97       	sbiw	r30, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 518:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 51a:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
 51c:	40 e3       	ldi	r20, 0x30	; 48
 51e:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 520:	aa 9a       	sbi	0x15, 2	; 21
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	34 e2       	ldi	r19, 0x24	; 36
 526:	f9 01       	movw	r30, r18
 528:	31 97       	sbiw	r30, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 52c:	aa 98       	cbi	0x15, 2	; 21
 52e:	fc 01       	movw	r30, r24
 530:	31 97       	sbiw	r30, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 534:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 536:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
 538:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 53a:	aa 9a       	sbi	0x15, 2	; 21
 53c:	f9 01       	movw	r30, r18
 53e:	31 97       	sbiw	r30, 0x01	; 1
 540:	f1 f7       	brne	.-4      	; 0x53e <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 542:	aa 98       	cbi	0x15, 2	; 21
 544:	fc 01       	movw	r30, r24
 546:	31 97       	sbiw	r30, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 54a:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 54c:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
 54e:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 550:	aa 9a       	sbi	0x15, 2	; 21
 552:	f9 01       	movw	r30, r18
 554:	31 97       	sbiw	r30, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 558:	aa 98       	cbi	0x15, 2	; 21
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 55e:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 560:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 562:	80 e2       	ldi	r24, 0x20	; 32
 564:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 566:	aa 9a       	sbi	0x15, 2	; 21
 568:	c9 01       	movw	r24, r18
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 56e:	aa 98       	cbi	0x15, 2	; 21

	
}
 570:	08 95       	ret

00000572 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 572:	95 b3       	in	r25, 0x15	; 21
 574:	9f 70       	andi	r25, 0x0F	; 15
 576:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
 578:	25 b3       	in	r18, 0x15	; 21
 57a:	98 2f       	mov	r25, r24
 57c:	90 7f       	andi	r25, 0xF0	; 240
 57e:	92 2b       	or	r25, r18
 580:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
 582:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 584:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 586:	aa 9a       	sbi	0x15, 2	; 21
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	34 e2       	ldi	r19, 0x24	; 36
 58c:	f9 01       	movw	r30, r18
 58e:	31 97       	sbiw	r30, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
 592:	aa 98       	cbi	0x15, 2	; 21
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 594:	95 b3       	in	r25, 0x15	; 21
 596:	9f 70       	andi	r25, 0x0F	; 15
 598:	95 bb       	out	0x15, r25	; 21
	lcd_port |= cmd;
 59a:	95 b3       	in	r25, 0x15	; 21
 59c:	82 95       	swap	r24
 59e:	80 7f       	andi	r24, 0xF0	; 240
 5a0:	98 2b       	or	r25, r24
 5a2:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
 5a4:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 5a6:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 5a8:	aa 9a       	sbi	0x15, 2	; 21
 5aa:	c9 01       	movw	r24, r18
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
 5b0:	aa 98       	cbi	0x15, 2	; 21
}
 5b2:	08 95       	ret

000005b4 <lcd_init>:
 5b4:	83 e3       	ldi	r24, 0x33	; 51
 5b6:	97 e0       	ldi	r25, 0x07	; 7
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <lcd_init+0x4>
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 5bc:	88 e2       	ldi	r24, 0x28	; 40
 5be:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_wr_command>
	lcd_wr_command(0x01);
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_wr_command>
	lcd_wr_command(0x06);
 5c8:	86 e0       	ldi	r24, 0x06	; 6
 5ca:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_wr_command>
	lcd_wr_command(0x0E);
 5ce:	8e e0       	ldi	r24, 0x0E	; 14
 5d0:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_wr_command>
	lcd_wr_command(0x80);
 5d4:	80 e8       	ldi	r24, 0x80	; 128
 5d6:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_wr_command>
		
}
 5da:	08 95       	ret

000005dc <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 5dc:	95 b3       	in	r25, 0x15	; 21
 5de:	9f 70       	andi	r25, 0x0F	; 15
 5e0:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
 5e2:	25 b3       	in	r18, 0x15	; 21
 5e4:	98 2f       	mov	r25, r24
 5e6:	90 7f       	andi	r25, 0xF0	; 240
 5e8:	92 2b       	or	r25, r18
 5ea:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
 5ec:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 5ee:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 5f0:	aa 9a       	sbi	0x15, 2	; 21
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	34 e2       	ldi	r19, 0x24	; 36
 5f6:	f9 01       	movw	r30, r18
 5f8:	31 97       	sbiw	r30, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
 5fc:	aa 98       	cbi	0x15, 2	; 21

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 5fe:	95 b3       	in	r25, 0x15	; 21
 600:	9f 70       	andi	r25, 0x0F	; 15
 602:	95 bb       	out	0x15, r25	; 21
	lcd_port |= letter;
 604:	95 b3       	in	r25, 0x15	; 21
 606:	82 95       	swap	r24
 608:	80 7f       	andi	r24, 0xF0	; 240
 60a:	98 2b       	or	r25, r24
 60c:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
 60e:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 610:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 612:	aa 9a       	sbi	0x15, 2	; 21
 614:	c9 01       	movw	r24, r18
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
 61a:	aa 98       	cbi	0x15, 2	; 21
}
 61c:	08 95       	ret

0000061e <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 61e:	80 e8       	ldi	r24, 0x80	; 128
 620:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_wr_command>
}
 624:	08 95       	ret

00000626 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	ec 01       	movw	r28, r24
 62c:	03 c0       	rjmp	.+6      	; 0x634 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 62e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd_wr_char>
		str++;
 632:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 634:	88 81       	ld	r24, Y
 636:	88 23       	and	r24, r24
 638:	d1 f7       	brne	.-12     	; 0x62e <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	08 95       	ret

00000640 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 640:	82 30       	cpi	r24, 0x02	; 2
 642:	69 f0       	breq	.+26     	; 0x65e <lcd_cursor+0x1e>
 644:	83 30       	cpi	r24, 0x03	; 3
 646:	18 f4       	brcc	.+6      	; 0x64e <lcd_cursor+0xe>
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	a9 f4       	brne	.+42     	; 0x676 <lcd_cursor+0x36>
 64c:	05 c0       	rjmp	.+10     	; 0x658 <lcd_cursor+0x18>
 64e:	83 30       	cpi	r24, 0x03	; 3
 650:	49 f0       	breq	.+18     	; 0x664 <lcd_cursor+0x24>
 652:	84 30       	cpi	r24, 0x04	; 4
 654:	81 f4       	brne	.+32     	; 0x676 <lcd_cursor+0x36>
 656:	0b c0       	rjmp	.+22     	; 0x66e <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 658:	86 2f       	mov	r24, r22
 65a:	81 58       	subi	r24, 0x81	; 129
 65c:	05 c0       	rjmp	.+10     	; 0x668 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 65e:	86 2f       	mov	r24, r22
 660:	81 54       	subi	r24, 0x41	; 65
 662:	02 c0       	rjmp	.+4      	; 0x668 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
 664:	86 2f       	mov	r24, r22
 666:	8d 56       	subi	r24, 0x6D	; 109
 668:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_wr_command>
 66c:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 66e:	86 2f       	mov	r24, r22
 670:	8d 52       	subi	r24, 0x2D	; 45
 672:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_wr_command>
 676:	08 95       	ret

00000678 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	8a 01       	movw	r16, r20
 682:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 684:	88 23       	and	r24, r24
 686:	11 f0       	breq	.+4      	; 0x68c <lcd_print+0x14>
 688:	66 23       	and	r22, r22
 68a:	19 f4       	brne	.+6      	; 0x692 <lcd_print+0x1a>
	{
		lcd_home();
 68c:	0e 94 0f 03 	call	0x61e	; 0x61e <lcd_home>
 690:	02 c0       	rjmp	.+4      	; 0x696 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 692:	0e 94 20 03 	call	0x640	; 0x640 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 696:	c5 30       	cpi	r28, 0x05	; 5
 698:	d1 05       	cpc	r29, r1
 69a:	71 f4       	brne	.+28     	; 0x6b8 <lcd_print+0x40>
	{
		million=value/10000+48;
 69c:	c8 01       	movw	r24, r16
 69e:	60 e1       	ldi	r22, 0x10	; 16
 6a0:	77 e2       	ldi	r23, 0x27	; 39
 6a2:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodhi4>
 6a6:	cb 01       	movw	r24, r22
 6a8:	c0 96       	adiw	r24, 0x30	; 48
 6aa:	90 93 e0 00 	sts	0x00E0, r25
 6ae:	80 93 df 00 	sts	0x00DF, r24
		lcd_wr_char(million);
 6b2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd_wr_char>
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
 6b8:	c4 30       	cpi	r28, 0x04	; 4
 6ba:	d1 05       	cpc	r29, r1
 6bc:	11 f0       	breq	.+4      	; 0x6c2 <lcd_print+0x4a>
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	16 c0       	rjmp	.+44     	; 0x6ee <lcd_print+0x76>
	{
		temp = value/1000;
 6c2:	c8 01       	movw	r24, r16
 6c4:	68 ee       	ldi	r22, 0xE8	; 232
 6c6:	73 e0       	ldi	r23, 0x03	; 3
 6c8:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodhi4>
 6cc:	cb 01       	movw	r24, r22
 6ce:	60 93 e1 00 	sts	0x00E1, r22
 6d2:	90 93 e2 00 	sts	0x00E2, r25
		thousand = temp%10 + 48;
 6d6:	6a e0       	ldi	r22, 0x0A	; 10
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodhi4>
 6de:	c0 96       	adiw	r24, 0x30	; 48
 6e0:	90 93 ea 00 	sts	0x00EA, r25
 6e4:	80 93 e9 00 	sts	0x00E9, r24
		lcd_wr_char(thousand);
 6e8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd_wr_char>
 6ec:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
 6ee:	c3 30       	cpi	r28, 0x03	; 3
 6f0:	d1 05       	cpc	r29, r1
 6f2:	21 f0       	breq	.+8      	; 0x6fc <lcd_print+0x84>
 6f4:	81 30       	cpi	r24, 0x01	; 1
 6f6:	11 f0       	breq	.+4      	; 0x6fc <lcd_print+0x84>
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	16 c0       	rjmp	.+44     	; 0x728 <lcd_print+0xb0>
	{
		temp = value/100;
 6fc:	c8 01       	movw	r24, r16
 6fe:	64 e6       	ldi	r22, 0x64	; 100
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodhi4>
 706:	cb 01       	movw	r24, r22
 708:	60 93 e1 00 	sts	0x00E1, r22
 70c:	90 93 e2 00 	sts	0x00E2, r25
		hundred = temp%10 + 48;
 710:	6a e0       	ldi	r22, 0x0A	; 10
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodhi4>
 718:	c0 96       	adiw	r24, 0x30	; 48
 71a:	90 93 e6 00 	sts	0x00E6, r25
 71e:	80 93 e5 00 	sts	0x00E5, r24
		lcd_wr_char(hundred);
 722:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd_wr_char>
 726:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
 728:	c2 30       	cpi	r28, 0x02	; 2
 72a:	d1 05       	cpc	r29, r1
 72c:	21 f0       	breq	.+8      	; 0x736 <lcd_print+0xbe>
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	11 f0       	breq	.+4      	; 0x736 <lcd_print+0xbe>
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	16 c0       	rjmp	.+44     	; 0x762 <lcd_print+0xea>
	{
		temp = value/10;
 736:	c8 01       	movw	r24, r16
 738:	6a e0       	ldi	r22, 0x0A	; 10
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodhi4>
 740:	cb 01       	movw	r24, r22
 742:	60 93 e1 00 	sts	0x00E1, r22
 746:	90 93 e2 00 	sts	0x00E2, r25
		tens = temp%10 + 48;
 74a:	6a e0       	ldi	r22, 0x0A	; 10
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodhi4>
 752:	c0 96       	adiw	r24, 0x30	; 48
 754:	90 93 e4 00 	sts	0x00E4, r25
 758:	80 93 e3 00 	sts	0x00E3, r24
		lcd_wr_char(tens);
 75c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd_wr_char>
 760:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
 762:	c1 30       	cpi	r28, 0x01	; 1
 764:	d1 05       	cpc	r29, r1
 766:	11 f0       	breq	.+4      	; 0x76c <lcd_print+0xf4>
 768:	81 30       	cpi	r24, 0x01	; 1
 76a:	61 f4       	brne	.+24     	; 0x784 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
 76c:	c8 01       	movw	r24, r16
 76e:	6a e0       	ldi	r22, 0x0A	; 10
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodhi4>
 776:	c0 96       	adiw	r24, 0x30	; 48
 778:	90 93 e8 00 	sts	0x00E8, r25
 77c:	80 93 e7 00 	sts	0x00E7, r24
		lcd_wr_char(unit);
 780:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd_wr_char>
	}
	if(digits>5)
 784:	26 97       	sbiw	r28, 0x06	; 6
 786:	1c f0       	brlt	.+6      	; 0x78e <lcd_print+0x116>
	{
		lcd_wr_char('E');
 788:	85 e4       	ldi	r24, 0x45	; 69
 78a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd_wr_char>
	}
	
}
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	1f 91       	pop	r17
 794:	0f 91       	pop	r16
 796:	08 95       	ret

00000798 <__udivmodhi4>:
 798:	aa 1b       	sub	r26, r26
 79a:	bb 1b       	sub	r27, r27
 79c:	51 e1       	ldi	r21, 0x11	; 17
 79e:	07 c0       	rjmp	.+14     	; 0x7ae <__udivmodhi4_ep>

000007a0 <__udivmodhi4_loop>:
 7a0:	aa 1f       	adc	r26, r26
 7a2:	bb 1f       	adc	r27, r27
 7a4:	a6 17       	cp	r26, r22
 7a6:	b7 07       	cpc	r27, r23
 7a8:	10 f0       	brcs	.+4      	; 0x7ae <__udivmodhi4_ep>
 7aa:	a6 1b       	sub	r26, r22
 7ac:	b7 0b       	sbc	r27, r23

000007ae <__udivmodhi4_ep>:
 7ae:	88 1f       	adc	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	5a 95       	dec	r21
 7b4:	a9 f7       	brne	.-22     	; 0x7a0 <__udivmodhi4_loop>
 7b6:	80 95       	com	r24
 7b8:	90 95       	com	r25
 7ba:	bc 01       	movw	r22, r24
 7bc:	cd 01       	movw	r24, r26
 7be:	08 95       	ret

000007c0 <_exit>:
 7c0:	f8 94       	cli

000007c2 <__stop_program>:
 7c2:	ff cf       	rjmp	.-2      	; 0x7c2 <__stop_program>
