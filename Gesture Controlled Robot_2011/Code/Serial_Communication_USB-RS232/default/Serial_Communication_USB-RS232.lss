
Serial_Communication_USB-RS232.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000021e6  0000227a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800208  00800208  00002282  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002282  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000179  00000000  00000000  000022a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  0000241b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000155  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b7c  00000000  00000000  00002cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  0000385c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000265  00000000  00000000  0000398c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ee       	ldi	r30, 0xE6	; 230
      fc:	f1 e2       	ldi	r31, 0x21	; 33
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 31       	cpi	r26, 0x15	; 21
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 45 0b 	call	0x168a	; 0x168a <main>
     122:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_port_config>:
unsigned int thousand;
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     132:	a7 e2       	ldi	r26, 0x27	; 39
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e7 e2       	ldi	r30, 0x27	; 39
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	87 6f       	ori	r24, 0xF7	; 247
     13e:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     140:	a8 e2       	ldi	r26, 0x28	; 40
     142:	b0 e0       	ldi	r27, 0x00	; 0
     144:	e8 e2       	ldi	r30, 0x28	; 40
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	80 78       	andi	r24, 0x80	; 128
     14c:	8c 93       	st	X, r24
}
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <lcd_set_4bit>:

//Function to Reset LCD
void lcd_set_4bit()
{
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	df 93       	push	r29
     15a:	cf 93       	push	r28
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	c0 57       	subi	r28, 0x70	; 112
     162:	d0 40       	sbci	r29, 0x00	; 0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	de bf       	out	0x3e, r29	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	fe 01       	movw	r30, r28
     170:	e3 59       	subi	r30, 0x93	; 147
     172:	ff 4f       	sbci	r31, 0xFF	; 255
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	a0 e8       	ldi	r26, 0x80	; 128
     17a:	bf e3       	ldi	r27, 0x3F	; 63
     17c:	80 83       	st	Z, r24
     17e:	91 83       	std	Z+1, r25	; 0x01
     180:	a2 83       	std	Z+2, r26	; 0x02
     182:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     184:	8e 01       	movw	r16, r28
     186:	07 59       	subi	r16, 0x97	; 151
     188:	1f 4f       	sbci	r17, 0xFF	; 255
     18a:	fe 01       	movw	r30, r28
     18c:	e3 59       	subi	r30, 0x93	; 147
     18e:	ff 4f       	sbci	r31, 0xFF	; 255
     190:	60 81       	ld	r22, Z
     192:	71 81       	ldd	r23, Z+1	; 0x01
     194:	82 81       	ldd	r24, Z+2	; 0x02
     196:	93 81       	ldd	r25, Z+3	; 0x03
     198:	2d ec       	ldi	r18, 0xCD	; 205
     19a:	3c ec       	ldi	r19, 0xCC	; 204
     19c:	4c e2       	ldi	r20, 0x2C	; 44
     19e:	55 e4       	ldi	r21, 0x45	; 69
     1a0:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     1a4:	dc 01       	movw	r26, r24
     1a6:	cb 01       	movw	r24, r22
     1a8:	f8 01       	movw	r30, r16
     1aa:	80 83       	st	Z, r24
     1ac:	91 83       	std	Z+1, r25	; 0x01
     1ae:	a2 83       	std	Z+2, r26	; 0x02
     1b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     1b2:	fe 01       	movw	r30, r28
     1b4:	e7 59       	subi	r30, 0x97	; 151
     1b6:	ff 4f       	sbci	r31, 0xFF	; 255
     1b8:	60 81       	ld	r22, Z
     1ba:	71 81       	ldd	r23, Z+1	; 0x01
     1bc:	82 81       	ldd	r24, Z+2	; 0x02
     1be:	93 81       	ldd	r25, Z+3	; 0x03
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 e8       	ldi	r20, 0x80	; 128
     1c6:	5f e3       	ldi	r21, 0x3F	; 63
     1c8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
     1cc:	88 23       	and	r24, r24
     1ce:	44 f4       	brge	.+16     	; 0x1e0 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1d0:	fe 01       	movw	r30, r28
     1d2:	e9 59       	subi	r30, 0x99	; 153
     1d4:	ff 4f       	sbci	r31, 0xFF	; 255
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	91 83       	std	Z+1, r25	; 0x01
     1dc:	80 83       	st	Z, r24
     1de:	64 c0       	rjmp	.+200    	; 0x2a8 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1e0:	fe 01       	movw	r30, r28
     1e2:	e7 59       	subi	r30, 0x97	; 151
     1e4:	ff 4f       	sbci	r31, 0xFF	; 255
     1e6:	60 81       	ld	r22, Z
     1e8:	71 81       	ldd	r23, Z+1	; 0x01
     1ea:	82 81       	ldd	r24, Z+2	; 0x02
     1ec:	93 81       	ldd	r25, Z+3	; 0x03
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	3f ef       	ldi	r19, 0xFF	; 255
     1f2:	4f e7       	ldi	r20, 0x7F	; 127
     1f4:	57 e4       	ldi	r21, 0x47	; 71
     1f6:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
     1fa:	18 16       	cp	r1, r24
     1fc:	0c f0       	brlt	.+2      	; 0x200 <lcd_set_4bit+0xac>
     1fe:	43 c0       	rjmp	.+134    	; 0x286 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     200:	fe 01       	movw	r30, r28
     202:	e3 59       	subi	r30, 0x93	; 147
     204:	ff 4f       	sbci	r31, 0xFF	; 255
     206:	60 81       	ld	r22, Z
     208:	71 81       	ldd	r23, Z+1	; 0x01
     20a:	82 81       	ldd	r24, Z+2	; 0x02
     20c:	93 81       	ldd	r25, Z+3	; 0x03
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 e2       	ldi	r20, 0x20	; 32
     214:	51 e4       	ldi	r21, 0x41	; 65
     216:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     21a:	dc 01       	movw	r26, r24
     21c:	cb 01       	movw	r24, r22
     21e:	8e 01       	movw	r16, r28
     220:	09 59       	subi	r16, 0x99	; 153
     222:	1f 4f       	sbci	r17, 0xFF	; 255
     224:	bc 01       	movw	r22, r24
     226:	cd 01       	movw	r24, r26
     228:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     22c:	dc 01       	movw	r26, r24
     22e:	cb 01       	movw	r24, r22
     230:	f8 01       	movw	r30, r16
     232:	91 83       	std	Z+1, r25	; 0x01
     234:	80 83       	st	Z, r24
     236:	1f c0       	rjmp	.+62     	; 0x276 <lcd_set_4bit+0x122>
     238:	fe 01       	movw	r30, r28
     23a:	eb 59       	subi	r30, 0x9B	; 155
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	84 e1       	ldi	r24, 0x14	; 20
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	91 83       	std	Z+1, r25	; 0x01
     244:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     246:	fe 01       	movw	r30, r28
     248:	eb 59       	subi	r30, 0x9B	; 155
     24a:	ff 4f       	sbci	r31, 0xFF	; 255
     24c:	80 81       	ld	r24, Z
     24e:	91 81       	ldd	r25, Z+1	; 0x01
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <lcd_set_4bit+0xfc>
     254:	fe 01       	movw	r30, r28
     256:	eb 59       	subi	r30, 0x9B	; 155
     258:	ff 4f       	sbci	r31, 0xFF	; 255
     25a:	91 83       	std	Z+1, r25	; 0x01
     25c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     25e:	de 01       	movw	r26, r28
     260:	a9 59       	subi	r26, 0x99	; 153
     262:	bf 4f       	sbci	r27, 0xFF	; 255
     264:	fe 01       	movw	r30, r28
     266:	e9 59       	subi	r30, 0x99	; 153
     268:	ff 4f       	sbci	r31, 0xFF	; 255
     26a:	80 81       	ld	r24, Z
     26c:	91 81       	ldd	r25, Z+1	; 0x01
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	11 96       	adiw	r26, 0x01	; 1
     272:	9c 93       	st	X, r25
     274:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     276:	fe 01       	movw	r30, r28
     278:	e9 59       	subi	r30, 0x99	; 153
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	80 81       	ld	r24, Z
     27e:	91 81       	ldd	r25, Z+1	; 0x01
     280:	00 97       	sbiw	r24, 0x00	; 0
     282:	d1 f6       	brne	.-76     	; 0x238 <lcd_set_4bit+0xe4>
     284:	27 c0       	rjmp	.+78     	; 0x2d4 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     286:	8e 01       	movw	r16, r28
     288:	09 59       	subi	r16, 0x99	; 153
     28a:	1f 4f       	sbci	r17, 0xFF	; 255
     28c:	fe 01       	movw	r30, r28
     28e:	e7 59       	subi	r30, 0x97	; 151
     290:	ff 4f       	sbci	r31, 0xFF	; 255
     292:	60 81       	ld	r22, Z
     294:	71 81       	ldd	r23, Z+1	; 0x01
     296:	82 81       	ldd	r24, Z+2	; 0x02
     298:	93 81       	ldd	r25, Z+3	; 0x03
     29a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	f8 01       	movw	r30, r16
     2a4:	91 83       	std	Z+1, r25	; 0x01
     2a6:	80 83       	st	Z, r24
     2a8:	de 01       	movw	r26, r28
     2aa:	ad 59       	subi	r26, 0x9D	; 157
     2ac:	bf 4f       	sbci	r27, 0xFF	; 255
     2ae:	fe 01       	movw	r30, r28
     2b0:	e9 59       	subi	r30, 0x99	; 153
     2b2:	ff 4f       	sbci	r31, 0xFF	; 255
     2b4:	80 81       	ld	r24, Z
     2b6:	91 81       	ldd	r25, Z+1	; 0x01
     2b8:	8d 93       	st	X+, r24
     2ba:	9c 93       	st	X, r25
     2bc:	fe 01       	movw	r30, r28
     2be:	ed 59       	subi	r30, 0x9D	; 157
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_set_4bit+0x172>
     2ca:	fe 01       	movw	r30, r28
     2cc:	ed 59       	subi	r30, 0x9D	; 157
     2ce:	ff 4f       	sbci	r31, 0xFF	; 255
     2d0:	91 83       	std	Z+1, r25	; 0x01
     2d2:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2d4:	a8 e2       	ldi	r26, 0x28	; 40
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	e8 e2       	ldi	r30, 0x28	; 40
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	8e 7f       	andi	r24, 0xFE	; 254
     2e0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2e2:	a8 e2       	ldi	r26, 0x28	; 40
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	e8 e2       	ldi	r30, 0x28	; 40
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	8d 7f       	andi	r24, 0xFD	; 253
     2ee:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2f0:	e8 e2       	ldi	r30, 0x28	; 40
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 e3       	ldi	r24, 0x30	; 48
     2f6:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2f8:	a8 e2       	ldi	r26, 0x28	; 40
     2fa:	b0 e0       	ldi	r27, 0x00	; 0
     2fc:	e8 e2       	ldi	r30, 0x28	; 40
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	80 81       	ld	r24, Z
     302:	84 60       	ori	r24, 0x04	; 4
     304:	8c 93       	st	X, r24
     306:	fe 01       	movw	r30, r28
     308:	e1 5a       	subi	r30, 0xA1	; 161
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	a0 ea       	ldi	r26, 0xA0	; 160
     312:	b0 e4       	ldi	r27, 0x40	; 64
     314:	80 83       	st	Z, r24
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	a2 83       	std	Z+2, r26	; 0x02
     31a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     31c:	8e 01       	movw	r16, r28
     31e:	05 5a       	subi	r16, 0xA5	; 165
     320:	1f 4f       	sbci	r17, 0xFF	; 255
     322:	fe 01       	movw	r30, r28
     324:	e1 5a       	subi	r30, 0xA1	; 161
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	60 81       	ld	r22, Z
     32a:	71 81       	ldd	r23, Z+1	; 0x01
     32c:	82 81       	ldd	r24, Z+2	; 0x02
     32e:	93 81       	ldd	r25, Z+3	; 0x03
     330:	2d ec       	ldi	r18, 0xCD	; 205
     332:	3c ec       	ldi	r19, 0xCC	; 204
     334:	4c e2       	ldi	r20, 0x2C	; 44
     336:	55 e4       	ldi	r21, 0x45	; 69
     338:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     33c:	dc 01       	movw	r26, r24
     33e:	cb 01       	movw	r24, r22
     340:	f8 01       	movw	r30, r16
     342:	80 83       	st	Z, r24
     344:	91 83       	std	Z+1, r25	; 0x01
     346:	a2 83       	std	Z+2, r26	; 0x02
     348:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     34a:	fe 01       	movw	r30, r28
     34c:	e5 5a       	subi	r30, 0xA5	; 165
     34e:	ff 4f       	sbci	r31, 0xFF	; 255
     350:	60 81       	ld	r22, Z
     352:	71 81       	ldd	r23, Z+1	; 0x01
     354:	82 81       	ldd	r24, Z+2	; 0x02
     356:	93 81       	ldd	r25, Z+3	; 0x03
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 e8       	ldi	r20, 0x80	; 128
     35e:	5f e3       	ldi	r21, 0x3F	; 63
     360:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
     364:	88 23       	and	r24, r24
     366:	44 f4       	brge	.+16     	; 0x378 <lcd_set_4bit+0x224>
		__ticks = 1;
     368:	fe 01       	movw	r30, r28
     36a:	e7 5a       	subi	r30, 0xA7	; 167
     36c:	ff 4f       	sbci	r31, 0xFF	; 255
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	80 83       	st	Z, r24
     376:	64 c0       	rjmp	.+200    	; 0x440 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     378:	fe 01       	movw	r30, r28
     37a:	e5 5a       	subi	r30, 0xA5	; 165
     37c:	ff 4f       	sbci	r31, 0xFF	; 255
     37e:	60 81       	ld	r22, Z
     380:	71 81       	ldd	r23, Z+1	; 0x01
     382:	82 81       	ldd	r24, Z+2	; 0x02
     384:	93 81       	ldd	r25, Z+3	; 0x03
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	3f ef       	ldi	r19, 0xFF	; 255
     38a:	4f e7       	ldi	r20, 0x7F	; 127
     38c:	57 e4       	ldi	r21, 0x47	; 71
     38e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
     392:	18 16       	cp	r1, r24
     394:	0c f0       	brlt	.+2      	; 0x398 <lcd_set_4bit+0x244>
     396:	43 c0       	rjmp	.+134    	; 0x41e <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     398:	fe 01       	movw	r30, r28
     39a:	e1 5a       	subi	r30, 0xA1	; 161
     39c:	ff 4f       	sbci	r31, 0xFF	; 255
     39e:	60 81       	ld	r22, Z
     3a0:	71 81       	ldd	r23, Z+1	; 0x01
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e2       	ldi	r20, 0x20	; 32
     3ac:	51 e4       	ldi	r21, 0x41	; 65
     3ae:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	8e 01       	movw	r16, r28
     3b8:	07 5a       	subi	r16, 0xA7	; 167
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	bc 01       	movw	r22, r24
     3be:	cd 01       	movw	r24, r26
     3c0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     3c4:	dc 01       	movw	r26, r24
     3c6:	cb 01       	movw	r24, r22
     3c8:	f8 01       	movw	r30, r16
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	80 83       	st	Z, r24
     3ce:	1f c0       	rjmp	.+62     	; 0x40e <lcd_set_4bit+0x2ba>
     3d0:	fe 01       	movw	r30, r28
     3d2:	e9 5a       	subi	r30, 0xA9	; 169
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	84 e1       	ldi	r24, 0x14	; 20
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	91 83       	std	Z+1, r25	; 0x01
     3dc:	80 83       	st	Z, r24
     3de:	fe 01       	movw	r30, r28
     3e0:	e9 5a       	subi	r30, 0xA9	; 169
     3e2:	ff 4f       	sbci	r31, 0xFF	; 255
     3e4:	80 81       	ld	r24, Z
     3e6:	91 81       	ldd	r25, Z+1	; 0x01
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <lcd_set_4bit+0x294>
     3ec:	fe 01       	movw	r30, r28
     3ee:	e9 5a       	subi	r30, 0xA9	; 169
     3f0:	ff 4f       	sbci	r31, 0xFF	; 255
     3f2:	91 83       	std	Z+1, r25	; 0x01
     3f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3f6:	de 01       	movw	r26, r28
     3f8:	a7 5a       	subi	r26, 0xA7	; 167
     3fa:	bf 4f       	sbci	r27, 0xFF	; 255
     3fc:	fe 01       	movw	r30, r28
     3fe:	e7 5a       	subi	r30, 0xA7	; 167
     400:	ff 4f       	sbci	r31, 0xFF	; 255
     402:	80 81       	ld	r24, Z
     404:	91 81       	ldd	r25, Z+1	; 0x01
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	9c 93       	st	X, r25
     40c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     40e:	fe 01       	movw	r30, r28
     410:	e7 5a       	subi	r30, 0xA7	; 167
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	00 97       	sbiw	r24, 0x00	; 0
     41a:	d1 f6       	brne	.-76     	; 0x3d0 <lcd_set_4bit+0x27c>
     41c:	27 c0       	rjmp	.+78     	; 0x46c <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     41e:	8e 01       	movw	r16, r28
     420:	07 5a       	subi	r16, 0xA7	; 167
     422:	1f 4f       	sbci	r17, 0xFF	; 255
     424:	fe 01       	movw	r30, r28
     426:	e5 5a       	subi	r30, 0xA5	; 165
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	60 81       	ld	r22, Z
     42c:	71 81       	ldd	r23, Z+1	; 0x01
     42e:	82 81       	ldd	r24, Z+2	; 0x02
     430:	93 81       	ldd	r25, Z+3	; 0x03
     432:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     436:	dc 01       	movw	r26, r24
     438:	cb 01       	movw	r24, r22
     43a:	f8 01       	movw	r30, r16
     43c:	91 83       	std	Z+1, r25	; 0x01
     43e:	80 83       	st	Z, r24
     440:	de 01       	movw	r26, r28
     442:	ab 5a       	subi	r26, 0xAB	; 171
     444:	bf 4f       	sbci	r27, 0xFF	; 255
     446:	fe 01       	movw	r30, r28
     448:	e7 5a       	subi	r30, 0xA7	; 167
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	80 81       	ld	r24, Z
     44e:	91 81       	ldd	r25, Z+1	; 0x01
     450:	8d 93       	st	X+, r24
     452:	9c 93       	st	X, r25
     454:	fe 01       	movw	r30, r28
     456:	eb 5a       	subi	r30, 0xAB	; 171
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <lcd_set_4bit+0x30a>
     462:	fe 01       	movw	r30, r28
     464:	eb 5a       	subi	r30, 0xAB	; 171
     466:	ff 4f       	sbci	r31, 0xFF	; 255
     468:	91 83       	std	Z+1, r25	; 0x01
     46a:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     46c:	a8 e2       	ldi	r26, 0x28	; 40
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e8 e2       	ldi	r30, 0x28	; 40
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	8b 7f       	andi	r24, 0xFB	; 251
     478:	8c 93       	st	X, r24
     47a:	fe 01       	movw	r30, r28
     47c:	ef 5a       	subi	r30, 0xAF	; 175
     47e:	ff 4f       	sbci	r31, 0xFF	; 255
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	a0 e8       	ldi	r26, 0x80	; 128
     486:	bf e3       	ldi	r27, 0x3F	; 63
     488:	80 83       	st	Z, r24
     48a:	91 83       	std	Z+1, r25	; 0x01
     48c:	a2 83       	std	Z+2, r26	; 0x02
     48e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     490:	8e 01       	movw	r16, r28
     492:	03 5b       	subi	r16, 0xB3	; 179
     494:	1f 4f       	sbci	r17, 0xFF	; 255
     496:	fe 01       	movw	r30, r28
     498:	ef 5a       	subi	r30, 0xAF	; 175
     49a:	ff 4f       	sbci	r31, 0xFF	; 255
     49c:	60 81       	ld	r22, Z
     49e:	71 81       	ldd	r23, Z+1	; 0x01
     4a0:	82 81       	ldd	r24, Z+2	; 0x02
     4a2:	93 81       	ldd	r25, Z+3	; 0x03
     4a4:	2d ec       	ldi	r18, 0xCD	; 205
     4a6:	3c ec       	ldi	r19, 0xCC	; 204
     4a8:	4c e2       	ldi	r20, 0x2C	; 44
     4aa:	55 e4       	ldi	r21, 0x45	; 69
     4ac:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     4b0:	dc 01       	movw	r26, r24
     4b2:	cb 01       	movw	r24, r22
     4b4:	f8 01       	movw	r30, r16
     4b6:	80 83       	st	Z, r24
     4b8:	91 83       	std	Z+1, r25	; 0x01
     4ba:	a2 83       	std	Z+2, r26	; 0x02
     4bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     4be:	fe 01       	movw	r30, r28
     4c0:	e3 5b       	subi	r30, 0xB3	; 179
     4c2:	ff 4f       	sbci	r31, 0xFF	; 255
     4c4:	60 81       	ld	r22, Z
     4c6:	71 81       	ldd	r23, Z+1	; 0x01
     4c8:	82 81       	ldd	r24, Z+2	; 0x02
     4ca:	93 81       	ldd	r25, Z+3	; 0x03
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	40 e8       	ldi	r20, 0x80	; 128
     4d2:	5f e3       	ldi	r21, 0x3F	; 63
     4d4:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
     4d8:	88 23       	and	r24, r24
     4da:	44 f4       	brge	.+16     	; 0x4ec <lcd_set_4bit+0x398>
		__ticks = 1;
     4dc:	fe 01       	movw	r30, r28
     4de:	e5 5b       	subi	r30, 0xB5	; 181
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	91 83       	std	Z+1, r25	; 0x01
     4e8:	80 83       	st	Z, r24
     4ea:	64 c0       	rjmp	.+200    	; 0x5b4 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4ec:	fe 01       	movw	r30, r28
     4ee:	e3 5b       	subi	r30, 0xB3	; 179
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	60 81       	ld	r22, Z
     4f4:	71 81       	ldd	r23, Z+1	; 0x01
     4f6:	82 81       	ldd	r24, Z+2	; 0x02
     4f8:	93 81       	ldd	r25, Z+3	; 0x03
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	3f ef       	ldi	r19, 0xFF	; 255
     4fe:	4f e7       	ldi	r20, 0x7F	; 127
     500:	57 e4       	ldi	r21, 0x47	; 71
     502:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
     506:	18 16       	cp	r1, r24
     508:	0c f0       	brlt	.+2      	; 0x50c <lcd_set_4bit+0x3b8>
     50a:	43 c0       	rjmp	.+134    	; 0x592 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     50c:	fe 01       	movw	r30, r28
     50e:	ef 5a       	subi	r30, 0xAF	; 175
     510:	ff 4f       	sbci	r31, 0xFF	; 255
     512:	60 81       	ld	r22, Z
     514:	71 81       	ldd	r23, Z+1	; 0x01
     516:	82 81       	ldd	r24, Z+2	; 0x02
     518:	93 81       	ldd	r25, Z+3	; 0x03
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 e2       	ldi	r20, 0x20	; 32
     520:	51 e4       	ldi	r21, 0x41	; 65
     522:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     526:	dc 01       	movw	r26, r24
     528:	cb 01       	movw	r24, r22
     52a:	8e 01       	movw	r16, r28
     52c:	05 5b       	subi	r16, 0xB5	; 181
     52e:	1f 4f       	sbci	r17, 0xFF	; 255
     530:	bc 01       	movw	r22, r24
     532:	cd 01       	movw	r24, r26
     534:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	f8 01       	movw	r30, r16
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	80 83       	st	Z, r24
     542:	1f c0       	rjmp	.+62     	; 0x582 <lcd_set_4bit+0x42e>
     544:	fe 01       	movw	r30, r28
     546:	e7 5b       	subi	r30, 0xB7	; 183
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	84 e1       	ldi	r24, 0x14	; 20
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	80 83       	st	Z, r24
     552:	fe 01       	movw	r30, r28
     554:	e7 5b       	subi	r30, 0xB7	; 183
     556:	ff 4f       	sbci	r31, 0xFF	; 255
     558:	80 81       	ld	r24, Z
     55a:	91 81       	ldd	r25, Z+1	; 0x01
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <lcd_set_4bit+0x408>
     560:	fe 01       	movw	r30, r28
     562:	e7 5b       	subi	r30, 0xB7	; 183
     564:	ff 4f       	sbci	r31, 0xFF	; 255
     566:	91 83       	std	Z+1, r25	; 0x01
     568:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     56a:	de 01       	movw	r26, r28
     56c:	a5 5b       	subi	r26, 0xB5	; 181
     56e:	bf 4f       	sbci	r27, 0xFF	; 255
     570:	fe 01       	movw	r30, r28
     572:	e5 5b       	subi	r30, 0xB5	; 181
     574:	ff 4f       	sbci	r31, 0xFF	; 255
     576:	80 81       	ld	r24, Z
     578:	91 81       	ldd	r25, Z+1	; 0x01
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	11 96       	adiw	r26, 0x01	; 1
     57e:	9c 93       	st	X, r25
     580:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     582:	fe 01       	movw	r30, r28
     584:	e5 5b       	subi	r30, 0xB5	; 181
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	80 81       	ld	r24, Z
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	00 97       	sbiw	r24, 0x00	; 0
     58e:	d1 f6       	brne	.-76     	; 0x544 <lcd_set_4bit+0x3f0>
     590:	27 c0       	rjmp	.+78     	; 0x5e0 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     592:	8e 01       	movw	r16, r28
     594:	05 5b       	subi	r16, 0xB5	; 181
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	fe 01       	movw	r30, r28
     59a:	e3 5b       	subi	r30, 0xB3	; 179
     59c:	ff 4f       	sbci	r31, 0xFF	; 255
     59e:	60 81       	ld	r22, Z
     5a0:	71 81       	ldd	r23, Z+1	; 0x01
     5a2:	82 81       	ldd	r24, Z+2	; 0x02
     5a4:	93 81       	ldd	r25, Z+3	; 0x03
     5a6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     5aa:	dc 01       	movw	r26, r24
     5ac:	cb 01       	movw	r24, r22
     5ae:	f8 01       	movw	r30, r16
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
     5b4:	de 01       	movw	r26, r28
     5b6:	a9 5b       	subi	r26, 0xB9	; 185
     5b8:	bf 4f       	sbci	r27, 0xFF	; 255
     5ba:	fe 01       	movw	r30, r28
     5bc:	e5 5b       	subi	r30, 0xB5	; 181
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	80 81       	ld	r24, Z
     5c2:	91 81       	ldd	r25, Z+1	; 0x01
     5c4:	8d 93       	st	X+, r24
     5c6:	9c 93       	st	X, r25
     5c8:	fe 01       	movw	r30, r28
     5ca:	e9 5b       	subi	r30, 0xB9	; 185
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <lcd_set_4bit+0x47e>
     5d6:	fe 01       	movw	r30, r28
     5d8:	e9 5b       	subi	r30, 0xB9	; 185
     5da:	ff 4f       	sbci	r31, 0xFF	; 255
     5dc:	91 83       	std	Z+1, r25	; 0x01
     5de:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5e0:	a8 e2       	ldi	r26, 0x28	; 40
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	e8 e2       	ldi	r30, 0x28	; 40
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	8e 7f       	andi	r24, 0xFE	; 254
     5ec:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5ee:	a8 e2       	ldi	r26, 0x28	; 40
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	e8 e2       	ldi	r30, 0x28	; 40
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	8d 7f       	andi	r24, 0xFD	; 253
     5fa:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5fc:	e8 e2       	ldi	r30, 0x28	; 40
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 e3       	ldi	r24, 0x30	; 48
     602:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     604:	a8 e2       	ldi	r26, 0x28	; 40
     606:	b0 e0       	ldi	r27, 0x00	; 0
     608:	e8 e2       	ldi	r30, 0x28	; 40
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	84 60       	ori	r24, 0x04	; 4
     610:	8c 93       	st	X, r24
     612:	fe 01       	movw	r30, r28
     614:	ed 5b       	subi	r30, 0xBD	; 189
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 ea       	ldi	r26, 0xA0	; 160
     61e:	b0 e4       	ldi	r27, 0x40	; 64
     620:	80 83       	st	Z, r24
     622:	91 83       	std	Z+1, r25	; 0x01
     624:	a2 83       	std	Z+2, r26	; 0x02
     626:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     628:	8e 01       	movw	r16, r28
     62a:	01 5c       	subi	r16, 0xC1	; 193
     62c:	1f 4f       	sbci	r17, 0xFF	; 255
     62e:	fe 01       	movw	r30, r28
     630:	ed 5b       	subi	r30, 0xBD	; 189
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	60 81       	ld	r22, Z
     636:	71 81       	ldd	r23, Z+1	; 0x01
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	2d ec       	ldi	r18, 0xCD	; 205
     63e:	3c ec       	ldi	r19, 0xCC	; 204
     640:	4c e2       	ldi	r20, 0x2C	; 44
     642:	55 e4       	ldi	r21, 0x45	; 69
     644:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	f8 01       	movw	r30, r16
     64e:	80 83       	st	Z, r24
     650:	91 83       	std	Z+1, r25	; 0x01
     652:	a2 83       	std	Z+2, r26	; 0x02
     654:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     656:	fe 01       	movw	r30, r28
     658:	ff 96       	adiw	r30, 0x3f	; 63
     65a:	60 81       	ld	r22, Z
     65c:	71 81       	ldd	r23, Z+1	; 0x01
     65e:	82 81       	ldd	r24, Z+2	; 0x02
     660:	93 81       	ldd	r25, Z+3	; 0x03
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e8       	ldi	r20, 0x80	; 128
     668:	5f e3       	ldi	r21, 0x3F	; 63
     66a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
     66e:	88 23       	and	r24, r24
     670:	2c f4       	brge	.+10     	; 0x67c <lcd_set_4bit+0x528>
		__ticks = 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	9e af       	std	Y+62, r25	; 0x3e
     678:	8d af       	std	Y+61, r24	; 0x3d
     67a:	46 c0       	rjmp	.+140    	; 0x708 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     67c:	fe 01       	movw	r30, r28
     67e:	ff 96       	adiw	r30, 0x3f	; 63
     680:	60 81       	ld	r22, Z
     682:	71 81       	ldd	r23, Z+1	; 0x01
     684:	82 81       	ldd	r24, Z+2	; 0x02
     686:	93 81       	ldd	r25, Z+3	; 0x03
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	3f ef       	ldi	r19, 0xFF	; 255
     68c:	4f e7       	ldi	r20, 0x7F	; 127
     68e:	57 e4       	ldi	r21, 0x47	; 71
     690:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
     694:	18 16       	cp	r1, r24
     696:	64 f5       	brge	.+88     	; 0x6f0 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     698:	fe 01       	movw	r30, r28
     69a:	ed 5b       	subi	r30, 0xBD	; 189
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	60 81       	ld	r22, Z
     6a0:	71 81       	ldd	r23, Z+1	; 0x01
     6a2:	82 81       	ldd	r24, Z+2	; 0x02
     6a4:	93 81       	ldd	r25, Z+3	; 0x03
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e2       	ldi	r20, 0x20	; 32
     6ac:	51 e4       	ldi	r21, 0x41	; 65
     6ae:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	bc 01       	movw	r22, r24
     6b8:	cd 01       	movw	r24, r26
     6ba:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	9e af       	std	Y+62, r25	; 0x3e
     6c4:	8d af       	std	Y+61, r24	; 0x3d
     6c6:	0f c0       	rjmp	.+30     	; 0x6e6 <lcd_set_4bit+0x592>
     6c8:	84 e1       	ldi	r24, 0x14	; 20
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	9c af       	std	Y+60, r25	; 0x3c
     6ce:	8b af       	std	Y+59, r24	; 0x3b
     6d0:	8b ad       	ldd	r24, Y+59	; 0x3b
     6d2:	9c ad       	ldd	r25, Y+60	; 0x3c
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <lcd_set_4bit+0x580>
     6d8:	9c af       	std	Y+60, r25	; 0x3c
     6da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6dc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6de:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	9e af       	std	Y+62, r25	; 0x3e
     6e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6e6:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e8:	9e ad       	ldd	r25, Y+62	; 0x3e
     6ea:	00 97       	sbiw	r24, 0x00	; 0
     6ec:	69 f7       	brne	.-38     	; 0x6c8 <lcd_set_4bit+0x574>
     6ee:	16 c0       	rjmp	.+44     	; 0x71c <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6f0:	fe 01       	movw	r30, r28
     6f2:	ff 96       	adiw	r30, 0x3f	; 63
     6f4:	60 81       	ld	r22, Z
     6f6:	71 81       	ldd	r23, Z+1	; 0x01
     6f8:	82 81       	ldd	r24, Z+2	; 0x02
     6fa:	93 81       	ldd	r25, Z+3	; 0x03
     6fc:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
     704:	9e af       	std	Y+62, r25	; 0x3e
     706:	8d af       	std	Y+61, r24	; 0x3d
     708:	8d ad       	ldd	r24, Y+61	; 0x3d
     70a:	9e ad       	ldd	r25, Y+62	; 0x3e
     70c:	9a af       	std	Y+58, r25	; 0x3a
     70e:	89 af       	std	Y+57, r24	; 0x39
     710:	89 ad       	ldd	r24, Y+57	; 0x39
     712:	9a ad       	ldd	r25, Y+58	; 0x3a
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <lcd_set_4bit+0x5c0>
     718:	9a af       	std	Y+58, r25	; 0x3a
     71a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     71c:	a8 e2       	ldi	r26, 0x28	; 40
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e8 e2       	ldi	r30, 0x28	; 40
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	80 81       	ld	r24, Z
     726:	8b 7f       	andi	r24, 0xFB	; 251
     728:	8c 93       	st	X, r24
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	a0 e8       	ldi	r26, 0x80	; 128
     730:	bf e3       	ldi	r27, 0x3F	; 63
     732:	8d ab       	std	Y+53, r24	; 0x35
     734:	9e ab       	std	Y+54, r25	; 0x36
     736:	af ab       	std	Y+55, r26	; 0x37
     738:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     73a:	6d a9       	ldd	r22, Y+53	; 0x35
     73c:	7e a9       	ldd	r23, Y+54	; 0x36
     73e:	8f a9       	ldd	r24, Y+55	; 0x37
     740:	98 ad       	ldd	r25, Y+56	; 0x38
     742:	2d ec       	ldi	r18, 0xCD	; 205
     744:	3c ec       	ldi	r19, 0xCC	; 204
     746:	4c e2       	ldi	r20, 0x2C	; 44
     748:	55 e4       	ldi	r21, 0x45	; 69
     74a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     74e:	dc 01       	movw	r26, r24
     750:	cb 01       	movw	r24, r22
     752:	89 ab       	std	Y+49, r24	; 0x31
     754:	9a ab       	std	Y+50, r25	; 0x32
     756:	ab ab       	std	Y+51, r26	; 0x33
     758:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     75a:	69 a9       	ldd	r22, Y+49	; 0x31
     75c:	7a a9       	ldd	r23, Y+50	; 0x32
     75e:	8b a9       	ldd	r24, Y+51	; 0x33
     760:	9c a9       	ldd	r25, Y+52	; 0x34
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e8       	ldi	r20, 0x80	; 128
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
     76e:	88 23       	and	r24, r24
     770:	2c f4       	brge	.+10     	; 0x77c <lcd_set_4bit+0x628>
		__ticks = 1;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	98 ab       	std	Y+48, r25	; 0x30
     778:	8f a7       	std	Y+47, r24	; 0x2f
     77a:	3f c0       	rjmp	.+126    	; 0x7fa <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     77c:	69 a9       	ldd	r22, Y+49	; 0x31
     77e:	7a a9       	ldd	r23, Y+50	; 0x32
     780:	8b a9       	ldd	r24, Y+51	; 0x33
     782:	9c a9       	ldd	r25, Y+52	; 0x34
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	3f ef       	ldi	r19, 0xFF	; 255
     788:	4f e7       	ldi	r20, 0x7F	; 127
     78a:	57 e4       	ldi	r21, 0x47	; 71
     78c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
     790:	18 16       	cp	r1, r24
     792:	4c f5       	brge	.+82     	; 0x7e6 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     794:	6d a9       	ldd	r22, Y+53	; 0x35
     796:	7e a9       	ldd	r23, Y+54	; 0x36
     798:	8f a9       	ldd	r24, Y+55	; 0x37
     79a:	98 ad       	ldd	r25, Y+56	; 0x38
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e2       	ldi	r20, 0x20	; 32
     7a2:	51 e4       	ldi	r21, 0x41	; 65
     7a4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     7a8:	dc 01       	movw	r26, r24
     7aa:	cb 01       	movw	r24, r22
     7ac:	bc 01       	movw	r22, r24
     7ae:	cd 01       	movw	r24, r26
     7b0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     7b4:	dc 01       	movw	r26, r24
     7b6:	cb 01       	movw	r24, r22
     7b8:	98 ab       	std	Y+48, r25	; 0x30
     7ba:	8f a7       	std	Y+47, r24	; 0x2f
     7bc:	0f c0       	rjmp	.+30     	; 0x7dc <lcd_set_4bit+0x688>
     7be:	84 e1       	ldi	r24, 0x14	; 20
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	9e a7       	std	Y+46, r25	; 0x2e
     7c4:	8d a7       	std	Y+45, r24	; 0x2d
     7c6:	8d a5       	ldd	r24, Y+45	; 0x2d
     7c8:	9e a5       	ldd	r25, Y+46	; 0x2e
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <lcd_set_4bit+0x676>
     7ce:	9e a7       	std	Y+46, r25	; 0x2e
     7d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d4:	98 a9       	ldd	r25, Y+48	; 0x30
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	98 ab       	std	Y+48, r25	; 0x30
     7da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7dc:	8f a5       	ldd	r24, Y+47	; 0x2f
     7de:	98 a9       	ldd	r25, Y+48	; 0x30
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	69 f7       	brne	.-38     	; 0x7be <lcd_set_4bit+0x66a>
     7e4:	14 c0       	rjmp	.+40     	; 0x80e <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7e6:	69 a9       	ldd	r22, Y+49	; 0x31
     7e8:	7a a9       	ldd	r23, Y+50	; 0x32
     7ea:	8b a9       	ldd	r24, Y+51	; 0x33
     7ec:	9c a9       	ldd	r25, Y+52	; 0x34
     7ee:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	98 ab       	std	Y+48, r25	; 0x30
     7f8:	8f a7       	std	Y+47, r24	; 0x2f
     7fa:	8f a5       	ldd	r24, Y+47	; 0x2f
     7fc:	98 a9       	ldd	r25, Y+48	; 0x30
     7fe:	9c a7       	std	Y+44, r25	; 0x2c
     800:	8b a7       	std	Y+43, r24	; 0x2b
     802:	8b a5       	ldd	r24, Y+43	; 0x2b
     804:	9c a5       	ldd	r25, Y+44	; 0x2c
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <lcd_set_4bit+0x6b2>
     80a:	9c a7       	std	Y+44, r25	; 0x2c
     80c:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     80e:	a8 e2       	ldi	r26, 0x28	; 40
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	e8 e2       	ldi	r30, 0x28	; 40
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	8e 7f       	andi	r24, 0xFE	; 254
     81a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     81c:	a8 e2       	ldi	r26, 0x28	; 40
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	e8 e2       	ldi	r30, 0x28	; 40
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	8d 7f       	andi	r24, 0xFD	; 253
     828:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     82a:	e8 e2       	ldi	r30, 0x28	; 40
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	80 e3       	ldi	r24, 0x30	; 48
     830:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     832:	a8 e2       	ldi	r26, 0x28	; 40
     834:	b0 e0       	ldi	r27, 0x00	; 0
     836:	e8 e2       	ldi	r30, 0x28	; 40
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	84 60       	ori	r24, 0x04	; 4
     83e:	8c 93       	st	X, r24
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	a0 ea       	ldi	r26, 0xA0	; 160
     846:	b0 e4       	ldi	r27, 0x40	; 64
     848:	8f a3       	std	Y+39, r24	; 0x27
     84a:	98 a7       	std	Y+40, r25	; 0x28
     84c:	a9 a7       	std	Y+41, r26	; 0x29
     84e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     850:	6f a1       	ldd	r22, Y+39	; 0x27
     852:	78 a5       	ldd	r23, Y+40	; 0x28
     854:	89 a5       	ldd	r24, Y+41	; 0x29
     856:	9a a5       	ldd	r25, Y+42	; 0x2a
     858:	2d ec       	ldi	r18, 0xCD	; 205
     85a:	3c ec       	ldi	r19, 0xCC	; 204
     85c:	4c e2       	ldi	r20, 0x2C	; 44
     85e:	55 e4       	ldi	r21, 0x45	; 69
     860:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	8b a3       	std	Y+35, r24	; 0x23
     86a:	9c a3       	std	Y+36, r25	; 0x24
     86c:	ad a3       	std	Y+37, r26	; 0x25
     86e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     870:	6b a1       	ldd	r22, Y+35	; 0x23
     872:	7c a1       	ldd	r23, Y+36	; 0x24
     874:	8d a1       	ldd	r24, Y+37	; 0x25
     876:	9e a1       	ldd	r25, Y+38	; 0x26
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e8       	ldi	r20, 0x80	; 128
     87e:	5f e3       	ldi	r21, 0x3F	; 63
     880:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
     884:	88 23       	and	r24, r24
     886:	2c f4       	brge	.+10     	; 0x892 <lcd_set_4bit+0x73e>
		__ticks = 1;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	9a a3       	std	Y+34, r25	; 0x22
     88e:	89 a3       	std	Y+33, r24	; 0x21
     890:	3f c0       	rjmp	.+126    	; 0x910 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     892:	6b a1       	ldd	r22, Y+35	; 0x23
     894:	7c a1       	ldd	r23, Y+36	; 0x24
     896:	8d a1       	ldd	r24, Y+37	; 0x25
     898:	9e a1       	ldd	r25, Y+38	; 0x26
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	3f ef       	ldi	r19, 0xFF	; 255
     89e:	4f e7       	ldi	r20, 0x7F	; 127
     8a0:	57 e4       	ldi	r21, 0x47	; 71
     8a2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
     8a6:	18 16       	cp	r1, r24
     8a8:	4c f5       	brge	.+82     	; 0x8fc <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8aa:	6f a1       	ldd	r22, Y+39	; 0x27
     8ac:	78 a5       	ldd	r23, Y+40	; 0x28
     8ae:	89 a5       	ldd	r24, Y+41	; 0x29
     8b0:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e2       	ldi	r20, 0x20	; 32
     8b8:	51 e4       	ldi	r21, 0x41	; 65
     8ba:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	bc 01       	movw	r22, r24
     8c4:	cd 01       	movw	r24, r26
     8c6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	9a a3       	std	Y+34, r25	; 0x22
     8d0:	89 a3       	std	Y+33, r24	; 0x21
     8d2:	0f c0       	rjmp	.+30     	; 0x8f2 <lcd_set_4bit+0x79e>
     8d4:	84 e1       	ldi	r24, 0x14	; 20
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	98 a3       	std	Y+32, r25	; 0x20
     8da:	8f 8f       	std	Y+31, r24	; 0x1f
     8dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8de:	98 a1       	ldd	r25, Y+32	; 0x20
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <lcd_set_4bit+0x78c>
     8e4:	98 a3       	std	Y+32, r25	; 0x20
     8e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ea:	9a a1       	ldd	r25, Y+34	; 0x22
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	9a a3       	std	Y+34, r25	; 0x22
     8f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f2:	89 a1       	ldd	r24, Y+33	; 0x21
     8f4:	9a a1       	ldd	r25, Y+34	; 0x22
     8f6:	00 97       	sbiw	r24, 0x00	; 0
     8f8:	69 f7       	brne	.-38     	; 0x8d4 <lcd_set_4bit+0x780>
     8fa:	14 c0       	rjmp	.+40     	; 0x924 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8fc:	6b a1       	ldd	r22, Y+35	; 0x23
     8fe:	7c a1       	ldd	r23, Y+36	; 0x24
     900:	8d a1       	ldd	r24, Y+37	; 0x25
     902:	9e a1       	ldd	r25, Y+38	; 0x26
     904:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	9a a3       	std	Y+34, r25	; 0x22
     90e:	89 a3       	std	Y+33, r24	; 0x21
     910:	89 a1       	ldd	r24, Y+33	; 0x21
     912:	9a a1       	ldd	r25, Y+34	; 0x22
     914:	9e 8f       	std	Y+30, r25	; 0x1e
     916:	8d 8f       	std	Y+29, r24	; 0x1d
     918:	8d 8d       	ldd	r24, Y+29	; 0x1d
     91a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	f1 f7       	brne	.-4      	; 0x91c <lcd_set_4bit+0x7c8>
     920:	9e 8f       	std	Y+30, r25	; 0x1e
     922:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     924:	a8 e2       	ldi	r26, 0x28	; 40
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	e8 e2       	ldi	r30, 0x28	; 40
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	8b 7f       	andi	r24, 0xFB	; 251
     930:	8c 93       	st	X, r24
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	a0 e8       	ldi	r26, 0x80	; 128
     938:	bf e3       	ldi	r27, 0x3F	; 63
     93a:	89 8f       	std	Y+25, r24	; 0x19
     93c:	9a 8f       	std	Y+26, r25	; 0x1a
     93e:	ab 8f       	std	Y+27, r26	; 0x1b
     940:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     942:	69 8d       	ldd	r22, Y+25	; 0x19
     944:	7a 8d       	ldd	r23, Y+26	; 0x1a
     946:	8b 8d       	ldd	r24, Y+27	; 0x1b
     948:	9c 8d       	ldd	r25, Y+28	; 0x1c
     94a:	2d ec       	ldi	r18, 0xCD	; 205
     94c:	3c ec       	ldi	r19, 0xCC	; 204
     94e:	4c e2       	ldi	r20, 0x2C	; 44
     950:	55 e4       	ldi	r21, 0x45	; 69
     952:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	8d 8b       	std	Y+21, r24	; 0x15
     95c:	9e 8b       	std	Y+22, r25	; 0x16
     95e:	af 8b       	std	Y+23, r26	; 0x17
     960:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     962:	6d 89       	ldd	r22, Y+21	; 0x15
     964:	7e 89       	ldd	r23, Y+22	; 0x16
     966:	8f 89       	ldd	r24, Y+23	; 0x17
     968:	98 8d       	ldd	r25, Y+24	; 0x18
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e8       	ldi	r20, 0x80	; 128
     970:	5f e3       	ldi	r21, 0x3F	; 63
     972:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
     976:	88 23       	and	r24, r24
     978:	2c f4       	brge	.+10     	; 0x984 <lcd_set_4bit+0x830>
		__ticks = 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	9c 8b       	std	Y+20, r25	; 0x14
     980:	8b 8b       	std	Y+19, r24	; 0x13
     982:	3f c0       	rjmp	.+126    	; 0xa02 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     984:	6d 89       	ldd	r22, Y+21	; 0x15
     986:	7e 89       	ldd	r23, Y+22	; 0x16
     988:	8f 89       	ldd	r24, Y+23	; 0x17
     98a:	98 8d       	ldd	r25, Y+24	; 0x18
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	3f ef       	ldi	r19, 0xFF	; 255
     990:	4f e7       	ldi	r20, 0x7F	; 127
     992:	57 e4       	ldi	r21, 0x47	; 71
     994:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
     998:	18 16       	cp	r1, r24
     99a:	4c f5       	brge	.+82     	; 0x9ee <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     99c:	69 8d       	ldd	r22, Y+25	; 0x19
     99e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e2       	ldi	r20, 0x20	; 32
     9aa:	51 e4       	ldi	r21, 0x41	; 65
     9ac:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	bc 01       	movw	r22, r24
     9b6:	cd 01       	movw	r24, r26
     9b8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	9c 8b       	std	Y+20, r25	; 0x14
     9c2:	8b 8b       	std	Y+19, r24	; 0x13
     9c4:	0f c0       	rjmp	.+30     	; 0x9e4 <lcd_set_4bit+0x890>
     9c6:	84 e1       	ldi	r24, 0x14	; 20
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	9a 8b       	std	Y+18, r25	; 0x12
     9cc:	89 8b       	std	Y+17, r24	; 0x11
     9ce:	89 89       	ldd	r24, Y+17	; 0x11
     9d0:	9a 89       	ldd	r25, Y+18	; 0x12
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <lcd_set_4bit+0x87e>
     9d6:	9a 8b       	std	Y+18, r25	; 0x12
     9d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9da:	8b 89       	ldd	r24, Y+19	; 0x13
     9dc:	9c 89       	ldd	r25, Y+20	; 0x14
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	9c 8b       	std	Y+20, r25	; 0x14
     9e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9e4:	8b 89       	ldd	r24, Y+19	; 0x13
     9e6:	9c 89       	ldd	r25, Y+20	; 0x14
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	69 f7       	brne	.-38     	; 0x9c6 <lcd_set_4bit+0x872>
     9ec:	14 c0       	rjmp	.+40     	; 0xa16 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ee:	6d 89       	ldd	r22, Y+21	; 0x15
     9f0:	7e 89       	ldd	r23, Y+22	; 0x16
     9f2:	8f 89       	ldd	r24, Y+23	; 0x17
     9f4:	98 8d       	ldd	r25, Y+24	; 0x18
     9f6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	9c 8b       	std	Y+20, r25	; 0x14
     a00:	8b 8b       	std	Y+19, r24	; 0x13
     a02:	8b 89       	ldd	r24, Y+19	; 0x13
     a04:	9c 89       	ldd	r25, Y+20	; 0x14
     a06:	98 8b       	std	Y+16, r25	; 0x10
     a08:	8f 87       	std	Y+15, r24	; 0x0f
     a0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a0c:	98 89       	ldd	r25, Y+16	; 0x10
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <lcd_set_4bit+0x8ba>
     a12:	98 8b       	std	Y+16, r25	; 0x10
     a14:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a16:	a8 e2       	ldi	r26, 0x28	; 40
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e8 e2       	ldi	r30, 0x28	; 40
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	8e 7f       	andi	r24, 0xFE	; 254
     a22:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a24:	a8 e2       	ldi	r26, 0x28	; 40
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	e8 e2       	ldi	r30, 0x28	; 40
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 81       	ld	r24, Z
     a2e:	8d 7f       	andi	r24, 0xFD	; 253
     a30:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a32:	e8 e2       	ldi	r30, 0x28	; 40
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 e2       	ldi	r24, 0x20	; 32
     a38:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a3a:	a8 e2       	ldi	r26, 0x28	; 40
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	e8 e2       	ldi	r30, 0x28	; 40
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	84 60       	ori	r24, 0x04	; 4
     a46:	8c 93       	st	X, r24
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a0 ea       	ldi	r26, 0xA0	; 160
     a4e:	b0 e4       	ldi	r27, 0x40	; 64
     a50:	8b 87       	std	Y+11, r24	; 0x0b
     a52:	9c 87       	std	Y+12, r25	; 0x0c
     a54:	ad 87       	std	Y+13, r26	; 0x0d
     a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a58:	6b 85       	ldd	r22, Y+11	; 0x0b
     a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a60:	2d ec       	ldi	r18, 0xCD	; 205
     a62:	3c ec       	ldi	r19, 0xCC	; 204
     a64:	4c e2       	ldi	r20, 0x2C	; 44
     a66:	55 e4       	ldi	r21, 0x45	; 69
     a68:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	8f 83       	std	Y+7, r24	; 0x07
     a72:	98 87       	std	Y+8, r25	; 0x08
     a74:	a9 87       	std	Y+9, r26	; 0x09
     a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a78:	6f 81       	ldd	r22, Y+7	; 0x07
     a7a:	78 85       	ldd	r23, Y+8	; 0x08
     a7c:	89 85       	ldd	r24, Y+9	; 0x09
     a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e8       	ldi	r20, 0x80	; 128
     a86:	5f e3       	ldi	r21, 0x3F	; 63
     a88:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
     a8c:	88 23       	and	r24, r24
     a8e:	2c f4       	brge	.+10     	; 0xa9a <lcd_set_4bit+0x946>
		__ticks = 1;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	9e 83       	std	Y+6, r25	; 0x06
     a96:	8d 83       	std	Y+5, r24	; 0x05
     a98:	3f c0       	rjmp	.+126    	; 0xb18 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a9a:	6f 81       	ldd	r22, Y+7	; 0x07
     a9c:	78 85       	ldd	r23, Y+8	; 0x08
     a9e:	89 85       	ldd	r24, Y+9	; 0x09
     aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	3f ef       	ldi	r19, 0xFF	; 255
     aa6:	4f e7       	ldi	r20, 0x7F	; 127
     aa8:	57 e4       	ldi	r21, 0x47	; 71
     aaa:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
     aae:	18 16       	cp	r1, r24
     ab0:	4c f5       	brge	.+82     	; 0xb04 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e2       	ldi	r20, 0x20	; 32
     ac0:	51 e4       	ldi	r21, 0x41	; 65
     ac2:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     ac6:	dc 01       	movw	r26, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	bc 01       	movw	r22, r24
     acc:	cd 01       	movw	r24, r26
     ace:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	9e 83       	std	Y+6, r25	; 0x06
     ad8:	8d 83       	std	Y+5, r24	; 0x05
     ada:	0f c0       	rjmp	.+30     	; 0xafa <lcd_set_4bit+0x9a6>
     adc:	84 e1       	ldi	r24, 0x14	; 20
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	9c 83       	std	Y+4, r25	; 0x04
     ae2:	8b 83       	std	Y+3, r24	; 0x03
     ae4:	8b 81       	ldd	r24, Y+3	; 0x03
     ae6:	9c 81       	ldd	r25, Y+4	; 0x04
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <lcd_set_4bit+0x994>
     aec:	9c 83       	std	Y+4, r25	; 0x04
     aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     af0:	8d 81       	ldd	r24, Y+5	; 0x05
     af2:	9e 81       	ldd	r25, Y+6	; 0x06
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	9e 83       	std	Y+6, r25	; 0x06
     af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     afa:	8d 81       	ldd	r24, Y+5	; 0x05
     afc:	9e 81       	ldd	r25, Y+6	; 0x06
     afe:	00 97       	sbiw	r24, 0x00	; 0
     b00:	69 f7       	brne	.-38     	; 0xadc <lcd_set_4bit+0x988>
     b02:	14 c0       	rjmp	.+40     	; 0xb2c <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b04:	6f 81       	ldd	r22, Y+7	; 0x07
     b06:	78 85       	ldd	r23, Y+8	; 0x08
     b08:	89 85       	ldd	r24, Y+9	; 0x09
     b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b0c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	9e 83       	std	Y+6, r25	; 0x06
     b16:	8d 83       	std	Y+5, r24	; 0x05
     b18:	8d 81       	ldd	r24, Y+5	; 0x05
     b1a:	9e 81       	ldd	r25, Y+6	; 0x06
     b1c:	9a 83       	std	Y+2, r25	; 0x02
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <lcd_set_4bit+0x9d0>
     b28:	9a 83       	std	Y+2, r25	; 0x02
     b2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b2c:	a8 e2       	ldi	r26, 0x28	; 40
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 e2       	ldi	r30, 0x28	; 40
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	8b 7f       	andi	r24, 0xFB	; 251
     b38:	8c 93       	st	X, r24

	
}
     b3a:	c0 59       	subi	r28, 0x90	; 144
     b3c:	df 4f       	sbci	r29, 0xFF	; 255
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret

00000b52 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	2e 97       	sbiw	r28, 0x0e	; 14
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e8       	ldi	r26, 0x80	; 128
     b6c:	bf e3       	ldi	r27, 0x3F	; 63
     b6e:	8b 87       	std	Y+11, r24	; 0x0b
     b70:	9c 87       	std	Y+12, r25	; 0x0c
     b72:	ad 87       	std	Y+13, r26	; 0x0d
     b74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b76:	6b 85       	ldd	r22, Y+11	; 0x0b
     b78:	7c 85       	ldd	r23, Y+12	; 0x0c
     b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b7e:	2d ec       	ldi	r18, 0xCD	; 205
     b80:	3c ec       	ldi	r19, 0xCC	; 204
     b82:	4c e2       	ldi	r20, 0x2C	; 44
     b84:	55 e4       	ldi	r21, 0x45	; 69
     b86:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	8f 83       	std	Y+7, r24	; 0x07
     b90:	98 87       	std	Y+8, r25	; 0x08
     b92:	a9 87       	std	Y+9, r26	; 0x09
     b94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b96:	6f 81       	ldd	r22, Y+7	; 0x07
     b98:	78 85       	ldd	r23, Y+8	; 0x08
     b9a:	89 85       	ldd	r24, Y+9	; 0x09
     b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	5f e3       	ldi	r21, 0x3F	; 63
     ba6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
     baa:	88 23       	and	r24, r24
     bac:	2c f4       	brge	.+10     	; 0xbb8 <lcd_init+0x66>
		__ticks = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9e 83       	std	Y+6, r25	; 0x06
     bb4:	8d 83       	std	Y+5, r24	; 0x05
     bb6:	3f c0       	rjmp	.+126    	; 0xc36 <lcd_init+0xe4>
	else if (__tmp > 65535)
     bb8:	6f 81       	ldd	r22, Y+7	; 0x07
     bba:	78 85       	ldd	r23, Y+8	; 0x08
     bbc:	89 85       	ldd	r24, Y+9	; 0x09
     bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	3f ef       	ldi	r19, 0xFF	; 255
     bc4:	4f e7       	ldi	r20, 0x7F	; 127
     bc6:	57 e4       	ldi	r21, 0x47	; 71
     bc8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
     bcc:	18 16       	cp	r1, r24
     bce:	4c f5       	brge	.+82     	; 0xc22 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e2       	ldi	r20, 0x20	; 32
     bde:	51 e4       	ldi	r21, 0x41	; 65
     be0:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	bc 01       	movw	r22, r24
     bea:	cd 01       	movw	r24, r26
     bec:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	9e 83       	std	Y+6, r25	; 0x06
     bf6:	8d 83       	std	Y+5, r24	; 0x05
     bf8:	0f c0       	rjmp	.+30     	; 0xc18 <lcd_init+0xc6>
     bfa:	84 e1       	ldi	r24, 0x14	; 20
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	9c 83       	std	Y+4, r25	; 0x04
     c00:	8b 83       	std	Y+3, r24	; 0x03
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	9c 81       	ldd	r25, Y+4	; 0x04
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <lcd_init+0xb4>
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0e:	8d 81       	ldd	r24, Y+5	; 0x05
     c10:	9e 81       	ldd	r25, Y+6	; 0x06
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	9e 83       	std	Y+6, r25	; 0x06
     c16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c18:	8d 81       	ldd	r24, Y+5	; 0x05
     c1a:	9e 81       	ldd	r25, Y+6	; 0x06
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	69 f7       	brne	.-38     	; 0xbfa <lcd_init+0xa8>
     c20:	14 c0       	rjmp	.+40     	; 0xc4a <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c22:	6f 81       	ldd	r22, Y+7	; 0x07
     c24:	78 85       	ldd	r23, Y+8	; 0x08
     c26:	89 85       	ldd	r24, Y+9	; 0x09
     c28:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	9e 83       	std	Y+6, r25	; 0x06
     c34:	8d 83       	std	Y+5, r24	; 0x05
     c36:	8d 81       	ldd	r24, Y+5	; 0x05
     c38:	9e 81       	ldd	r25, Y+6	; 0x06
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a 81       	ldd	r25, Y+2	; 0x02
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <lcd_init+0xf0>
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c4a:	88 e2       	ldi	r24, 0x28	; 40
     c4c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
	lcd_wr_command(0x01);
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
	lcd_wr_command(0x06);
     c56:	86 e0       	ldi	r24, 0x06	; 6
     c58:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
	lcd_wr_command(0x0E);
     c5c:	8e e0       	ldi	r24, 0x0E	; 14
     c5e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
	lcd_wr_command(0x80);
     c62:	80 e8       	ldi	r24, 0x80	; 128
     c64:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
		
}
     c68:	2e 96       	adiw	r28, 0x0e	; 14
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	6e 97       	sbiw	r28, 0x1e	; 30
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c90:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c92:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c94:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c96:	80 7f       	andi	r24, 0xF0	; 240
     c98:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c9a:	a8 e2       	ldi	r26, 0x28	; 40
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e8 e2       	ldi	r30, 0x28	; 40
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	8f 70       	andi	r24, 0x0F	; 15
     ca6:	8c 93       	st	X, r24
	lcd_port |= temp;
     ca8:	a8 e2       	ldi	r26, 0x28	; 40
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e8 e2       	ldi	r30, 0x28	; 40
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	90 81       	ld	r25, Z
     cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cb4:	89 2b       	or	r24, r25
     cb6:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     cb8:	a8 e2       	ldi	r26, 0x28	; 40
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e2       	ldi	r30, 0x28	; 40
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     cc6:	a8 e2       	ldi	r26, 0x28	; 40
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e8 e2       	ldi	r30, 0x28	; 40
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8d 7f       	andi	r24, 0xFD	; 253
     cd2:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     cd4:	a8 e2       	ldi	r26, 0x28	; 40
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e8 e2       	ldi	r30, 0x28	; 40
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	84 60       	ori	r24, 0x04	; 4
     ce0:	8c 93       	st	X, r24
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 ea       	ldi	r26, 0xA0	; 160
     ce8:	b0 e4       	ldi	r27, 0x40	; 64
     cea:	89 8f       	std	Y+25, r24	; 0x19
     cec:	9a 8f       	std	Y+26, r25	; 0x1a
     cee:	ab 8f       	std	Y+27, r26	; 0x1b
     cf0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf2:	69 8d       	ldd	r22, Y+25	; 0x19
     cf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cfa:	2d ec       	ldi	r18, 0xCD	; 205
     cfc:	3c ec       	ldi	r19, 0xCC	; 204
     cfe:	4c e2       	ldi	r20, 0x2C	; 44
     d00:	55 e4       	ldi	r21, 0x45	; 69
     d02:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	8d 8b       	std	Y+21, r24	; 0x15
     d0c:	9e 8b       	std	Y+22, r25	; 0x16
     d0e:	af 8b       	std	Y+23, r26	; 0x17
     d10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d12:	6d 89       	ldd	r22, Y+21	; 0x15
     d14:	7e 89       	ldd	r23, Y+22	; 0x16
     d16:	8f 89       	ldd	r24, Y+23	; 0x17
     d18:	98 8d       	ldd	r25, Y+24	; 0x18
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
     d26:	88 23       	and	r24, r24
     d28:	2c f4       	brge	.+10     	; 0xd34 <lcd_wr_command+0xba>
		__ticks = 1;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	9c 8b       	std	Y+20, r25	; 0x14
     d30:	8b 8b       	std	Y+19, r24	; 0x13
     d32:	3f c0       	rjmp	.+126    	; 0xdb2 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d34:	6d 89       	ldd	r22, Y+21	; 0x15
     d36:	7e 89       	ldd	r23, Y+22	; 0x16
     d38:	8f 89       	ldd	r24, Y+23	; 0x17
     d3a:	98 8d       	ldd	r25, Y+24	; 0x18
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	3f ef       	ldi	r19, 0xFF	; 255
     d40:	4f e7       	ldi	r20, 0x7F	; 127
     d42:	57 e4       	ldi	r21, 0x47	; 71
     d44:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
     d48:	18 16       	cp	r1, r24
     d4a:	4c f5       	brge	.+82     	; 0xd9e <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4c:	69 8d       	ldd	r22, Y+25	; 0x19
     d4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d50:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d52:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	51 e4       	ldi	r21, 0x41	; 65
     d5c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9c 8b       	std	Y+20, r25	; 0x14
     d72:	8b 8b       	std	Y+19, r24	; 0x13
     d74:	0f c0       	rjmp	.+30     	; 0xd94 <lcd_wr_command+0x11a>
     d76:	84 e1       	ldi	r24, 0x14	; 20
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	9a 8b       	std	Y+18, r25	; 0x12
     d7c:	89 8b       	std	Y+17, r24	; 0x11
     d7e:	89 89       	ldd	r24, Y+17	; 0x11
     d80:	9a 89       	ldd	r25, Y+18	; 0x12
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <lcd_wr_command+0x108>
     d86:	9a 8b       	std	Y+18, r25	; 0x12
     d88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8a:	8b 89       	ldd	r24, Y+19	; 0x13
     d8c:	9c 89       	ldd	r25, Y+20	; 0x14
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	9c 8b       	std	Y+20, r25	; 0x14
     d92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d94:	8b 89       	ldd	r24, Y+19	; 0x13
     d96:	9c 89       	ldd	r25, Y+20	; 0x14
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	69 f7       	brne	.-38     	; 0xd76 <lcd_wr_command+0xfc>
     d9c:	14 c0       	rjmp	.+40     	; 0xdc6 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9e:	6d 89       	ldd	r22, Y+21	; 0x15
     da0:	7e 89       	ldd	r23, Y+22	; 0x16
     da2:	8f 89       	ldd	r24, Y+23	; 0x17
     da4:	98 8d       	ldd	r25, Y+24	; 0x18
     da6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	9c 8b       	std	Y+20, r25	; 0x14
     db0:	8b 8b       	std	Y+19, r24	; 0x13
     db2:	8b 89       	ldd	r24, Y+19	; 0x13
     db4:	9c 89       	ldd	r25, Y+20	; 0x14
     db6:	98 8b       	std	Y+16, r25	; 0x10
     db8:	8f 87       	std	Y+15, r24	; 0x0f
     dba:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbc:	98 89       	ldd	r25, Y+16	; 0x10
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <lcd_wr_command+0x144>
     dc2:	98 8b       	std	Y+16, r25	; 0x10
     dc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8b 7f       	andi	r24, 0xFB	; 251
     dd2:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     dd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd6:	8f 70       	andi	r24, 0x0F	; 15
     dd8:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     dda:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ddc:	82 95       	swap	r24
     dde:	80 7f       	andi	r24, 0xF0	; 240
     de0:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     de2:	a8 e2       	ldi	r26, 0x28	; 40
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e2       	ldi	r30, 0x28	; 40
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8f 70       	andi	r24, 0x0F	; 15
     dee:	8c 93       	st	X, r24
	lcd_port |= cmd;
     df0:	a8 e2       	ldi	r26, 0x28	; 40
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e8 e2       	ldi	r30, 0x28	; 40
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	90 81       	ld	r25, Z
     dfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dfc:	89 2b       	or	r24, r25
     dfe:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e00:	a8 e2       	ldi	r26, 0x28	; 40
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e8 e2       	ldi	r30, 0x28	; 40
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8e 7f       	andi	r24, 0xFE	; 254
     e0c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e0e:	a8 e2       	ldi	r26, 0x28	; 40
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e8 e2       	ldi	r30, 0x28	; 40
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8d 7f       	andi	r24, 0xFD	; 253
     e1a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e1c:	a8 e2       	ldi	r26, 0x28	; 40
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e8 e2       	ldi	r30, 0x28	; 40
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	84 60       	ori	r24, 0x04	; 4
     e28:	8c 93       	st	X, r24
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a0 ea       	ldi	r26, 0xA0	; 160
     e30:	b0 e4       	ldi	r27, 0x40	; 64
     e32:	8b 87       	std	Y+11, r24	; 0x0b
     e34:	9c 87       	std	Y+12, r25	; 0x0c
     e36:	ad 87       	std	Y+13, r26	; 0x0d
     e38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e40:	9e 85       	ldd	r25, Y+14	; 0x0e
     e42:	2d ec       	ldi	r18, 0xCD	; 205
     e44:	3c ec       	ldi	r19, 0xCC	; 204
     e46:	4c e2       	ldi	r20, 0x2C	; 44
     e48:	55 e4       	ldi	r21, 0x45	; 69
     e4a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	8f 83       	std	Y+7, r24	; 0x07
     e54:	98 87       	std	Y+8, r25	; 0x08
     e56:	a9 87       	std	Y+9, r26	; 0x09
     e58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e8       	ldi	r20, 0x80	; 128
     e68:	5f e3       	ldi	r21, 0x3F	; 63
     e6a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
     e6e:	88 23       	and	r24, r24
     e70:	2c f4       	brge	.+10     	; 0xe7c <lcd_wr_command+0x202>
		__ticks = 1;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	8d 83       	std	Y+5, r24	; 0x05
     e7a:	3f c0       	rjmp	.+126    	; 0xefa <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e7c:	6f 81       	ldd	r22, Y+7	; 0x07
     e7e:	78 85       	ldd	r23, Y+8	; 0x08
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9a 85       	ldd	r25, Y+10	; 0x0a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	3f ef       	ldi	r19, 0xFF	; 255
     e88:	4f e7       	ldi	r20, 0x7F	; 127
     e8a:	57 e4       	ldi	r21, 0x47	; 71
     e8c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
     e90:	18 16       	cp	r1, r24
     e92:	4c f5       	brge	.+82     	; 0xee6 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e94:	6b 85       	ldd	r22, Y+11	; 0x0b
     e96:	7c 85       	ldd	r23, Y+12	; 0x0c
     e98:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e2       	ldi	r20, 0x20	; 32
     ea2:	51 e4       	ldi	r21, 0x41	; 65
     ea4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	bc 01       	movw	r22, r24
     eae:	cd 01       	movw	r24, r26
     eb0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9e 83       	std	Y+6, r25	; 0x06
     eba:	8d 83       	std	Y+5, r24	; 0x05
     ebc:	0f c0       	rjmp	.+30     	; 0xedc <lcd_wr_command+0x262>
     ebe:	84 e1       	ldi	r24, 0x14	; 20
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	9c 83       	std	Y+4, r25	; 0x04
     ec4:	8b 83       	std	Y+3, r24	; 0x03
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	9c 81       	ldd	r25, Y+4	; 0x04
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <lcd_wr_command+0x250>
     ece:	9c 83       	std	Y+4, r25	; 0x04
     ed0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	69 f7       	brne	.-38     	; 0xebe <lcd_wr_command+0x244>
     ee4:	14 c0       	rjmp	.+40     	; 0xf0e <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee6:	6f 81       	ldd	r22, Y+7	; 0x07
     ee8:	78 85       	ldd	r23, Y+8	; 0x08
     eea:	89 85       	ldd	r24, Y+9	; 0x09
     eec:	9a 85       	ldd	r25, Y+10	; 0x0a
     eee:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	9e 83       	std	Y+6, r25	; 0x06
     ef8:	8d 83       	std	Y+5, r24	; 0x05
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <lcd_wr_command+0x28c>
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     f0e:	a8 e2       	ldi	r26, 0x28	; 40
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e8 e2       	ldi	r30, 0x28	; 40
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8b 7f       	andi	r24, 0xFB	; 251
     f1a:	8c 93       	st	X, r24
}
     f1c:	6e 96       	adiw	r28, 0x1e	; 30
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	6e 97       	sbiw	r28, 0x1e	; 30
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f44:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f46:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f48:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f4a:	80 7f       	andi	r24, 0xF0	; 240
     f4c:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f4e:	a8 e2       	ldi	r26, 0x28	; 40
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e8 e2       	ldi	r30, 0x28	; 40
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 70       	andi	r24, 0x0F	; 15
     f5a:	8c 93       	st	X, r24
	lcd_port |= temp;
     f5c:	a8 e2       	ldi	r26, 0x28	; 40
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e8 e2       	ldi	r30, 0x28	; 40
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	90 81       	ld	r25, Z
     f66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f68:	89 2b       	or	r24, r25
     f6a:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f6c:	a8 e2       	ldi	r26, 0x28	; 40
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e8 e2       	ldi	r30, 0x28	; 40
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	81 60       	ori	r24, 0x01	; 1
     f78:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f7a:	a8 e2       	ldi	r26, 0x28	; 40
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e8 e2       	ldi	r30, 0x28	; 40
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8d 7f       	andi	r24, 0xFD	; 253
     f86:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f88:	a8 e2       	ldi	r26, 0x28	; 40
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e8 e2       	ldi	r30, 0x28	; 40
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	84 60       	ori	r24, 0x04	; 4
     f94:	8c 93       	st	X, r24
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 ea       	ldi	r26, 0xA0	; 160
     f9c:	b0 e4       	ldi	r27, 0x40	; 64
     f9e:	89 8f       	std	Y+25, r24	; 0x19
     fa0:	9a 8f       	std	Y+26, r25	; 0x1a
     fa2:	ab 8f       	std	Y+27, r26	; 0x1b
     fa4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa6:	69 8d       	ldd	r22, Y+25	; 0x19
     fa8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     faa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fae:	2d ec       	ldi	r18, 0xCD	; 205
     fb0:	3c ec       	ldi	r19, 0xCC	; 204
     fb2:	4c e2       	ldi	r20, 0x2C	; 44
     fb4:	55 e4       	ldi	r21, 0x45	; 69
     fb6:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	8d 8b       	std	Y+21, r24	; 0x15
     fc0:	9e 8b       	std	Y+22, r25	; 0x16
     fc2:	af 8b       	std	Y+23, r26	; 0x17
     fc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fc6:	6d 89       	ldd	r22, Y+21	; 0x15
     fc8:	7e 89       	ldd	r23, Y+22	; 0x16
     fca:	8f 89       	ldd	r24, Y+23	; 0x17
     fcc:	98 8d       	ldd	r25, Y+24	; 0x18
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e8       	ldi	r20, 0x80	; 128
     fd4:	5f e3       	ldi	r21, 0x3F	; 63
     fd6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
     fda:	88 23       	and	r24, r24
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <lcd_wr_char+0xba>
		__ticks = 1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	9c 8b       	std	Y+20, r25	; 0x14
     fe4:	8b 8b       	std	Y+19, r24	; 0x13
     fe6:	3f c0       	rjmp	.+126    	; 0x1066 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fe8:	6d 89       	ldd	r22, Y+21	; 0x15
     fea:	7e 89       	ldd	r23, Y+22	; 0x16
     fec:	8f 89       	ldd	r24, Y+23	; 0x17
     fee:	98 8d       	ldd	r25, Y+24	; 0x18
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	3f ef       	ldi	r19, 0xFF	; 255
     ff4:	4f e7       	ldi	r20, 0x7F	; 127
     ff6:	57 e4       	ldi	r21, 0x47	; 71
     ff8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
     ffc:	18 16       	cp	r1, r24
     ffe:	4c f5       	brge	.+82     	; 0x1052 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1000:	69 8d       	ldd	r22, Y+25	; 0x19
    1002:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1004:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1006:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e2       	ldi	r20, 0x20	; 32
    100e:	51 e4       	ldi	r21, 0x41	; 65
    1010:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	bc 01       	movw	r22, r24
    101a:	cd 01       	movw	r24, r26
    101c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	9c 8b       	std	Y+20, r25	; 0x14
    1026:	8b 8b       	std	Y+19, r24	; 0x13
    1028:	0f c0       	rjmp	.+30     	; 0x1048 <lcd_wr_char+0x11a>
    102a:	84 e1       	ldi	r24, 0x14	; 20
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	9a 8b       	std	Y+18, r25	; 0x12
    1030:	89 8b       	std	Y+17, r24	; 0x11
    1032:	89 89       	ldd	r24, Y+17	; 0x11
    1034:	9a 89       	ldd	r25, Y+18	; 0x12
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <lcd_wr_char+0x108>
    103a:	9a 8b       	std	Y+18, r25	; 0x12
    103c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103e:	8b 89       	ldd	r24, Y+19	; 0x13
    1040:	9c 89       	ldd	r25, Y+20	; 0x14
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	9c 8b       	std	Y+20, r25	; 0x14
    1046:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1048:	8b 89       	ldd	r24, Y+19	; 0x13
    104a:	9c 89       	ldd	r25, Y+20	; 0x14
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	69 f7       	brne	.-38     	; 0x102a <lcd_wr_char+0xfc>
    1050:	14 c0       	rjmp	.+40     	; 0x107a <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1052:	6d 89       	ldd	r22, Y+21	; 0x15
    1054:	7e 89       	ldd	r23, Y+22	; 0x16
    1056:	8f 89       	ldd	r24, Y+23	; 0x17
    1058:	98 8d       	ldd	r25, Y+24	; 0x18
    105a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	9c 8b       	std	Y+20, r25	; 0x14
    1064:	8b 8b       	std	Y+19, r24	; 0x13
    1066:	8b 89       	ldd	r24, Y+19	; 0x13
    1068:	9c 89       	ldd	r25, Y+20	; 0x14
    106a:	98 8b       	std	Y+16, r25	; 0x10
    106c:	8f 87       	std	Y+15, r24	; 0x0f
    106e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1070:	98 89       	ldd	r25, Y+16	; 0x10
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <lcd_wr_char+0x144>
    1076:	98 8b       	std	Y+16, r25	; 0x10
    1078:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8b 7f       	andi	r24, 0xFB	; 251
    1086:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    1088:	8e 8d       	ldd	r24, Y+30	; 0x1e
    108a:	8f 70       	andi	r24, 0x0F	; 15
    108c:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    108e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1090:	82 95       	swap	r24
    1092:	80 7f       	andi	r24, 0xF0	; 240
    1094:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1096:	a8 e2       	ldi	r26, 0x28	; 40
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e8 e2       	ldi	r30, 0x28	; 40
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8f 70       	andi	r24, 0x0F	; 15
    10a2:	8c 93       	st	X, r24
	lcd_port |= letter;
    10a4:	a8 e2       	ldi	r26, 0x28	; 40
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e8 e2       	ldi	r30, 0x28	; 40
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	90 81       	ld	r25, Z
    10ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10b0:	89 2b       	or	r24, r25
    10b2:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    10b4:	a8 e2       	ldi	r26, 0x28	; 40
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e8 e2       	ldi	r30, 0x28	; 40
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	81 60       	ori	r24, 0x01	; 1
    10c0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    10c2:	a8 e2       	ldi	r26, 0x28	; 40
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e8 e2       	ldi	r30, 0x28	; 40
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8d 7f       	andi	r24, 0xFD	; 253
    10ce:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10d0:	a8 e2       	ldi	r26, 0x28	; 40
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e8 e2       	ldi	r30, 0x28	; 40
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	84 60       	ori	r24, 0x04	; 4
    10dc:	8c 93       	st	X, r24
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a0 ea       	ldi	r26, 0xA0	; 160
    10e4:	b0 e4       	ldi	r27, 0x40	; 64
    10e6:	8b 87       	std	Y+11, r24	; 0x0b
    10e8:	9c 87       	std	Y+12, r25	; 0x0c
    10ea:	ad 87       	std	Y+13, r26	; 0x0d
    10ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f6:	2d ec       	ldi	r18, 0xCD	; 205
    10f8:	3c ec       	ldi	r19, 0xCC	; 204
    10fa:	4c e2       	ldi	r20, 0x2C	; 44
    10fc:	55 e4       	ldi	r21, 0x45	; 69
    10fe:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	8f 83       	std	Y+7, r24	; 0x07
    1108:	98 87       	std	Y+8, r25	; 0x08
    110a:	a9 87       	std	Y+9, r26	; 0x09
    110c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    110e:	6f 81       	ldd	r22, Y+7	; 0x07
    1110:	78 85       	ldd	r23, Y+8	; 0x08
    1112:	89 85       	ldd	r24, Y+9	; 0x09
    1114:	9a 85       	ldd	r25, Y+10	; 0x0a
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e8       	ldi	r20, 0x80	; 128
    111c:	5f e3       	ldi	r21, 0x3F	; 63
    111e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__ltsf2>
    1122:	88 23       	and	r24, r24
    1124:	2c f4       	brge	.+10     	; 0x1130 <lcd_wr_char+0x202>
		__ticks = 1;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9e 83       	std	Y+6, r25	; 0x06
    112c:	8d 83       	std	Y+5, r24	; 0x05
    112e:	3f c0       	rjmp	.+126    	; 0x11ae <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	78 85       	ldd	r23, Y+8	; 0x08
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	3f ef       	ldi	r19, 0xFF	; 255
    113c:	4f e7       	ldi	r20, 0x7F	; 127
    113e:	57 e4       	ldi	r21, 0x47	; 71
    1140:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__gtsf2>
    1144:	18 16       	cp	r1, r24
    1146:	4c f5       	brge	.+82     	; 0x119a <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1148:	6b 85       	ldd	r22, Y+11	; 0x0b
    114a:	7c 85       	ldd	r23, Y+12	; 0x0c
    114c:	8d 85       	ldd	r24, Y+13	; 0x0d
    114e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e2       	ldi	r20, 0x20	; 32
    1156:	51 e4       	ldi	r21, 0x41	; 65
    1158:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	bc 01       	movw	r22, r24
    1162:	cd 01       	movw	r24, r26
    1164:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	9e 83       	std	Y+6, r25	; 0x06
    116e:	8d 83       	std	Y+5, r24	; 0x05
    1170:	0f c0       	rjmp	.+30     	; 0x1190 <lcd_wr_char+0x262>
    1172:	84 e1       	ldi	r24, 0x14	; 20
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <lcd_wr_char+0x250>
    1182:	9c 83       	std	Y+4, r25	; 0x04
    1184:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	9e 83       	std	Y+6, r25	; 0x06
    118e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	9e 81       	ldd	r25, Y+6	; 0x06
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	69 f7       	brne	.-38     	; 0x1172 <lcd_wr_char+0x244>
    1198:	14 c0       	rjmp	.+40     	; 0x11c2 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119a:	6f 81       	ldd	r22, Y+7	; 0x07
    119c:	78 85       	ldd	r23, Y+8	; 0x08
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <lcd_wr_char+0x28c>
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    11c2:	a8 e2       	ldi	r26, 0x28	; 40
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e8 e2       	ldi	r30, 0x28	; 40
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8b 7f       	andi	r24, 0xFB	; 251
    11ce:	8c 93       	st	X, r24
}
    11d0:	6e 96       	adiw	r28, 0x1e	; 30
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11ea:	80 e8       	ldi	r24, 0x80	; 128
    11ec:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	0f 92       	push	r0
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	0a c0       	rjmp	.+20     	; 0x121c <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1208:	e9 81       	ldd	r30, Y+1	; 0x01
    120a:	fa 81       	ldd	r31, Y+2	; 0x02
    120c:	80 81       	ld	r24, Z
    120e:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
		str++;
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    121c:	e9 81       	ldd	r30, Y+1	; 0x01
    121e:	fa 81       	ldd	r31, Y+2	; 0x02
    1220:	80 81       	ld	r24, Z
    1222:	88 23       	and	r24, r24
    1224:	89 f7       	brne	.-30     	; 0x1208 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	00 d0       	rcall	.+0      	; 0x1236 <lcd_cursor+0x6>
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3c 83       	std	Y+4, r19	; 0x04
    1248:	2b 83       	std	Y+3, r18	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	91 05       	cpc	r25, r1
    1252:	d9 f0       	breq	.+54     	; 0x128a <lcd_cursor+0x5a>
    1254:	2b 81       	ldd	r18, Y+3	; 0x03
    1256:	3c 81       	ldd	r19, Y+4	; 0x04
    1258:	23 30       	cpi	r18, 0x03	; 3
    125a:	31 05       	cpc	r19, r1
    125c:	34 f4       	brge	.+12     	; 0x126a <lcd_cursor+0x3a>
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	91 05       	cpc	r25, r1
    1266:	61 f0       	breq	.+24     	; 0x1280 <lcd_cursor+0x50>
    1268:	1e c0       	rjmp	.+60     	; 0x12a6 <lcd_cursor+0x76>
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	3c 81       	ldd	r19, Y+4	; 0x04
    126e:	23 30       	cpi	r18, 0x03	; 3
    1270:	31 05       	cpc	r19, r1
    1272:	81 f0       	breq	.+32     	; 0x1294 <lcd_cursor+0x64>
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	91 05       	cpc	r25, r1
    127c:	81 f0       	breq	.+32     	; 0x129e <lcd_cursor+0x6e>
    127e:	13 c0       	rjmp	.+38     	; 0x12a6 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	81 58       	subi	r24, 0x81	; 129
    1284:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
    1288:	0e c0       	rjmp	.+28     	; 0x12a6 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	81 54       	subi	r24, 0x41	; 65
    128e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	8d 56       	subi	r24, 0x6D	; 109
    1298:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
    129c:	04 c0       	rjmp	.+8      	; 0x12a6 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	8d 52       	subi	r24, 0x2D	; 45
    12a2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
		default: break;
	}
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	27 97       	sbiw	r28, 0x07	; 7
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	8a 83       	std	Y+2, r24	; 0x02
    12ca:	6b 83       	std	Y+3, r22	; 0x03
    12cc:	5d 83       	std	Y+5, r21	; 0x05
    12ce:	4c 83       	std	Y+4, r20	; 0x04
    12d0:	3f 83       	std	Y+7, r19	; 0x07
    12d2:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12d4:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	88 23       	and	r24, r24
    12da:	19 f0       	breq	.+6      	; 0x12e2 <lcd_print+0x2e>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 23       	and	r24, r24
    12e0:	19 f4       	brne	.+6      	; 0x12e8 <lcd_print+0x34>
	{
		lcd_home();
    12e2:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <lcd_home>
    12e6:	04 c0       	rjmp	.+8      	; 0x12f0 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	6b 81       	ldd	r22, Y+3	; 0x03
    12ec:	0e 94 18 09 	call	0x1230	; 0x1230 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12f0:	8e 81       	ldd	r24, Y+6	; 0x06
    12f2:	9f 81       	ldd	r25, Y+7	; 0x07
    12f4:	85 30       	cpi	r24, 0x05	; 5
    12f6:	91 05       	cpc	r25, r1
    12f8:	19 f0       	breq	.+6      	; 0x1300 <lcd_print+0x4c>
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	a9 f4       	brne	.+42     	; 0x132a <lcd_print+0x76>
	{
		million=value/10000+48;
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	20 e1       	ldi	r18, 0x10	; 16
    1306:	37 e2       	ldi	r19, 0x27	; 39
    1308:	b9 01       	movw	r22, r18
    130a:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodhi4>
    130e:	cb 01       	movw	r24, r22
    1310:	c0 96       	adiw	r24, 0x30	; 48
    1312:	90 93 09 02 	sts	0x0209, r25
    1316:	80 93 08 02 	sts	0x0208, r24
		lcd_wr_char(million);
    131a:	80 91 08 02 	lds	r24, 0x0208
    131e:	90 91 09 02 	lds	r25, 0x0209
    1322:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
		flag=1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    132a:	8e 81       	ldd	r24, Y+6	; 0x06
    132c:	9f 81       	ldd	r25, Y+7	; 0x07
    132e:	84 30       	cpi	r24, 0x04	; 4
    1330:	91 05       	cpc	r25, r1
    1332:	19 f0       	breq	.+6      	; 0x133a <lcd_print+0x86>
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	11 f5       	brne	.+68     	; 0x137e <lcd_print+0xca>
	{
		temp = value/1000;
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	28 ee       	ldi	r18, 0xE8	; 232
    1340:	33 e0       	ldi	r19, 0x03	; 3
    1342:	b9 01       	movw	r22, r18
    1344:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodhi4>
    1348:	cb 01       	movw	r24, r22
    134a:	90 93 0b 02 	sts	0x020B, r25
    134e:	80 93 0a 02 	sts	0x020A, r24
		thousand = temp%10 + 48;
    1352:	80 91 0a 02 	lds	r24, 0x020A
    1356:	90 91 0b 02 	lds	r25, 0x020B
    135a:	2a e0       	ldi	r18, 0x0A	; 10
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	b9 01       	movw	r22, r18
    1360:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodhi4>
    1364:	c0 96       	adiw	r24, 0x30	; 48
    1366:	90 93 14 02 	sts	0x0214, r25
    136a:	80 93 13 02 	sts	0x0213, r24
		lcd_wr_char(thousand);
    136e:	80 91 13 02 	lds	r24, 0x0213
    1372:	90 91 14 02 	lds	r25, 0x0214
    1376:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
		flag=1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    137e:	8e 81       	ldd	r24, Y+6	; 0x06
    1380:	9f 81       	ldd	r25, Y+7	; 0x07
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	91 05       	cpc	r25, r1
    1386:	19 f0       	breq	.+6      	; 0x138e <lcd_print+0xda>
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	11 f5       	brne	.+68     	; 0x13d2 <lcd_print+0x11e>
	{
		temp = value/100;
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	24 e6       	ldi	r18, 0x64	; 100
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	b9 01       	movw	r22, r18
    1398:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodhi4>
    139c:	cb 01       	movw	r24, r22
    139e:	90 93 0b 02 	sts	0x020B, r25
    13a2:	80 93 0a 02 	sts	0x020A, r24
		hundred = temp%10 + 48;
    13a6:	80 91 0a 02 	lds	r24, 0x020A
    13aa:	90 91 0b 02 	lds	r25, 0x020B
    13ae:	2a e0       	ldi	r18, 0x0A	; 10
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	b9 01       	movw	r22, r18
    13b4:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodhi4>
    13b8:	c0 96       	adiw	r24, 0x30	; 48
    13ba:	90 93 10 02 	sts	0x0210, r25
    13be:	80 93 0f 02 	sts	0x020F, r24
		lcd_wr_char(hundred);
    13c2:	80 91 0f 02 	lds	r24, 0x020F
    13c6:	90 91 10 02 	lds	r25, 0x0210
    13ca:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
		flag=1;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13d2:	8e 81       	ldd	r24, Y+6	; 0x06
    13d4:	9f 81       	ldd	r25, Y+7	; 0x07
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	91 05       	cpc	r25, r1
    13da:	19 f0       	breq	.+6      	; 0x13e2 <lcd_print+0x12e>
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	11 f5       	brne	.+68     	; 0x1426 <lcd_print+0x172>
	{
		temp = value/10;
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	2a e0       	ldi	r18, 0x0A	; 10
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	b9 01       	movw	r22, r18
    13ec:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodhi4>
    13f0:	cb 01       	movw	r24, r22
    13f2:	90 93 0b 02 	sts	0x020B, r25
    13f6:	80 93 0a 02 	sts	0x020A, r24
		tens = temp%10 + 48;
    13fa:	80 91 0a 02 	lds	r24, 0x020A
    13fe:	90 91 0b 02 	lds	r25, 0x020B
    1402:	2a e0       	ldi	r18, 0x0A	; 10
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	b9 01       	movw	r22, r18
    1408:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodhi4>
    140c:	c0 96       	adiw	r24, 0x30	; 48
    140e:	90 93 0d 02 	sts	0x020D, r25
    1412:	80 93 0c 02 	sts	0x020C, r24
		lcd_wr_char(tens);
    1416:	80 91 0c 02 	lds	r24, 0x020C
    141a:	90 91 0d 02 	lds	r25, 0x020D
    141e:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
		flag=1;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1426:	8e 81       	ldd	r24, Y+6	; 0x06
    1428:	9f 81       	ldd	r25, Y+7	; 0x07
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	19 f0       	breq	.+6      	; 0x1436 <lcd_print+0x182>
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	91 f4       	brne	.+36     	; 0x145a <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	9d 81       	ldd	r25, Y+5	; 0x05
    143a:	2a e0       	ldi	r18, 0x0A	; 10
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	b9 01       	movw	r22, r18
    1440:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodhi4>
    1444:	c0 96       	adiw	r24, 0x30	; 48
    1446:	90 93 12 02 	sts	0x0212, r25
    144a:	80 93 11 02 	sts	0x0211, r24
		lcd_wr_char(unit);
    144e:	80 91 11 02 	lds	r24, 0x0211
    1452:	90 91 12 02 	lds	r25, 0x0212
    1456:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
	}
	if(digits>5)
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	9f 81       	ldd	r25, Y+7	; 0x07
    145e:	86 30       	cpi	r24, 0x06	; 6
    1460:	91 05       	cpc	r25, r1
    1462:	1c f0       	brlt	.+6      	; 0x146a <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    1464:	85 e4       	ldi	r24, 0x45	; 69
    1466:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
	}
	
}
    146a:	27 96       	adiw	r28, 0x07	; 7
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <buzzer_pin_config>:
#include "lcd.h"

unsigned char data; //to store received data from UDR1

void buzzer_pin_config (void)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    1484:	a7 e2       	ldi	r26, 0x27	; 39
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e7 e2       	ldi	r30, 0x27	; 39
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	88 60       	ori	r24, 0x08	; 8
    1490:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    1492:	a8 e2       	ldi	r26, 0x28	; 40
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e8 e2       	ldi	r30, 0x28	; 40
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	87 7f       	andi	r24, 0xF7	; 247
    149e:	8c 93       	st	X, r24
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <motion_pin_config>:

void motion_pin_config (void)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    14ae:	a1 e2       	ldi	r26, 0x21	; 33
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e1 e2       	ldi	r30, 0x21	; 33
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	8f 60       	ori	r24, 0x0F	; 15
    14ba:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    14bc:	a2 e2       	ldi	r26, 0x22	; 34
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e2 e2       	ldi	r30, 0x22	; 34
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	80 7f       	andi	r24, 0xF0	; 240
    14c8:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    14ca:	aa e0       	ldi	r26, 0x0A	; 10
    14cc:	b1 e0       	ldi	r27, 0x01	; 1
    14ce:	ea e0       	ldi	r30, 0x0A	; 10
    14d0:	f1 e0       	ldi	r31, 0x01	; 1
    14d2:	80 81       	ld	r24, Z
    14d4:	88 61       	ori	r24, 0x18	; 24
    14d6:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    14d8:	ab e0       	ldi	r26, 0x0B	; 11
    14da:	b1 e0       	ldi	r27, 0x01	; 1
    14dc:	eb e0       	ldi	r30, 0x0B	; 11
    14de:	f1 e0       	ldi	r31, 0x01	; 1
    14e0:	80 81       	ld	r24, Z
    14e2:	88 61       	ori	r24, 0x18	; 24
    14e4:	8c 93       	st	X, r24
}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <port_init>:

//Function to initialize ports
void port_init()
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config();
    14f4:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <motion_pin_config>
	buzzer_pin_config();
    14f8:	0e 94 3e 0a 	call	0x147c	; 0x147c <buzzer_pin_config>
	lcd_port_config();
    14fc:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_port_config>
	lcd_set_4bit();
    1500:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_set_4bit>
	lcd_init();
    1504:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_init>
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <buzzer_on>:

void buzzer_on (void)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	0f 92       	push	r0
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1518:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    151a:	e6 e2       	ldi	r30, 0x26	; 38
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	88 60       	ori	r24, 0x08	; 8
    1526:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1528:	e8 e2       	ldi	r30, 0x28	; 40
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	80 83       	st	Z, r24
}
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <buzzer_off>:

void buzzer_off (void)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	0f 92       	push	r0
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1542:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1544:	e6 e2       	ldi	r30, 0x26	; 38
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	87 7f       	andi	r24, 0xF7	; 247
    1550:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1552:	e8 e2       	ldi	r30, 0x28	; 40
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	80 83       	st	Z, r24
}
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <uart2_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    156a:	e1 ec       	ldi	r30, 0xC1	; 193
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    1570:	e0 ec       	ldi	r30, 0xC0	; 192
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    1576:	e2 ec       	ldi	r30, 0xC2	; 194
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	86 e0       	ldi	r24, 0x06	; 6
    157c:	80 83       	st	Z, r24
 UBRR0L = 0x47; //set baud rate lo
    157e:	e4 ec       	ldi	r30, 0xC4	; 196
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	87 e4       	ldi	r24, 0x47	; 71
    1584:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
    1586:	e5 ec       	ldi	r30, 0xC5	; 197
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	10 82       	st	Z, r1
 UCSR0B = 0x98;
    158c:	e1 ec       	ldi	r30, 0xC1	; 193
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	88 e9       	ldi	r24, 0x98	; 152
    1592:	80 83       	st	Z, r24
}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    159a:	1f 92       	push	r1
    159c:	0f 92       	push	r0
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	0f 92       	push	r0
    15a2:	00 90 5b 00 	lds	r0, 0x005B
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	2f 93       	push	r18
    15ac:	3f 93       	push	r19
    15ae:	4f 93       	push	r20
    15b0:	5f 93       	push	r21
    15b2:	6f 93       	push	r22
    15b4:	7f 93       	push	r23
    15b6:	8f 93       	push	r24
    15b8:	9f 93       	push	r25
    15ba:	af 93       	push	r26
    15bc:	bf 93       	push	r27
    15be:	ef 93       	push	r30
    15c0:	ff 93       	push	r31
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
	data = UDR0; 				//making copy of data from UDR2 in 'data' variable 
    15ca:	e6 ec       	ldi	r30, 0xC6	; 198
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	80 93 0e 02 	sts	0x020E, r24

	UDR0 = data; 				//echo data back to PC
    15d4:	e6 ec       	ldi	r30, 0xC6	; 198
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 91 0e 02 	lds	r24, 0x020E
    15dc:	80 83       	st	Z, r24

		if(data == 0x38) //ASCII value of 8
    15de:	80 91 0e 02 	lds	r24, 0x020E
    15e2:	88 33       	cpi	r24, 0x38	; 56
    15e4:	21 f4       	brne	.+8      	; 0x15ee <__vector_25+0x54>
		{
			PORTA=0x06;  //forward
    15e6:	e2 e2       	ldi	r30, 0x22	; 34
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	86 e0       	ldi	r24, 0x06	; 6
    15ec:	80 83       	st	Z, r24
		}

		if(data == 0x32) //ASCII value of 2
    15ee:	80 91 0e 02 	lds	r24, 0x020E
    15f2:	82 33       	cpi	r24, 0x32	; 50
    15f4:	21 f4       	brne	.+8      	; 0x15fe <__vector_25+0x64>
		{
			PORTA=0x09; //back
    15f6:	e2 e2       	ldi	r30, 0x22	; 34
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	89 e0       	ldi	r24, 0x09	; 9
    15fc:	80 83       	st	Z, r24
		}

		if(data == 0x34) //ASCII value of 4
    15fe:	80 91 0e 02 	lds	r24, 0x020E
    1602:	84 33       	cpi	r24, 0x34	; 52
    1604:	21 f4       	brne	.+8      	; 0x160e <__vector_25+0x74>
		{
			PORTA=0x05;  //left
    1606:	e2 e2       	ldi	r30, 0x22	; 34
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	85 e0       	ldi	r24, 0x05	; 5
    160c:	80 83       	st	Z, r24
		}

		if(data == 0x36) //ASCII value of 6
    160e:	80 91 0e 02 	lds	r24, 0x020E
    1612:	86 33       	cpi	r24, 0x36	; 54
    1614:	21 f4       	brne	.+8      	; 0x161e <__vector_25+0x84>
		{
			PORTA=0x0A; //right
    1616:	e2 e2       	ldi	r30, 0x22	; 34
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	8a e0       	ldi	r24, 0x0A	; 10
    161c:	80 83       	st	Z, r24
		}

		if(data == 0x35) //ASCII value of 5
    161e:	80 91 0e 02 	lds	r24, 0x020E
    1622:	85 33       	cpi	r24, 0x35	; 53
    1624:	19 f4       	brne	.+6      	; 0x162c <__vector_25+0x92>
		{
			PORTA=0x00; //stop
    1626:	e2 e2       	ldi	r30, 0x22	; 34
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	10 82       	st	Z, r1
		}

		if(data == 0x37) //ASCII value of 7
    162c:	80 91 0e 02 	lds	r24, 0x020E
    1630:	87 33       	cpi	r24, 0x37	; 55
    1632:	11 f4       	brne	.+4      	; 0x1638 <__vector_25+0x9e>
		{
			buzzer_on();
    1634:	0e 94 87 0a 	call	0x150e	; 0x150e <buzzer_on>
		}

		if(data == 0x39) //ASCII value of 9
    1638:	80 91 0e 02 	lds	r24, 0x020E
    163c:	89 33       	cpi	r24, 0x39	; 57
    163e:	11 f4       	brne	.+4      	; 0x1644 <__vector_25+0xaa>
		{
			buzzer_off();
    1640:	0e 94 9c 0a 	call	0x1538	; 0x1538 <buzzer_off>
		}

}
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	ff 91       	pop	r31
    164a:	ef 91       	pop	r30
    164c:	bf 91       	pop	r27
    164e:	af 91       	pop	r26
    1650:	9f 91       	pop	r25
    1652:	8f 91       	pop	r24
    1654:	7f 91       	pop	r23
    1656:	6f 91       	pop	r22
    1658:	5f 91       	pop	r21
    165a:	4f 91       	pop	r20
    165c:	3f 91       	pop	r19
    165e:	2f 91       	pop	r18
    1660:	0f 90       	pop	r0
    1662:	00 92 5b 00 	sts	0x005B, r0
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	0f 90       	pop	r0
    166c:	1f 90       	pop	r1
    166e:	18 95       	reti

00001670 <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    1678:	f8 94       	cli
 port_init();  //Initializes all the ports
    167a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <port_init>
 uart2_init(); //Initailize UART1 for serial communiaction
    167e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <uart2_init>
 sei();   //Enables the global interrupts
    1682:	78 94       	sei
}
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <main>:

//Main Function
int main(void)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
	init_devices();
    1692:	0e 94 38 0b 	call	0x1670	; 0x1670 <init_devices>
    1696:	ff cf       	rjmp	.-2      	; 0x1696 <main+0xc>

00001698 <__fixunssfsi>:
    1698:	ef 92       	push	r14
    169a:	ff 92       	push	r15
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	7b 01       	movw	r14, r22
    16a2:	8c 01       	movw	r16, r24
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	5f e4       	ldi	r21, 0x4F	; 79
    16ac:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__gesf2>
    16b0:	88 23       	and	r24, r24
    16b2:	8c f0       	brlt	.+34     	; 0x16d6 <__fixunssfsi+0x3e>
    16b4:	c8 01       	movw	r24, r16
    16b6:	b7 01       	movw	r22, r14
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	5f e4       	ldi	r21, 0x4F	; 79
    16c0:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__subsf3>
    16c4:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__fixsfsi>
    16c8:	9b 01       	movw	r18, r22
    16ca:	ac 01       	movw	r20, r24
    16cc:	20 50       	subi	r18, 0x00	; 0
    16ce:	30 40       	sbci	r19, 0x00	; 0
    16d0:	40 40       	sbci	r20, 0x00	; 0
    16d2:	50 48       	sbci	r21, 0x80	; 128
    16d4:	06 c0       	rjmp	.+12     	; 0x16e2 <__fixunssfsi+0x4a>
    16d6:	c8 01       	movw	r24, r16
    16d8:	b7 01       	movw	r22, r14
    16da:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__fixsfsi>
    16de:	9b 01       	movw	r18, r22
    16e0:	ac 01       	movw	r20, r24
    16e2:	b9 01       	movw	r22, r18
    16e4:	ca 01       	movw	r24, r20
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	08 95       	ret

000016f0 <_fpadd_parts>:
    16f0:	a0 e0       	ldi	r26, 0x00	; 0
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ee e7       	ldi	r30, 0x7E	; 126
    16f6:	fb e0       	ldi	r31, 0x0B	; 11
    16f8:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__prologue_saves__>
    16fc:	dc 01       	movw	r26, r24
    16fe:	2b 01       	movw	r4, r22
    1700:	fa 01       	movw	r30, r20
    1702:	9c 91       	ld	r25, X
    1704:	92 30       	cpi	r25, 0x02	; 2
    1706:	08 f4       	brcc	.+2      	; 0x170a <_fpadd_parts+0x1a>
    1708:	39 c1       	rjmp	.+626    	; 0x197c <_fpadd_parts+0x28c>
    170a:	eb 01       	movw	r28, r22
    170c:	88 81       	ld	r24, Y
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	08 f4       	brcc	.+2      	; 0x1714 <_fpadd_parts+0x24>
    1712:	33 c1       	rjmp	.+614    	; 0x197a <_fpadd_parts+0x28a>
    1714:	94 30       	cpi	r25, 0x04	; 4
    1716:	69 f4       	brne	.+26     	; 0x1732 <_fpadd_parts+0x42>
    1718:	84 30       	cpi	r24, 0x04	; 4
    171a:	09 f0       	breq	.+2      	; 0x171e <_fpadd_parts+0x2e>
    171c:	2f c1       	rjmp	.+606    	; 0x197c <_fpadd_parts+0x28c>
    171e:	11 96       	adiw	r26, 0x01	; 1
    1720:	9c 91       	ld	r25, X
    1722:	11 97       	sbiw	r26, 0x01	; 1
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	98 17       	cp	r25, r24
    1728:	09 f4       	brne	.+2      	; 0x172c <_fpadd_parts+0x3c>
    172a:	28 c1       	rjmp	.+592    	; 0x197c <_fpadd_parts+0x28c>
    172c:	a0 e0       	ldi	r26, 0x00	; 0
    172e:	b2 e0       	ldi	r27, 0x02	; 2
    1730:	25 c1       	rjmp	.+586    	; 0x197c <_fpadd_parts+0x28c>
    1732:	84 30       	cpi	r24, 0x04	; 4
    1734:	09 f4       	brne	.+2      	; 0x1738 <_fpadd_parts+0x48>
    1736:	21 c1       	rjmp	.+578    	; 0x197a <_fpadd_parts+0x28a>
    1738:	82 30       	cpi	r24, 0x02	; 2
    173a:	a9 f4       	brne	.+42     	; 0x1766 <_fpadd_parts+0x76>
    173c:	92 30       	cpi	r25, 0x02	; 2
    173e:	09 f0       	breq	.+2      	; 0x1742 <_fpadd_parts+0x52>
    1740:	1d c1       	rjmp	.+570    	; 0x197c <_fpadd_parts+0x28c>
    1742:	9a 01       	movw	r18, r20
    1744:	ad 01       	movw	r20, r26
    1746:	88 e0       	ldi	r24, 0x08	; 8
    1748:	ea 01       	movw	r28, r20
    174a:	09 90       	ld	r0, Y+
    174c:	ae 01       	movw	r20, r28
    174e:	e9 01       	movw	r28, r18
    1750:	09 92       	st	Y+, r0
    1752:	9e 01       	movw	r18, r28
    1754:	81 50       	subi	r24, 0x01	; 1
    1756:	c1 f7       	brne	.-16     	; 0x1748 <_fpadd_parts+0x58>
    1758:	e2 01       	movw	r28, r4
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	11 96       	adiw	r26, 0x01	; 1
    175e:	9c 91       	ld	r25, X
    1760:	89 23       	and	r24, r25
    1762:	81 83       	std	Z+1, r24	; 0x01
    1764:	08 c1       	rjmp	.+528    	; 0x1976 <_fpadd_parts+0x286>
    1766:	92 30       	cpi	r25, 0x02	; 2
    1768:	09 f4       	brne	.+2      	; 0x176c <_fpadd_parts+0x7c>
    176a:	07 c1       	rjmp	.+526    	; 0x197a <_fpadd_parts+0x28a>
    176c:	12 96       	adiw	r26, 0x02	; 2
    176e:	2d 90       	ld	r2, X+
    1770:	3c 90       	ld	r3, X
    1772:	13 97       	sbiw	r26, 0x03	; 3
    1774:	eb 01       	movw	r28, r22
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	9b 81       	ldd	r25, Y+3	; 0x03
    177a:	14 96       	adiw	r26, 0x04	; 4
    177c:	ad 90       	ld	r10, X+
    177e:	bd 90       	ld	r11, X+
    1780:	cd 90       	ld	r12, X+
    1782:	dc 90       	ld	r13, X
    1784:	17 97       	sbiw	r26, 0x07	; 7
    1786:	ec 80       	ldd	r14, Y+4	; 0x04
    1788:	fd 80       	ldd	r15, Y+5	; 0x05
    178a:	0e 81       	ldd	r16, Y+6	; 0x06
    178c:	1f 81       	ldd	r17, Y+7	; 0x07
    178e:	91 01       	movw	r18, r2
    1790:	28 1b       	sub	r18, r24
    1792:	39 0b       	sbc	r19, r25
    1794:	b9 01       	movw	r22, r18
    1796:	37 ff       	sbrs	r19, 7
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <_fpadd_parts+0xb2>
    179a:	66 27       	eor	r22, r22
    179c:	77 27       	eor	r23, r23
    179e:	62 1b       	sub	r22, r18
    17a0:	73 0b       	sbc	r23, r19
    17a2:	60 32       	cpi	r22, 0x20	; 32
    17a4:	71 05       	cpc	r23, r1
    17a6:	0c f0       	brlt	.+2      	; 0x17aa <_fpadd_parts+0xba>
    17a8:	61 c0       	rjmp	.+194    	; 0x186c <_fpadd_parts+0x17c>
    17aa:	12 16       	cp	r1, r18
    17ac:	13 06       	cpc	r1, r19
    17ae:	6c f5       	brge	.+90     	; 0x180a <_fpadd_parts+0x11a>
    17b0:	37 01       	movw	r6, r14
    17b2:	48 01       	movw	r8, r16
    17b4:	06 2e       	mov	r0, r22
    17b6:	04 c0       	rjmp	.+8      	; 0x17c0 <_fpadd_parts+0xd0>
    17b8:	96 94       	lsr	r9
    17ba:	87 94       	ror	r8
    17bc:	77 94       	ror	r7
    17be:	67 94       	ror	r6
    17c0:	0a 94       	dec	r0
    17c2:	d2 f7       	brpl	.-12     	; 0x17b8 <_fpadd_parts+0xc8>
    17c4:	21 e0       	ldi	r18, 0x01	; 1
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <_fpadd_parts+0xe6>
    17ce:	22 0f       	add	r18, r18
    17d0:	33 1f       	adc	r19, r19
    17d2:	44 1f       	adc	r20, r20
    17d4:	55 1f       	adc	r21, r21
    17d6:	6a 95       	dec	r22
    17d8:	d2 f7       	brpl	.-12     	; 0x17ce <_fpadd_parts+0xde>
    17da:	21 50       	subi	r18, 0x01	; 1
    17dc:	30 40       	sbci	r19, 0x00	; 0
    17de:	40 40       	sbci	r20, 0x00	; 0
    17e0:	50 40       	sbci	r21, 0x00	; 0
    17e2:	2e 21       	and	r18, r14
    17e4:	3f 21       	and	r19, r15
    17e6:	40 23       	and	r20, r16
    17e8:	51 23       	and	r21, r17
    17ea:	21 15       	cp	r18, r1
    17ec:	31 05       	cpc	r19, r1
    17ee:	41 05       	cpc	r20, r1
    17f0:	51 05       	cpc	r21, r1
    17f2:	21 f0       	breq	.+8      	; 0x17fc <_fpadd_parts+0x10c>
    17f4:	21 e0       	ldi	r18, 0x01	; 1
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	79 01       	movw	r14, r18
    17fe:	8a 01       	movw	r16, r20
    1800:	e6 28       	or	r14, r6
    1802:	f7 28       	or	r15, r7
    1804:	08 29       	or	r16, r8
    1806:	19 29       	or	r17, r9
    1808:	3c c0       	rjmp	.+120    	; 0x1882 <_fpadd_parts+0x192>
    180a:	23 2b       	or	r18, r19
    180c:	d1 f1       	breq	.+116    	; 0x1882 <_fpadd_parts+0x192>
    180e:	26 0e       	add	r2, r22
    1810:	37 1e       	adc	r3, r23
    1812:	35 01       	movw	r6, r10
    1814:	46 01       	movw	r8, r12
    1816:	06 2e       	mov	r0, r22
    1818:	04 c0       	rjmp	.+8      	; 0x1822 <_fpadd_parts+0x132>
    181a:	96 94       	lsr	r9
    181c:	87 94       	ror	r8
    181e:	77 94       	ror	r7
    1820:	67 94       	ror	r6
    1822:	0a 94       	dec	r0
    1824:	d2 f7       	brpl	.-12     	; 0x181a <_fpadd_parts+0x12a>
    1826:	21 e0       	ldi	r18, 0x01	; 1
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	04 c0       	rjmp	.+8      	; 0x1838 <_fpadd_parts+0x148>
    1830:	22 0f       	add	r18, r18
    1832:	33 1f       	adc	r19, r19
    1834:	44 1f       	adc	r20, r20
    1836:	55 1f       	adc	r21, r21
    1838:	6a 95       	dec	r22
    183a:	d2 f7       	brpl	.-12     	; 0x1830 <_fpadd_parts+0x140>
    183c:	21 50       	subi	r18, 0x01	; 1
    183e:	30 40       	sbci	r19, 0x00	; 0
    1840:	40 40       	sbci	r20, 0x00	; 0
    1842:	50 40       	sbci	r21, 0x00	; 0
    1844:	2a 21       	and	r18, r10
    1846:	3b 21       	and	r19, r11
    1848:	4c 21       	and	r20, r12
    184a:	5d 21       	and	r21, r13
    184c:	21 15       	cp	r18, r1
    184e:	31 05       	cpc	r19, r1
    1850:	41 05       	cpc	r20, r1
    1852:	51 05       	cpc	r21, r1
    1854:	21 f0       	breq	.+8      	; 0x185e <_fpadd_parts+0x16e>
    1856:	21 e0       	ldi	r18, 0x01	; 1
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	59 01       	movw	r10, r18
    1860:	6a 01       	movw	r12, r20
    1862:	a6 28       	or	r10, r6
    1864:	b7 28       	or	r11, r7
    1866:	c8 28       	or	r12, r8
    1868:	d9 28       	or	r13, r9
    186a:	0b c0       	rjmp	.+22     	; 0x1882 <_fpadd_parts+0x192>
    186c:	82 15       	cp	r24, r2
    186e:	93 05       	cpc	r25, r3
    1870:	2c f0       	brlt	.+10     	; 0x187c <_fpadd_parts+0x18c>
    1872:	1c 01       	movw	r2, r24
    1874:	aa 24       	eor	r10, r10
    1876:	bb 24       	eor	r11, r11
    1878:	65 01       	movw	r12, r10
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <_fpadd_parts+0x192>
    187c:	ee 24       	eor	r14, r14
    187e:	ff 24       	eor	r15, r15
    1880:	87 01       	movw	r16, r14
    1882:	11 96       	adiw	r26, 0x01	; 1
    1884:	9c 91       	ld	r25, X
    1886:	d2 01       	movw	r26, r4
    1888:	11 96       	adiw	r26, 0x01	; 1
    188a:	8c 91       	ld	r24, X
    188c:	98 17       	cp	r25, r24
    188e:	09 f4       	brne	.+2      	; 0x1892 <_fpadd_parts+0x1a2>
    1890:	45 c0       	rjmp	.+138    	; 0x191c <_fpadd_parts+0x22c>
    1892:	99 23       	and	r25, r25
    1894:	39 f0       	breq	.+14     	; 0x18a4 <_fpadd_parts+0x1b4>
    1896:	a8 01       	movw	r20, r16
    1898:	97 01       	movw	r18, r14
    189a:	2a 19       	sub	r18, r10
    189c:	3b 09       	sbc	r19, r11
    189e:	4c 09       	sbc	r20, r12
    18a0:	5d 09       	sbc	r21, r13
    18a2:	06 c0       	rjmp	.+12     	; 0x18b0 <_fpadd_parts+0x1c0>
    18a4:	a6 01       	movw	r20, r12
    18a6:	95 01       	movw	r18, r10
    18a8:	2e 19       	sub	r18, r14
    18aa:	3f 09       	sbc	r19, r15
    18ac:	40 0b       	sbc	r20, r16
    18ae:	51 0b       	sbc	r21, r17
    18b0:	57 fd       	sbrc	r21, 7
    18b2:	08 c0       	rjmp	.+16     	; 0x18c4 <_fpadd_parts+0x1d4>
    18b4:	11 82       	std	Z+1, r1	; 0x01
    18b6:	33 82       	std	Z+3, r3	; 0x03
    18b8:	22 82       	std	Z+2, r2	; 0x02
    18ba:	24 83       	std	Z+4, r18	; 0x04
    18bc:	35 83       	std	Z+5, r19	; 0x05
    18be:	46 83       	std	Z+6, r20	; 0x06
    18c0:	57 83       	std	Z+7, r21	; 0x07
    18c2:	1d c0       	rjmp	.+58     	; 0x18fe <_fpadd_parts+0x20e>
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	81 83       	std	Z+1, r24	; 0x01
    18c8:	33 82       	std	Z+3, r3	; 0x03
    18ca:	22 82       	std	Z+2, r2	; 0x02
    18cc:	88 27       	eor	r24, r24
    18ce:	99 27       	eor	r25, r25
    18d0:	dc 01       	movw	r26, r24
    18d2:	82 1b       	sub	r24, r18
    18d4:	93 0b       	sbc	r25, r19
    18d6:	a4 0b       	sbc	r26, r20
    18d8:	b5 0b       	sbc	r27, r21
    18da:	84 83       	std	Z+4, r24	; 0x04
    18dc:	95 83       	std	Z+5, r25	; 0x05
    18de:	a6 83       	std	Z+6, r26	; 0x06
    18e0:	b7 83       	std	Z+7, r27	; 0x07
    18e2:	0d c0       	rjmp	.+26     	; 0x18fe <_fpadd_parts+0x20e>
    18e4:	22 0f       	add	r18, r18
    18e6:	33 1f       	adc	r19, r19
    18e8:	44 1f       	adc	r20, r20
    18ea:	55 1f       	adc	r21, r21
    18ec:	24 83       	std	Z+4, r18	; 0x04
    18ee:	35 83       	std	Z+5, r19	; 0x05
    18f0:	46 83       	std	Z+6, r20	; 0x06
    18f2:	57 83       	std	Z+7, r21	; 0x07
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	93 83       	std	Z+3, r25	; 0x03
    18fc:	82 83       	std	Z+2, r24	; 0x02
    18fe:	24 81       	ldd	r18, Z+4	; 0x04
    1900:	35 81       	ldd	r19, Z+5	; 0x05
    1902:	46 81       	ldd	r20, Z+6	; 0x06
    1904:	57 81       	ldd	r21, Z+7	; 0x07
    1906:	da 01       	movw	r26, r20
    1908:	c9 01       	movw	r24, r18
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	a1 09       	sbc	r26, r1
    190e:	b1 09       	sbc	r27, r1
    1910:	8f 5f       	subi	r24, 0xFF	; 255
    1912:	9f 4f       	sbci	r25, 0xFF	; 255
    1914:	af 4f       	sbci	r26, 0xFF	; 255
    1916:	bf 43       	sbci	r27, 0x3F	; 63
    1918:	28 f3       	brcs	.-54     	; 0x18e4 <_fpadd_parts+0x1f4>
    191a:	0b c0       	rjmp	.+22     	; 0x1932 <_fpadd_parts+0x242>
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	33 82       	std	Z+3, r3	; 0x03
    1920:	22 82       	std	Z+2, r2	; 0x02
    1922:	ea 0c       	add	r14, r10
    1924:	fb 1c       	adc	r15, r11
    1926:	0c 1d       	adc	r16, r12
    1928:	1d 1d       	adc	r17, r13
    192a:	e4 82       	std	Z+4, r14	; 0x04
    192c:	f5 82       	std	Z+5, r15	; 0x05
    192e:	06 83       	std	Z+6, r16	; 0x06
    1930:	17 83       	std	Z+7, r17	; 0x07
    1932:	83 e0       	ldi	r24, 0x03	; 3
    1934:	80 83       	st	Z, r24
    1936:	24 81       	ldd	r18, Z+4	; 0x04
    1938:	35 81       	ldd	r19, Z+5	; 0x05
    193a:	46 81       	ldd	r20, Z+6	; 0x06
    193c:	57 81       	ldd	r21, Z+7	; 0x07
    193e:	57 ff       	sbrs	r21, 7
    1940:	1a c0       	rjmp	.+52     	; 0x1976 <_fpadd_parts+0x286>
    1942:	c9 01       	movw	r24, r18
    1944:	aa 27       	eor	r26, r26
    1946:	97 fd       	sbrc	r25, 7
    1948:	a0 95       	com	r26
    194a:	ba 2f       	mov	r27, r26
    194c:	81 70       	andi	r24, 0x01	; 1
    194e:	90 70       	andi	r25, 0x00	; 0
    1950:	a0 70       	andi	r26, 0x00	; 0
    1952:	b0 70       	andi	r27, 0x00	; 0
    1954:	56 95       	lsr	r21
    1956:	47 95       	ror	r20
    1958:	37 95       	ror	r19
    195a:	27 95       	ror	r18
    195c:	82 2b       	or	r24, r18
    195e:	93 2b       	or	r25, r19
    1960:	a4 2b       	or	r26, r20
    1962:	b5 2b       	or	r27, r21
    1964:	84 83       	std	Z+4, r24	; 0x04
    1966:	95 83       	std	Z+5, r25	; 0x05
    1968:	a6 83       	std	Z+6, r26	; 0x06
    196a:	b7 83       	std	Z+7, r27	; 0x07
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	01 96       	adiw	r24, 0x01	; 1
    1972:	93 83       	std	Z+3, r25	; 0x03
    1974:	82 83       	std	Z+2, r24	; 0x02
    1976:	df 01       	movw	r26, r30
    1978:	01 c0       	rjmp	.+2      	; 0x197c <_fpadd_parts+0x28c>
    197a:	d2 01       	movw	r26, r4
    197c:	cd 01       	movw	r24, r26
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	e2 e1       	ldi	r30, 0x12	; 18
    1984:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__epilogue_restores__>

00001988 <__subsf3>:
    1988:	a0 e2       	ldi	r26, 0x20	; 32
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ea ec       	ldi	r30, 0xCA	; 202
    198e:	fc e0       	ldi	r31, 0x0C	; 12
    1990:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__prologue_saves__+0x18>
    1994:	69 83       	std	Y+1, r22	; 0x01
    1996:	7a 83       	std	Y+2, r23	; 0x02
    1998:	8b 83       	std	Y+3, r24	; 0x03
    199a:	9c 83       	std	Y+4, r25	; 0x04
    199c:	2d 83       	std	Y+5, r18	; 0x05
    199e:	3e 83       	std	Y+6, r19	; 0x06
    19a0:	4f 83       	std	Y+7, r20	; 0x07
    19a2:	58 87       	std	Y+8, r21	; 0x08
    19a4:	e9 e0       	ldi	r30, 0x09	; 9
    19a6:	ee 2e       	mov	r14, r30
    19a8:	f1 2c       	mov	r15, r1
    19aa:	ec 0e       	add	r14, r28
    19ac:	fd 1e       	adc	r15, r29
    19ae:	ce 01       	movw	r24, r28
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	b7 01       	movw	r22, r14
    19b4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    19b8:	8e 01       	movw	r16, r28
    19ba:	0f 5e       	subi	r16, 0xEF	; 239
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	ce 01       	movw	r24, r28
    19c0:	05 96       	adiw	r24, 0x05	; 5
    19c2:	b8 01       	movw	r22, r16
    19c4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    19c8:	8a 89       	ldd	r24, Y+18	; 0x12
    19ca:	91 e0       	ldi	r25, 0x01	; 1
    19cc:	89 27       	eor	r24, r25
    19ce:	8a 8b       	std	Y+18, r24	; 0x12
    19d0:	c7 01       	movw	r24, r14
    19d2:	b8 01       	movw	r22, r16
    19d4:	ae 01       	movw	r20, r28
    19d6:	47 5e       	subi	r20, 0xE7	; 231
    19d8:	5f 4f       	sbci	r21, 0xFF	; 255
    19da:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_fpadd_parts>
    19de:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__pack_f>
    19e2:	a0 96       	adiw	r28, 0x20	; 32
    19e4:	e6 e0       	ldi	r30, 0x06	; 6
    19e6:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__epilogue_restores__+0x18>

000019ea <__addsf3>:
    19ea:	a0 e2       	ldi	r26, 0x20	; 32
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	eb ef       	ldi	r30, 0xFB	; 251
    19f0:	fc e0       	ldi	r31, 0x0C	; 12
    19f2:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__prologue_saves__+0x18>
    19f6:	69 83       	std	Y+1, r22	; 0x01
    19f8:	7a 83       	std	Y+2, r23	; 0x02
    19fa:	8b 83       	std	Y+3, r24	; 0x03
    19fc:	9c 83       	std	Y+4, r25	; 0x04
    19fe:	2d 83       	std	Y+5, r18	; 0x05
    1a00:	3e 83       	std	Y+6, r19	; 0x06
    1a02:	4f 83       	std	Y+7, r20	; 0x07
    1a04:	58 87       	std	Y+8, r21	; 0x08
    1a06:	f9 e0       	ldi	r31, 0x09	; 9
    1a08:	ef 2e       	mov	r14, r31
    1a0a:	f1 2c       	mov	r15, r1
    1a0c:	ec 0e       	add	r14, r28
    1a0e:	fd 1e       	adc	r15, r29
    1a10:	ce 01       	movw	r24, r28
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	b7 01       	movw	r22, r14
    1a16:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    1a1a:	8e 01       	movw	r16, r28
    1a1c:	0f 5e       	subi	r16, 0xEF	; 239
    1a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a20:	ce 01       	movw	r24, r28
    1a22:	05 96       	adiw	r24, 0x05	; 5
    1a24:	b8 01       	movw	r22, r16
    1a26:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    1a2a:	c7 01       	movw	r24, r14
    1a2c:	b8 01       	movw	r22, r16
    1a2e:	ae 01       	movw	r20, r28
    1a30:	47 5e       	subi	r20, 0xE7	; 231
    1a32:	5f 4f       	sbci	r21, 0xFF	; 255
    1a34:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_fpadd_parts>
    1a38:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__pack_f>
    1a3c:	a0 96       	adiw	r28, 0x20	; 32
    1a3e:	e6 e0       	ldi	r30, 0x06	; 6
    1a40:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__epilogue_restores__+0x18>

00001a44 <__mulsf3>:
    1a44:	a0 e2       	ldi	r26, 0x20	; 32
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e8 e2       	ldi	r30, 0x28	; 40
    1a4a:	fd e0       	ldi	r31, 0x0D	; 13
    1a4c:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__prologue_saves__>
    1a50:	69 83       	std	Y+1, r22	; 0x01
    1a52:	7a 83       	std	Y+2, r23	; 0x02
    1a54:	8b 83       	std	Y+3, r24	; 0x03
    1a56:	9c 83       	std	Y+4, r25	; 0x04
    1a58:	2d 83       	std	Y+5, r18	; 0x05
    1a5a:	3e 83       	std	Y+6, r19	; 0x06
    1a5c:	4f 83       	std	Y+7, r20	; 0x07
    1a5e:	58 87       	std	Y+8, r21	; 0x08
    1a60:	ce 01       	movw	r24, r28
    1a62:	01 96       	adiw	r24, 0x01	; 1
    1a64:	be 01       	movw	r22, r28
    1a66:	67 5f       	subi	r22, 0xF7	; 247
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    1a6e:	ce 01       	movw	r24, r28
    1a70:	05 96       	adiw	r24, 0x05	; 5
    1a72:	be 01       	movw	r22, r28
    1a74:	6f 5e       	subi	r22, 0xEF	; 239
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    1a7c:	99 85       	ldd	r25, Y+9	; 0x09
    1a7e:	92 30       	cpi	r25, 0x02	; 2
    1a80:	88 f0       	brcs	.+34     	; 0x1aa4 <__mulsf3+0x60>
    1a82:	89 89       	ldd	r24, Y+17	; 0x11
    1a84:	82 30       	cpi	r24, 0x02	; 2
    1a86:	c8 f0       	brcs	.+50     	; 0x1aba <__mulsf3+0x76>
    1a88:	94 30       	cpi	r25, 0x04	; 4
    1a8a:	19 f4       	brne	.+6      	; 0x1a92 <__mulsf3+0x4e>
    1a8c:	82 30       	cpi	r24, 0x02	; 2
    1a8e:	51 f4       	brne	.+20     	; 0x1aa4 <__mulsf3+0x60>
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <__mulsf3+0x56>
    1a92:	84 30       	cpi	r24, 0x04	; 4
    1a94:	29 f4       	brne	.+10     	; 0x1aa0 <__mulsf3+0x5c>
    1a96:	92 30       	cpi	r25, 0x02	; 2
    1a98:	81 f4       	brne	.+32     	; 0x1aba <__mulsf3+0x76>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	92 e0       	ldi	r25, 0x02	; 2
    1a9e:	c6 c0       	rjmp	.+396    	; 0x1c2c <__mulsf3+0x1e8>
    1aa0:	92 30       	cpi	r25, 0x02	; 2
    1aa2:	49 f4       	brne	.+18     	; 0x1ab6 <__mulsf3+0x72>
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa8:	8a 89       	ldd	r24, Y+18	; 0x12
    1aaa:	98 13       	cpse	r25, r24
    1aac:	21 e0       	ldi	r18, 0x01	; 1
    1aae:	2a 87       	std	Y+10, r18	; 0x0a
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	09 96       	adiw	r24, 0x09	; 9
    1ab4:	bb c0       	rjmp	.+374    	; 0x1c2c <__mulsf3+0x1e8>
    1ab6:	82 30       	cpi	r24, 0x02	; 2
    1ab8:	49 f4       	brne	.+18     	; 0x1acc <__mulsf3+0x88>
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abe:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac0:	98 13       	cpse	r25, r24
    1ac2:	21 e0       	ldi	r18, 0x01	; 1
    1ac4:	2a 8b       	std	Y+18, r18	; 0x12
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	41 96       	adiw	r24, 0x11	; 17
    1aca:	b0 c0       	rjmp	.+352    	; 0x1c2c <__mulsf3+0x1e8>
    1acc:	2d 84       	ldd	r2, Y+13	; 0x0d
    1ace:	3e 84       	ldd	r3, Y+14	; 0x0e
    1ad0:	4f 84       	ldd	r4, Y+15	; 0x0f
    1ad2:	58 88       	ldd	r5, Y+16	; 0x10
    1ad4:	6d 88       	ldd	r6, Y+21	; 0x15
    1ad6:	7e 88       	ldd	r7, Y+22	; 0x16
    1ad8:	8f 88       	ldd	r8, Y+23	; 0x17
    1ada:	98 8c       	ldd	r9, Y+24	; 0x18
    1adc:	ee 24       	eor	r14, r14
    1ade:	ff 24       	eor	r15, r15
    1ae0:	87 01       	movw	r16, r14
    1ae2:	aa 24       	eor	r10, r10
    1ae4:	bb 24       	eor	r11, r11
    1ae6:	65 01       	movw	r12, r10
    1ae8:	40 e0       	ldi	r20, 0x00	; 0
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	e0 e0       	ldi	r30, 0x00	; 0
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	c1 01       	movw	r24, r2
    1af6:	81 70       	andi	r24, 0x01	; 1
    1af8:	90 70       	andi	r25, 0x00	; 0
    1afa:	89 2b       	or	r24, r25
    1afc:	e9 f0       	breq	.+58     	; 0x1b38 <__mulsf3+0xf4>
    1afe:	e6 0c       	add	r14, r6
    1b00:	f7 1c       	adc	r15, r7
    1b02:	08 1d       	adc	r16, r8
    1b04:	19 1d       	adc	r17, r9
    1b06:	9a 01       	movw	r18, r20
    1b08:	ab 01       	movw	r20, r22
    1b0a:	2a 0d       	add	r18, r10
    1b0c:	3b 1d       	adc	r19, r11
    1b0e:	4c 1d       	adc	r20, r12
    1b10:	5d 1d       	adc	r21, r13
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a0 e0       	ldi	r26, 0x00	; 0
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e6 14       	cp	r14, r6
    1b1c:	f7 04       	cpc	r15, r7
    1b1e:	08 05       	cpc	r16, r8
    1b20:	19 05       	cpc	r17, r9
    1b22:	20 f4       	brcc	.+8      	; 0x1b2c <__mulsf3+0xe8>
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a0 e0       	ldi	r26, 0x00	; 0
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	ba 01       	movw	r22, r20
    1b2e:	a9 01       	movw	r20, r18
    1b30:	48 0f       	add	r20, r24
    1b32:	59 1f       	adc	r21, r25
    1b34:	6a 1f       	adc	r22, r26
    1b36:	7b 1f       	adc	r23, r27
    1b38:	aa 0c       	add	r10, r10
    1b3a:	bb 1c       	adc	r11, r11
    1b3c:	cc 1c       	adc	r12, r12
    1b3e:	dd 1c       	adc	r13, r13
    1b40:	97 fe       	sbrs	r9, 7
    1b42:	08 c0       	rjmp	.+16     	; 0x1b54 <__mulsf3+0x110>
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e0       	ldi	r26, 0x00	; 0
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	a8 2a       	or	r10, r24
    1b4e:	b9 2a       	or	r11, r25
    1b50:	ca 2a       	or	r12, r26
    1b52:	db 2a       	or	r13, r27
    1b54:	31 96       	adiw	r30, 0x01	; 1
    1b56:	e0 32       	cpi	r30, 0x20	; 32
    1b58:	f1 05       	cpc	r31, r1
    1b5a:	49 f0       	breq	.+18     	; 0x1b6e <__mulsf3+0x12a>
    1b5c:	66 0c       	add	r6, r6
    1b5e:	77 1c       	adc	r7, r7
    1b60:	88 1c       	adc	r8, r8
    1b62:	99 1c       	adc	r9, r9
    1b64:	56 94       	lsr	r5
    1b66:	47 94       	ror	r4
    1b68:	37 94       	ror	r3
    1b6a:	27 94       	ror	r2
    1b6c:	c3 cf       	rjmp	.-122    	; 0x1af4 <__mulsf3+0xb0>
    1b6e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b70:	ea 89       	ldd	r30, Y+18	; 0x12
    1b72:	2b 89       	ldd	r18, Y+19	; 0x13
    1b74:	3c 89       	ldd	r19, Y+20	; 0x14
    1b76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b78:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b7a:	28 0f       	add	r18, r24
    1b7c:	39 1f       	adc	r19, r25
    1b7e:	2e 5f       	subi	r18, 0xFE	; 254
    1b80:	3f 4f       	sbci	r19, 0xFF	; 255
    1b82:	17 c0       	rjmp	.+46     	; 0x1bb2 <__mulsf3+0x16e>
    1b84:	ca 01       	movw	r24, r20
    1b86:	81 70       	andi	r24, 0x01	; 1
    1b88:	90 70       	andi	r25, 0x00	; 0
    1b8a:	89 2b       	or	r24, r25
    1b8c:	61 f0       	breq	.+24     	; 0x1ba6 <__mulsf3+0x162>
    1b8e:	16 95       	lsr	r17
    1b90:	07 95       	ror	r16
    1b92:	f7 94       	ror	r15
    1b94:	e7 94       	ror	r14
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a0 e0       	ldi	r26, 0x00	; 0
    1b9c:	b0 e8       	ldi	r27, 0x80	; 128
    1b9e:	e8 2a       	or	r14, r24
    1ba0:	f9 2a       	or	r15, r25
    1ba2:	0a 2b       	or	r16, r26
    1ba4:	1b 2b       	or	r17, r27
    1ba6:	76 95       	lsr	r23
    1ba8:	67 95       	ror	r22
    1baa:	57 95       	ror	r21
    1bac:	47 95       	ror	r20
    1bae:	2f 5f       	subi	r18, 0xFF	; 255
    1bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb2:	77 fd       	sbrc	r23, 7
    1bb4:	e7 cf       	rjmp	.-50     	; 0x1b84 <__mulsf3+0x140>
    1bb6:	0c c0       	rjmp	.+24     	; 0x1bd0 <__mulsf3+0x18c>
    1bb8:	44 0f       	add	r20, r20
    1bba:	55 1f       	adc	r21, r21
    1bbc:	66 1f       	adc	r22, r22
    1bbe:	77 1f       	adc	r23, r23
    1bc0:	17 fd       	sbrc	r17, 7
    1bc2:	41 60       	ori	r20, 0x01	; 1
    1bc4:	ee 0c       	add	r14, r14
    1bc6:	ff 1c       	adc	r15, r15
    1bc8:	00 1f       	adc	r16, r16
    1bca:	11 1f       	adc	r17, r17
    1bcc:	21 50       	subi	r18, 0x01	; 1
    1bce:	30 40       	sbci	r19, 0x00	; 0
    1bd0:	40 30       	cpi	r20, 0x00	; 0
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	59 07       	cpc	r21, r25
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	69 07       	cpc	r22, r25
    1bda:	90 e4       	ldi	r25, 0x40	; 64
    1bdc:	79 07       	cpc	r23, r25
    1bde:	60 f3       	brcs	.-40     	; 0x1bb8 <__mulsf3+0x174>
    1be0:	2b 8f       	std	Y+27, r18	; 0x1b
    1be2:	3c 8f       	std	Y+28, r19	; 0x1c
    1be4:	db 01       	movw	r26, r22
    1be6:	ca 01       	movw	r24, r20
    1be8:	8f 77       	andi	r24, 0x7F	; 127
    1bea:	90 70       	andi	r25, 0x00	; 0
    1bec:	a0 70       	andi	r26, 0x00	; 0
    1bee:	b0 70       	andi	r27, 0x00	; 0
    1bf0:	80 34       	cpi	r24, 0x40	; 64
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	a1 05       	cpc	r26, r1
    1bf6:	b1 05       	cpc	r27, r1
    1bf8:	61 f4       	brne	.+24     	; 0x1c12 <__mulsf3+0x1ce>
    1bfa:	47 fd       	sbrc	r20, 7
    1bfc:	0a c0       	rjmp	.+20     	; 0x1c12 <__mulsf3+0x1ce>
    1bfe:	e1 14       	cp	r14, r1
    1c00:	f1 04       	cpc	r15, r1
    1c02:	01 05       	cpc	r16, r1
    1c04:	11 05       	cpc	r17, r1
    1c06:	29 f0       	breq	.+10     	; 0x1c12 <__mulsf3+0x1ce>
    1c08:	40 5c       	subi	r20, 0xC0	; 192
    1c0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0c:	6f 4f       	sbci	r22, 0xFF	; 255
    1c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c10:	40 78       	andi	r20, 0x80	; 128
    1c12:	1a 8e       	std	Y+26, r1	; 0x1a
    1c14:	fe 17       	cp	r31, r30
    1c16:	11 f0       	breq	.+4      	; 0x1c1c <__mulsf3+0x1d8>
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	8a 8f       	std	Y+26, r24	; 0x1a
    1c1c:	4d 8f       	std	Y+29, r20	; 0x1d
    1c1e:	5e 8f       	std	Y+30, r21	; 0x1e
    1c20:	6f 8f       	std	Y+31, r22	; 0x1f
    1c22:	78 a3       	std	Y+32, r23	; 0x20
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	89 8f       	std	Y+25, r24	; 0x19
    1c28:	ce 01       	movw	r24, r28
    1c2a:	49 96       	adiw	r24, 0x19	; 25
    1c2c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__pack_f>
    1c30:	a0 96       	adiw	r28, 0x20	; 32
    1c32:	e2 e1       	ldi	r30, 0x12	; 18
    1c34:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__epilogue_restores__>

00001c38 <__gtsf2>:
    1c38:	a8 e1       	ldi	r26, 0x18	; 24
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e2 e2       	ldi	r30, 0x22	; 34
    1c3e:	fe e0       	ldi	r31, 0x0E	; 14
    1c40:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__prologue_saves__+0x18>
    1c44:	69 83       	std	Y+1, r22	; 0x01
    1c46:	7a 83       	std	Y+2, r23	; 0x02
    1c48:	8b 83       	std	Y+3, r24	; 0x03
    1c4a:	9c 83       	std	Y+4, r25	; 0x04
    1c4c:	2d 83       	std	Y+5, r18	; 0x05
    1c4e:	3e 83       	std	Y+6, r19	; 0x06
    1c50:	4f 83       	std	Y+7, r20	; 0x07
    1c52:	58 87       	std	Y+8, r21	; 0x08
    1c54:	89 e0       	ldi	r24, 0x09	; 9
    1c56:	e8 2e       	mov	r14, r24
    1c58:	f1 2c       	mov	r15, r1
    1c5a:	ec 0e       	add	r14, r28
    1c5c:	fd 1e       	adc	r15, r29
    1c5e:	ce 01       	movw	r24, r28
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	b7 01       	movw	r22, r14
    1c64:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    1c68:	8e 01       	movw	r16, r28
    1c6a:	0f 5e       	subi	r16, 0xEF	; 239
    1c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6e:	ce 01       	movw	r24, r28
    1c70:	05 96       	adiw	r24, 0x05	; 5
    1c72:	b8 01       	movw	r22, r16
    1c74:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    1c78:	89 85       	ldd	r24, Y+9	; 0x09
    1c7a:	82 30       	cpi	r24, 0x02	; 2
    1c7c:	40 f0       	brcs	.+16     	; 0x1c8e <__gtsf2+0x56>
    1c7e:	89 89       	ldd	r24, Y+17	; 0x11
    1c80:	82 30       	cpi	r24, 0x02	; 2
    1c82:	28 f0       	brcs	.+10     	; 0x1c8e <__gtsf2+0x56>
    1c84:	c7 01       	movw	r24, r14
    1c86:	b8 01       	movw	r22, r16
    1c88:	0e 94 4d 10 	call	0x209a	; 0x209a <__fpcmp_parts_f>
    1c8c:	01 c0       	rjmp	.+2      	; 0x1c90 <__gtsf2+0x58>
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	68 96       	adiw	r28, 0x18	; 24
    1c92:	e6 e0       	ldi	r30, 0x06	; 6
    1c94:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__epilogue_restores__+0x18>

00001c98 <__gesf2>:
    1c98:	a8 e1       	ldi	r26, 0x18	; 24
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e2 e5       	ldi	r30, 0x52	; 82
    1c9e:	fe e0       	ldi	r31, 0x0E	; 14
    1ca0:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__prologue_saves__+0x18>
    1ca4:	69 83       	std	Y+1, r22	; 0x01
    1ca6:	7a 83       	std	Y+2, r23	; 0x02
    1ca8:	8b 83       	std	Y+3, r24	; 0x03
    1caa:	9c 83       	std	Y+4, r25	; 0x04
    1cac:	2d 83       	std	Y+5, r18	; 0x05
    1cae:	3e 83       	std	Y+6, r19	; 0x06
    1cb0:	4f 83       	std	Y+7, r20	; 0x07
    1cb2:	58 87       	std	Y+8, r21	; 0x08
    1cb4:	89 e0       	ldi	r24, 0x09	; 9
    1cb6:	e8 2e       	mov	r14, r24
    1cb8:	f1 2c       	mov	r15, r1
    1cba:	ec 0e       	add	r14, r28
    1cbc:	fd 1e       	adc	r15, r29
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	01 96       	adiw	r24, 0x01	; 1
    1cc2:	b7 01       	movw	r22, r14
    1cc4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    1cc8:	8e 01       	movw	r16, r28
    1cca:	0f 5e       	subi	r16, 0xEF	; 239
    1ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cce:	ce 01       	movw	r24, r28
    1cd0:	05 96       	adiw	r24, 0x05	; 5
    1cd2:	b8 01       	movw	r22, r16
    1cd4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	82 30       	cpi	r24, 0x02	; 2
    1cdc:	40 f0       	brcs	.+16     	; 0x1cee <__gesf2+0x56>
    1cde:	89 89       	ldd	r24, Y+17	; 0x11
    1ce0:	82 30       	cpi	r24, 0x02	; 2
    1ce2:	28 f0       	brcs	.+10     	; 0x1cee <__gesf2+0x56>
    1ce4:	c7 01       	movw	r24, r14
    1ce6:	b8 01       	movw	r22, r16
    1ce8:	0e 94 4d 10 	call	0x209a	; 0x209a <__fpcmp_parts_f>
    1cec:	01 c0       	rjmp	.+2      	; 0x1cf0 <__gesf2+0x58>
    1cee:	8f ef       	ldi	r24, 0xFF	; 255
    1cf0:	68 96       	adiw	r28, 0x18	; 24
    1cf2:	e6 e0       	ldi	r30, 0x06	; 6
    1cf4:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__epilogue_restores__+0x18>

00001cf8 <__ltsf2>:
    1cf8:	a8 e1       	ldi	r26, 0x18	; 24
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e2 e8       	ldi	r30, 0x82	; 130
    1cfe:	fe e0       	ldi	r31, 0x0E	; 14
    1d00:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__prologue_saves__+0x18>
    1d04:	69 83       	std	Y+1, r22	; 0x01
    1d06:	7a 83       	std	Y+2, r23	; 0x02
    1d08:	8b 83       	std	Y+3, r24	; 0x03
    1d0a:	9c 83       	std	Y+4, r25	; 0x04
    1d0c:	2d 83       	std	Y+5, r18	; 0x05
    1d0e:	3e 83       	std	Y+6, r19	; 0x06
    1d10:	4f 83       	std	Y+7, r20	; 0x07
    1d12:	58 87       	std	Y+8, r21	; 0x08
    1d14:	89 e0       	ldi	r24, 0x09	; 9
    1d16:	e8 2e       	mov	r14, r24
    1d18:	f1 2c       	mov	r15, r1
    1d1a:	ec 0e       	add	r14, r28
    1d1c:	fd 1e       	adc	r15, r29
    1d1e:	ce 01       	movw	r24, r28
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	b7 01       	movw	r22, r14
    1d24:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    1d28:	8e 01       	movw	r16, r28
    1d2a:	0f 5e       	subi	r16, 0xEF	; 239
    1d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2e:	ce 01       	movw	r24, r28
    1d30:	05 96       	adiw	r24, 0x05	; 5
    1d32:	b8 01       	movw	r22, r16
    1d34:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	82 30       	cpi	r24, 0x02	; 2
    1d3c:	40 f0       	brcs	.+16     	; 0x1d4e <__ltsf2+0x56>
    1d3e:	89 89       	ldd	r24, Y+17	; 0x11
    1d40:	82 30       	cpi	r24, 0x02	; 2
    1d42:	28 f0       	brcs	.+10     	; 0x1d4e <__ltsf2+0x56>
    1d44:	c7 01       	movw	r24, r14
    1d46:	b8 01       	movw	r22, r16
    1d48:	0e 94 4d 10 	call	0x209a	; 0x209a <__fpcmp_parts_f>
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <__ltsf2+0x58>
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	68 96       	adiw	r28, 0x18	; 24
    1d52:	e6 e0       	ldi	r30, 0x06	; 6
    1d54:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__epilogue_restores__+0x18>

00001d58 <__fixsfsi>:
    1d58:	ac e0       	ldi	r26, 0x0C	; 12
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e2 eb       	ldi	r30, 0xB2	; 178
    1d5e:	fe e0       	ldi	r31, 0x0E	; 14
    1d60:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x20>
    1d64:	69 83       	std	Y+1, r22	; 0x01
    1d66:	7a 83       	std	Y+2, r23	; 0x02
    1d68:	8b 83       	std	Y+3, r24	; 0x03
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	be 01       	movw	r22, r28
    1d72:	6b 5f       	subi	r22, 0xFB	; 251
    1d74:	7f 4f       	sbci	r23, 0xFF	; 255
    1d76:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__unpack_f>
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	82 30       	cpi	r24, 0x02	; 2
    1d7e:	61 f1       	breq	.+88     	; 0x1dd8 <__fixsfsi+0x80>
    1d80:	82 30       	cpi	r24, 0x02	; 2
    1d82:	50 f1       	brcs	.+84     	; 0x1dd8 <__fixsfsi+0x80>
    1d84:	84 30       	cpi	r24, 0x04	; 4
    1d86:	21 f4       	brne	.+8      	; 0x1d90 <__fixsfsi+0x38>
    1d88:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8a:	88 23       	and	r24, r24
    1d8c:	51 f1       	breq	.+84     	; 0x1de2 <__fixsfsi+0x8a>
    1d8e:	2e c0       	rjmp	.+92     	; 0x1dec <__fixsfsi+0x94>
    1d90:	2f 81       	ldd	r18, Y+7	; 0x07
    1d92:	38 85       	ldd	r19, Y+8	; 0x08
    1d94:	37 fd       	sbrc	r19, 7
    1d96:	20 c0       	rjmp	.+64     	; 0x1dd8 <__fixsfsi+0x80>
    1d98:	6e 81       	ldd	r22, Y+6	; 0x06
    1d9a:	2f 31       	cpi	r18, 0x1F	; 31
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	1c f0       	brlt	.+6      	; 0x1da6 <__fixsfsi+0x4e>
    1da0:	66 23       	and	r22, r22
    1da2:	f9 f0       	breq	.+62     	; 0x1de2 <__fixsfsi+0x8a>
    1da4:	23 c0       	rjmp	.+70     	; 0x1dec <__fixsfsi+0x94>
    1da6:	8e e1       	ldi	r24, 0x1E	; 30
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	82 1b       	sub	r24, r18
    1dac:	93 0b       	sbc	r25, r19
    1dae:	29 85       	ldd	r18, Y+9	; 0x09
    1db0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1db2:	4b 85       	ldd	r20, Y+11	; 0x0b
    1db4:	5c 85       	ldd	r21, Y+12	; 0x0c
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <__fixsfsi+0x68>
    1db8:	56 95       	lsr	r21
    1dba:	47 95       	ror	r20
    1dbc:	37 95       	ror	r19
    1dbe:	27 95       	ror	r18
    1dc0:	8a 95       	dec	r24
    1dc2:	d2 f7       	brpl	.-12     	; 0x1db8 <__fixsfsi+0x60>
    1dc4:	66 23       	and	r22, r22
    1dc6:	b1 f0       	breq	.+44     	; 0x1df4 <__fixsfsi+0x9c>
    1dc8:	50 95       	com	r21
    1dca:	40 95       	com	r20
    1dcc:	30 95       	com	r19
    1dce:	21 95       	neg	r18
    1dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd2:	4f 4f       	sbci	r20, 0xFF	; 255
    1dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd6:	0e c0       	rjmp	.+28     	; 0x1df4 <__fixsfsi+0x9c>
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	09 c0       	rjmp	.+18     	; 0x1df4 <__fixsfsi+0x9c>
    1de2:	2f ef       	ldi	r18, 0xFF	; 255
    1de4:	3f ef       	ldi	r19, 0xFF	; 255
    1de6:	4f ef       	ldi	r20, 0xFF	; 255
    1de8:	5f e7       	ldi	r21, 0x7F	; 127
    1dea:	04 c0       	rjmp	.+8      	; 0x1df4 <__fixsfsi+0x9c>
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	50 e8       	ldi	r21, 0x80	; 128
    1df4:	b9 01       	movw	r22, r18
    1df6:	ca 01       	movw	r24, r20
    1df8:	2c 96       	adiw	r28, 0x0c	; 12
    1dfa:	e2 e0       	ldi	r30, 0x02	; 2
    1dfc:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x20>

00001e00 <__pack_f>:
    1e00:	df 92       	push	r13
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	e4 80       	ldd	r14, Z+4	; 0x04
    1e0e:	f5 80       	ldd	r15, Z+5	; 0x05
    1e10:	06 81       	ldd	r16, Z+6	; 0x06
    1e12:	17 81       	ldd	r17, Z+7	; 0x07
    1e14:	d1 80       	ldd	r13, Z+1	; 0x01
    1e16:	80 81       	ld	r24, Z
    1e18:	82 30       	cpi	r24, 0x02	; 2
    1e1a:	48 f4       	brcc	.+18     	; 0x1e2e <__pack_f+0x2e>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a0 e1       	ldi	r26, 0x10	; 16
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e8 2a       	or	r14, r24
    1e26:	f9 2a       	or	r15, r25
    1e28:	0a 2b       	or	r16, r26
    1e2a:	1b 2b       	or	r17, r27
    1e2c:	a5 c0       	rjmp	.+330    	; 0x1f78 <__pack_f+0x178>
    1e2e:	84 30       	cpi	r24, 0x04	; 4
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <__pack_f+0x34>
    1e32:	9f c0       	rjmp	.+318    	; 0x1f72 <__pack_f+0x172>
    1e34:	82 30       	cpi	r24, 0x02	; 2
    1e36:	21 f4       	brne	.+8      	; 0x1e40 <__pack_f+0x40>
    1e38:	ee 24       	eor	r14, r14
    1e3a:	ff 24       	eor	r15, r15
    1e3c:	87 01       	movw	r16, r14
    1e3e:	05 c0       	rjmp	.+10     	; 0x1e4a <__pack_f+0x4a>
    1e40:	e1 14       	cp	r14, r1
    1e42:	f1 04       	cpc	r15, r1
    1e44:	01 05       	cpc	r16, r1
    1e46:	11 05       	cpc	r17, r1
    1e48:	19 f4       	brne	.+6      	; 0x1e50 <__pack_f+0x50>
    1e4a:	e0 e0       	ldi	r30, 0x00	; 0
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	96 c0       	rjmp	.+300    	; 0x1f7c <__pack_f+0x17c>
    1e50:	62 81       	ldd	r22, Z+2	; 0x02
    1e52:	73 81       	ldd	r23, Z+3	; 0x03
    1e54:	9f ef       	ldi	r25, 0xFF	; 255
    1e56:	62 38       	cpi	r22, 0x82	; 130
    1e58:	79 07       	cpc	r23, r25
    1e5a:	0c f0       	brlt	.+2      	; 0x1e5e <__pack_f+0x5e>
    1e5c:	5b c0       	rjmp	.+182    	; 0x1f14 <__pack_f+0x114>
    1e5e:	22 e8       	ldi	r18, 0x82	; 130
    1e60:	3f ef       	ldi	r19, 0xFF	; 255
    1e62:	26 1b       	sub	r18, r22
    1e64:	37 0b       	sbc	r19, r23
    1e66:	2a 31       	cpi	r18, 0x1A	; 26
    1e68:	31 05       	cpc	r19, r1
    1e6a:	2c f0       	brlt	.+10     	; 0x1e76 <__pack_f+0x76>
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	50 e0       	ldi	r21, 0x00	; 0
    1e74:	2a c0       	rjmp	.+84     	; 0x1eca <__pack_f+0xca>
    1e76:	b8 01       	movw	r22, r16
    1e78:	a7 01       	movw	r20, r14
    1e7a:	02 2e       	mov	r0, r18
    1e7c:	04 c0       	rjmp	.+8      	; 0x1e86 <__pack_f+0x86>
    1e7e:	76 95       	lsr	r23
    1e80:	67 95       	ror	r22
    1e82:	57 95       	ror	r21
    1e84:	47 95       	ror	r20
    1e86:	0a 94       	dec	r0
    1e88:	d2 f7       	brpl	.-12     	; 0x1e7e <__pack_f+0x7e>
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a0 e0       	ldi	r26, 0x00	; 0
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	04 c0       	rjmp	.+8      	; 0x1e9c <__pack_f+0x9c>
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	aa 1f       	adc	r26, r26
    1e9a:	bb 1f       	adc	r27, r27
    1e9c:	2a 95       	dec	r18
    1e9e:	d2 f7       	brpl	.-12     	; 0x1e94 <__pack_f+0x94>
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	a1 09       	sbc	r26, r1
    1ea4:	b1 09       	sbc	r27, r1
    1ea6:	8e 21       	and	r24, r14
    1ea8:	9f 21       	and	r25, r15
    1eaa:	a0 23       	and	r26, r16
    1eac:	b1 23       	and	r27, r17
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	a1 05       	cpc	r26, r1
    1eb2:	b1 05       	cpc	r27, r1
    1eb4:	21 f0       	breq	.+8      	; 0x1ebe <__pack_f+0xbe>
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a0 e0       	ldi	r26, 0x00	; 0
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	9a 01       	movw	r18, r20
    1ec0:	ab 01       	movw	r20, r22
    1ec2:	28 2b       	or	r18, r24
    1ec4:	39 2b       	or	r19, r25
    1ec6:	4a 2b       	or	r20, r26
    1ec8:	5b 2b       	or	r21, r27
    1eca:	da 01       	movw	r26, r20
    1ecc:	c9 01       	movw	r24, r18
    1ece:	8f 77       	andi	r24, 0x7F	; 127
    1ed0:	90 70       	andi	r25, 0x00	; 0
    1ed2:	a0 70       	andi	r26, 0x00	; 0
    1ed4:	b0 70       	andi	r27, 0x00	; 0
    1ed6:	80 34       	cpi	r24, 0x40	; 64
    1ed8:	91 05       	cpc	r25, r1
    1eda:	a1 05       	cpc	r26, r1
    1edc:	b1 05       	cpc	r27, r1
    1ede:	39 f4       	brne	.+14     	; 0x1eee <__pack_f+0xee>
    1ee0:	27 ff       	sbrs	r18, 7
    1ee2:	09 c0       	rjmp	.+18     	; 0x1ef6 <__pack_f+0xf6>
    1ee4:	20 5c       	subi	r18, 0xC0	; 192
    1ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee8:	4f 4f       	sbci	r20, 0xFF	; 255
    1eea:	5f 4f       	sbci	r21, 0xFF	; 255
    1eec:	04 c0       	rjmp	.+8      	; 0x1ef6 <__pack_f+0xf6>
    1eee:	21 5c       	subi	r18, 0xC1	; 193
    1ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	e0 e0       	ldi	r30, 0x00	; 0
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	20 30       	cpi	r18, 0x00	; 0
    1efc:	a0 e0       	ldi	r26, 0x00	; 0
    1efe:	3a 07       	cpc	r19, r26
    1f00:	a0 e0       	ldi	r26, 0x00	; 0
    1f02:	4a 07       	cpc	r20, r26
    1f04:	a0 e4       	ldi	r26, 0x40	; 64
    1f06:	5a 07       	cpc	r21, r26
    1f08:	10 f0       	brcs	.+4      	; 0x1f0e <__pack_f+0x10e>
    1f0a:	e1 e0       	ldi	r30, 0x01	; 1
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	79 01       	movw	r14, r18
    1f10:	8a 01       	movw	r16, r20
    1f12:	27 c0       	rjmp	.+78     	; 0x1f62 <__pack_f+0x162>
    1f14:	60 38       	cpi	r22, 0x80	; 128
    1f16:	71 05       	cpc	r23, r1
    1f18:	64 f5       	brge	.+88     	; 0x1f72 <__pack_f+0x172>
    1f1a:	fb 01       	movw	r30, r22
    1f1c:	e1 58       	subi	r30, 0x81	; 129
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	d8 01       	movw	r26, r16
    1f22:	c7 01       	movw	r24, r14
    1f24:	8f 77       	andi	r24, 0x7F	; 127
    1f26:	90 70       	andi	r25, 0x00	; 0
    1f28:	a0 70       	andi	r26, 0x00	; 0
    1f2a:	b0 70       	andi	r27, 0x00	; 0
    1f2c:	80 34       	cpi	r24, 0x40	; 64
    1f2e:	91 05       	cpc	r25, r1
    1f30:	a1 05       	cpc	r26, r1
    1f32:	b1 05       	cpc	r27, r1
    1f34:	39 f4       	brne	.+14     	; 0x1f44 <__pack_f+0x144>
    1f36:	e7 fe       	sbrs	r14, 7
    1f38:	0d c0       	rjmp	.+26     	; 0x1f54 <__pack_f+0x154>
    1f3a:	80 e4       	ldi	r24, 0x40	; 64
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a0 e0       	ldi	r26, 0x00	; 0
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	04 c0       	rjmp	.+8      	; 0x1f4c <__pack_f+0x14c>
    1f44:	8f e3       	ldi	r24, 0x3F	; 63
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e0       	ldi	r26, 0x00	; 0
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e8 0e       	add	r14, r24
    1f4e:	f9 1e       	adc	r15, r25
    1f50:	0a 1f       	adc	r16, r26
    1f52:	1b 1f       	adc	r17, r27
    1f54:	17 ff       	sbrs	r17, 7
    1f56:	05 c0       	rjmp	.+10     	; 0x1f62 <__pack_f+0x162>
    1f58:	16 95       	lsr	r17
    1f5a:	07 95       	ror	r16
    1f5c:	f7 94       	ror	r15
    1f5e:	e7 94       	ror	r14
    1f60:	31 96       	adiw	r30, 0x01	; 1
    1f62:	87 e0       	ldi	r24, 0x07	; 7
    1f64:	16 95       	lsr	r17
    1f66:	07 95       	ror	r16
    1f68:	f7 94       	ror	r15
    1f6a:	e7 94       	ror	r14
    1f6c:	8a 95       	dec	r24
    1f6e:	d1 f7       	brne	.-12     	; 0x1f64 <__pack_f+0x164>
    1f70:	05 c0       	rjmp	.+10     	; 0x1f7c <__pack_f+0x17c>
    1f72:	ee 24       	eor	r14, r14
    1f74:	ff 24       	eor	r15, r15
    1f76:	87 01       	movw	r16, r14
    1f78:	ef ef       	ldi	r30, 0xFF	; 255
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	6e 2f       	mov	r22, r30
    1f7e:	67 95       	ror	r22
    1f80:	66 27       	eor	r22, r22
    1f82:	67 95       	ror	r22
    1f84:	90 2f       	mov	r25, r16
    1f86:	9f 77       	andi	r25, 0x7F	; 127
    1f88:	d7 94       	ror	r13
    1f8a:	dd 24       	eor	r13, r13
    1f8c:	d7 94       	ror	r13
    1f8e:	8e 2f       	mov	r24, r30
    1f90:	86 95       	lsr	r24
    1f92:	49 2f       	mov	r20, r25
    1f94:	46 2b       	or	r20, r22
    1f96:	58 2f       	mov	r21, r24
    1f98:	5d 29       	or	r21, r13
    1f9a:	b7 01       	movw	r22, r14
    1f9c:	ca 01       	movw	r24, r20
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	08 95       	ret

00001faa <__unpack_f>:
    1faa:	fc 01       	movw	r30, r24
    1fac:	db 01       	movw	r26, r22
    1fae:	40 81       	ld	r20, Z
    1fb0:	51 81       	ldd	r21, Z+1	; 0x01
    1fb2:	22 81       	ldd	r18, Z+2	; 0x02
    1fb4:	62 2f       	mov	r22, r18
    1fb6:	6f 77       	andi	r22, 0x7F	; 127
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	22 1f       	adc	r18, r18
    1fbc:	22 27       	eor	r18, r18
    1fbe:	22 1f       	adc	r18, r18
    1fc0:	93 81       	ldd	r25, Z+3	; 0x03
    1fc2:	89 2f       	mov	r24, r25
    1fc4:	88 0f       	add	r24, r24
    1fc6:	82 2b       	or	r24, r18
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	99 1f       	adc	r25, r25
    1fce:	99 27       	eor	r25, r25
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	11 96       	adiw	r26, 0x01	; 1
    1fd4:	9c 93       	st	X, r25
    1fd6:	11 97       	sbiw	r26, 0x01	; 1
    1fd8:	21 15       	cp	r18, r1
    1fda:	31 05       	cpc	r19, r1
    1fdc:	a9 f5       	brne	.+106    	; 0x2048 <__unpack_f+0x9e>
    1fde:	41 15       	cp	r20, r1
    1fe0:	51 05       	cpc	r21, r1
    1fe2:	61 05       	cpc	r22, r1
    1fe4:	71 05       	cpc	r23, r1
    1fe6:	11 f4       	brne	.+4      	; 0x1fec <__unpack_f+0x42>
    1fe8:	82 e0       	ldi	r24, 0x02	; 2
    1fea:	37 c0       	rjmp	.+110    	; 0x205a <__unpack_f+0xb0>
    1fec:	82 e8       	ldi	r24, 0x82	; 130
    1fee:	9f ef       	ldi	r25, 0xFF	; 255
    1ff0:	13 96       	adiw	r26, 0x03	; 3
    1ff2:	9c 93       	st	X, r25
    1ff4:	8e 93       	st	-X, r24
    1ff6:	12 97       	sbiw	r26, 0x02	; 2
    1ff8:	9a 01       	movw	r18, r20
    1ffa:	ab 01       	movw	r20, r22
    1ffc:	67 e0       	ldi	r22, 0x07	; 7
    1ffe:	22 0f       	add	r18, r18
    2000:	33 1f       	adc	r19, r19
    2002:	44 1f       	adc	r20, r20
    2004:	55 1f       	adc	r21, r21
    2006:	6a 95       	dec	r22
    2008:	d1 f7       	brne	.-12     	; 0x1ffe <__unpack_f+0x54>
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	8c 93       	st	X, r24
    200e:	0d c0       	rjmp	.+26     	; 0x202a <__unpack_f+0x80>
    2010:	22 0f       	add	r18, r18
    2012:	33 1f       	adc	r19, r19
    2014:	44 1f       	adc	r20, r20
    2016:	55 1f       	adc	r21, r21
    2018:	12 96       	adiw	r26, 0x02	; 2
    201a:	8d 91       	ld	r24, X+
    201c:	9c 91       	ld	r25, X
    201e:	13 97       	sbiw	r26, 0x03	; 3
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	13 96       	adiw	r26, 0x03	; 3
    2024:	9c 93       	st	X, r25
    2026:	8e 93       	st	-X, r24
    2028:	12 97       	sbiw	r26, 0x02	; 2
    202a:	20 30       	cpi	r18, 0x00	; 0
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	38 07       	cpc	r19, r24
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	48 07       	cpc	r20, r24
    2034:	80 e4       	ldi	r24, 0x40	; 64
    2036:	58 07       	cpc	r21, r24
    2038:	58 f3       	brcs	.-42     	; 0x2010 <__unpack_f+0x66>
    203a:	14 96       	adiw	r26, 0x04	; 4
    203c:	2d 93       	st	X+, r18
    203e:	3d 93       	st	X+, r19
    2040:	4d 93       	st	X+, r20
    2042:	5c 93       	st	X, r21
    2044:	17 97       	sbiw	r26, 0x07	; 7
    2046:	08 95       	ret
    2048:	2f 3f       	cpi	r18, 0xFF	; 255
    204a:	31 05       	cpc	r19, r1
    204c:	79 f4       	brne	.+30     	; 0x206c <__unpack_f+0xc2>
    204e:	41 15       	cp	r20, r1
    2050:	51 05       	cpc	r21, r1
    2052:	61 05       	cpc	r22, r1
    2054:	71 05       	cpc	r23, r1
    2056:	19 f4       	brne	.+6      	; 0x205e <__unpack_f+0xb4>
    2058:	84 e0       	ldi	r24, 0x04	; 4
    205a:	8c 93       	st	X, r24
    205c:	08 95       	ret
    205e:	64 ff       	sbrs	r22, 4
    2060:	03 c0       	rjmp	.+6      	; 0x2068 <__unpack_f+0xbe>
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	8c 93       	st	X, r24
    2066:	12 c0       	rjmp	.+36     	; 0x208c <__unpack_f+0xe2>
    2068:	1c 92       	st	X, r1
    206a:	10 c0       	rjmp	.+32     	; 0x208c <__unpack_f+0xe2>
    206c:	2f 57       	subi	r18, 0x7F	; 127
    206e:	30 40       	sbci	r19, 0x00	; 0
    2070:	13 96       	adiw	r26, 0x03	; 3
    2072:	3c 93       	st	X, r19
    2074:	2e 93       	st	-X, r18
    2076:	12 97       	sbiw	r26, 0x02	; 2
    2078:	83 e0       	ldi	r24, 0x03	; 3
    207a:	8c 93       	st	X, r24
    207c:	87 e0       	ldi	r24, 0x07	; 7
    207e:	44 0f       	add	r20, r20
    2080:	55 1f       	adc	r21, r21
    2082:	66 1f       	adc	r22, r22
    2084:	77 1f       	adc	r23, r23
    2086:	8a 95       	dec	r24
    2088:	d1 f7       	brne	.-12     	; 0x207e <__unpack_f+0xd4>
    208a:	70 64       	ori	r23, 0x40	; 64
    208c:	14 96       	adiw	r26, 0x04	; 4
    208e:	4d 93       	st	X+, r20
    2090:	5d 93       	st	X+, r21
    2092:	6d 93       	st	X+, r22
    2094:	7c 93       	st	X, r23
    2096:	17 97       	sbiw	r26, 0x07	; 7
    2098:	08 95       	ret

0000209a <__fpcmp_parts_f>:
    209a:	1f 93       	push	r17
    209c:	dc 01       	movw	r26, r24
    209e:	fb 01       	movw	r30, r22
    20a0:	9c 91       	ld	r25, X
    20a2:	92 30       	cpi	r25, 0x02	; 2
    20a4:	08 f4       	brcc	.+2      	; 0x20a8 <__fpcmp_parts_f+0xe>
    20a6:	47 c0       	rjmp	.+142    	; 0x2136 <__fpcmp_parts_f+0x9c>
    20a8:	80 81       	ld	r24, Z
    20aa:	82 30       	cpi	r24, 0x02	; 2
    20ac:	08 f4       	brcc	.+2      	; 0x20b0 <__fpcmp_parts_f+0x16>
    20ae:	43 c0       	rjmp	.+134    	; 0x2136 <__fpcmp_parts_f+0x9c>
    20b0:	94 30       	cpi	r25, 0x04	; 4
    20b2:	51 f4       	brne	.+20     	; 0x20c8 <__fpcmp_parts_f+0x2e>
    20b4:	11 96       	adiw	r26, 0x01	; 1
    20b6:	1c 91       	ld	r17, X
    20b8:	84 30       	cpi	r24, 0x04	; 4
    20ba:	99 f5       	brne	.+102    	; 0x2122 <__fpcmp_parts_f+0x88>
    20bc:	81 81       	ldd	r24, Z+1	; 0x01
    20be:	68 2f       	mov	r22, r24
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	61 1b       	sub	r22, r17
    20c4:	71 09       	sbc	r23, r1
    20c6:	3f c0       	rjmp	.+126    	; 0x2146 <__fpcmp_parts_f+0xac>
    20c8:	84 30       	cpi	r24, 0x04	; 4
    20ca:	21 f0       	breq	.+8      	; 0x20d4 <__fpcmp_parts_f+0x3a>
    20cc:	92 30       	cpi	r25, 0x02	; 2
    20ce:	31 f4       	brne	.+12     	; 0x20dc <__fpcmp_parts_f+0x42>
    20d0:	82 30       	cpi	r24, 0x02	; 2
    20d2:	b9 f1       	breq	.+110    	; 0x2142 <__fpcmp_parts_f+0xa8>
    20d4:	81 81       	ldd	r24, Z+1	; 0x01
    20d6:	88 23       	and	r24, r24
    20d8:	89 f1       	breq	.+98     	; 0x213c <__fpcmp_parts_f+0xa2>
    20da:	2d c0       	rjmp	.+90     	; 0x2136 <__fpcmp_parts_f+0x9c>
    20dc:	11 96       	adiw	r26, 0x01	; 1
    20de:	1c 91       	ld	r17, X
    20e0:	11 97       	sbiw	r26, 0x01	; 1
    20e2:	82 30       	cpi	r24, 0x02	; 2
    20e4:	f1 f0       	breq	.+60     	; 0x2122 <__fpcmp_parts_f+0x88>
    20e6:	81 81       	ldd	r24, Z+1	; 0x01
    20e8:	18 17       	cp	r17, r24
    20ea:	d9 f4       	brne	.+54     	; 0x2122 <__fpcmp_parts_f+0x88>
    20ec:	12 96       	adiw	r26, 0x02	; 2
    20ee:	2d 91       	ld	r18, X+
    20f0:	3c 91       	ld	r19, X
    20f2:	13 97       	sbiw	r26, 0x03	; 3
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	82 17       	cp	r24, r18
    20fa:	93 07       	cpc	r25, r19
    20fc:	94 f0       	brlt	.+36     	; 0x2122 <__fpcmp_parts_f+0x88>
    20fe:	28 17       	cp	r18, r24
    2100:	39 07       	cpc	r19, r25
    2102:	bc f0       	brlt	.+46     	; 0x2132 <__fpcmp_parts_f+0x98>
    2104:	14 96       	adiw	r26, 0x04	; 4
    2106:	8d 91       	ld	r24, X+
    2108:	9d 91       	ld	r25, X+
    210a:	0d 90       	ld	r0, X+
    210c:	bc 91       	ld	r27, X
    210e:	a0 2d       	mov	r26, r0
    2110:	24 81       	ldd	r18, Z+4	; 0x04
    2112:	35 81       	ldd	r19, Z+5	; 0x05
    2114:	46 81       	ldd	r20, Z+6	; 0x06
    2116:	57 81       	ldd	r21, Z+7	; 0x07
    2118:	28 17       	cp	r18, r24
    211a:	39 07       	cpc	r19, r25
    211c:	4a 07       	cpc	r20, r26
    211e:	5b 07       	cpc	r21, r27
    2120:	18 f4       	brcc	.+6      	; 0x2128 <__fpcmp_parts_f+0x8e>
    2122:	11 23       	and	r17, r17
    2124:	41 f0       	breq	.+16     	; 0x2136 <__fpcmp_parts_f+0x9c>
    2126:	0a c0       	rjmp	.+20     	; 0x213c <__fpcmp_parts_f+0xa2>
    2128:	82 17       	cp	r24, r18
    212a:	93 07       	cpc	r25, r19
    212c:	a4 07       	cpc	r26, r20
    212e:	b5 07       	cpc	r27, r21
    2130:	40 f4       	brcc	.+16     	; 0x2142 <__fpcmp_parts_f+0xa8>
    2132:	11 23       	and	r17, r17
    2134:	19 f0       	breq	.+6      	; 0x213c <__fpcmp_parts_f+0xa2>
    2136:	61 e0       	ldi	r22, 0x01	; 1
    2138:	70 e0       	ldi	r23, 0x00	; 0
    213a:	05 c0       	rjmp	.+10     	; 0x2146 <__fpcmp_parts_f+0xac>
    213c:	6f ef       	ldi	r22, 0xFF	; 255
    213e:	7f ef       	ldi	r23, 0xFF	; 255
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <__fpcmp_parts_f+0xac>
    2142:	60 e0       	ldi	r22, 0x00	; 0
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	cb 01       	movw	r24, r22
    2148:	1f 91       	pop	r17
    214a:	08 95       	ret

0000214c <__udivmodhi4>:
    214c:	aa 1b       	sub	r26, r26
    214e:	bb 1b       	sub	r27, r27
    2150:	51 e1       	ldi	r21, 0x11	; 17
    2152:	07 c0       	rjmp	.+14     	; 0x2162 <__udivmodhi4_ep>

00002154 <__udivmodhi4_loop>:
    2154:	aa 1f       	adc	r26, r26
    2156:	bb 1f       	adc	r27, r27
    2158:	a6 17       	cp	r26, r22
    215a:	b7 07       	cpc	r27, r23
    215c:	10 f0       	brcs	.+4      	; 0x2162 <__udivmodhi4_ep>
    215e:	a6 1b       	sub	r26, r22
    2160:	b7 0b       	sbc	r27, r23

00002162 <__udivmodhi4_ep>:
    2162:	88 1f       	adc	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	5a 95       	dec	r21
    2168:	a9 f7       	brne	.-22     	; 0x2154 <__udivmodhi4_loop>
    216a:	80 95       	com	r24
    216c:	90 95       	com	r25
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	08 95       	ret

00002174 <__prologue_saves__>:
    2174:	2f 92       	push	r2
    2176:	3f 92       	push	r3
    2178:	4f 92       	push	r4
    217a:	5f 92       	push	r5
    217c:	6f 92       	push	r6
    217e:	7f 92       	push	r7
    2180:	8f 92       	push	r8
    2182:	9f 92       	push	r9
    2184:	af 92       	push	r10
    2186:	bf 92       	push	r11
    2188:	cf 92       	push	r12
    218a:	df 92       	push	r13
    218c:	ef 92       	push	r14
    218e:	ff 92       	push	r15
    2190:	0f 93       	push	r16
    2192:	1f 93       	push	r17
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	ca 1b       	sub	r28, r26
    219e:	db 0b       	sbc	r29, r27
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	19 94       	eijmp

000021ac <__epilogue_restores__>:
    21ac:	2a 88       	ldd	r2, Y+18	; 0x12
    21ae:	39 88       	ldd	r3, Y+17	; 0x11
    21b0:	48 88       	ldd	r4, Y+16	; 0x10
    21b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    21b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    21b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    21b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    21ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    21bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    21be:	b9 84       	ldd	r11, Y+9	; 0x09
    21c0:	c8 84       	ldd	r12, Y+8	; 0x08
    21c2:	df 80       	ldd	r13, Y+7	; 0x07
    21c4:	ee 80       	ldd	r14, Y+6	; 0x06
    21c6:	fd 80       	ldd	r15, Y+5	; 0x05
    21c8:	0c 81       	ldd	r16, Y+4	; 0x04
    21ca:	1b 81       	ldd	r17, Y+3	; 0x03
    21cc:	aa 81       	ldd	r26, Y+2	; 0x02
    21ce:	b9 81       	ldd	r27, Y+1	; 0x01
    21d0:	ce 0f       	add	r28, r30
    21d2:	d1 1d       	adc	r29, r1
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	ed 01       	movw	r28, r26
    21e0:	08 95       	ret

000021e2 <_exit>:
    21e2:	f8 94       	cli

000021e4 <__stop_program>:
    21e4:	ff cf       	rjmp	.-2      	; 0x21e4 <__stop_program>
